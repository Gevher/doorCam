
doorCam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004008  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080040c8  080040c8  000050c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004150  08004150  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004150  08004150  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004150  08004150  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004150  08004150  00005150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004154  08004154  00005154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004158  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000106c  20000010  08004168  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000107c  08004168  0000607c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f562  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002aee  00000000  00000000  0001559a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00018088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d28  00000000  00000000  00019190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013150  00000000  00000000  00019eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013261  00000000  00000000  0002d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000767fd  00000000  00000000  00040269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6a66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cc8  00000000  00000000  000b6aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000ba774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080040b0 	.word	0x080040b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080040b0 	.word	0x080040b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	@ (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	@ (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	@ 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000080 	.word	0x20000080

08000250 <vUButtonPressed>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vUButtonPressed(void* pvParameters){
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
	TickType_t xDelay250ms = pdMS_TO_TICKS( 250 );
 8000258:	23fa      	movs	r3, #250	@ 0xfa
 800025a:	60fb      	str	r3, [r7, #12]
	uint8_t iQueueValue = 1;
 800025c:	230b      	movs	r3, #11
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	2201      	movs	r2, #1
 8000262:	701a      	strb	r2, [r3, #0]

	while(1){
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 8000264:	2390      	movs	r3, #144	@ 0x90
 8000266:	05db      	lsls	r3, r3, #23
 8000268:	2101      	movs	r1, #1
 800026a:	0018      	movs	r0, r3
 800026c:	f000 fdd6 	bl	8000e1c <HAL_GPIO_ReadPin>
 8000270:	1e03      	subs	r3, r0, #0
 8000272:	d0f7      	beq.n	8000264 <vUButtonPressed+0x14>
			xQueueSendToBack(xButtonQueue, &iQueueValue, 0);
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <vUButtonPressed+0x40>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	230b      	movs	r3, #11
 800027a:	18f9      	adds	r1, r7, r3
 800027c:	2300      	movs	r3, #0
 800027e:	2200      	movs	r2, #0
 8000280:	f002 fb53 	bl	800292a <xQueueGenericSend>
			vTaskDelay(xDelay250ms);
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	0018      	movs	r0, r3
 8000288:	f002 ff5c 	bl	8003144 <vTaskDelay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 800028c:	e7ea      	b.n	8000264 <vUButtonPressed+0x14>
 800028e:	46c0      	nop			@ (mov r8, r8)
 8000290:	200002e8 	.word	0x200002e8

08000294 <vSPITestTask>:
		}
	}
}

void vSPITestTask(void* pvParameters){
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b087      	sub	sp, #28
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	uint8_t iQueueValue;
	TickType_t xDelay250ms = pdMS_TO_TICKS( 250 );
 800029c:	23fa      	movs	r3, #250	@ 0xfa
 800029e:	617b      	str	r3, [r7, #20]
	BaseType_t xStatus;


	while(1){
		xStatus = xQueueReceive(xButtonQueue, &iQueueValue, 100);
 80002a0:	4b14      	ldr	r3, [pc, #80]	@ (80002f4 <vSPITestTask+0x60>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	240f      	movs	r4, #15
 80002a6:	1939      	adds	r1, r7, r4
 80002a8:	2264      	movs	r2, #100	@ 0x64
 80002aa:	0018      	movs	r0, r3
 80002ac:	f002 fc05 	bl	8002aba <xQueueReceive>
 80002b0:	0003      	movs	r3, r0
 80002b2:	613b      	str	r3, [r7, #16]
		if(xStatus == pdPASS)
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d117      	bne.n	80002ea <vSPITestTask+0x56>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	480e      	ldr	r0, [pc, #56]	@ (80002f8 <vSPITestTask+0x64>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	0019      	movs	r1, r3
 80002c4:	f000 fdc7 	bl	8000e56 <HAL_GPIO_WritePin>
			HAL_SPI_Transmit(&hspi1, &iQueueValue, 2, 1000);
 80002c8:	23fa      	movs	r3, #250	@ 0xfa
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	1939      	adds	r1, r7, r4
 80002ce:	480b      	ldr	r0, [pc, #44]	@ (80002fc <vSPITestTask+0x68>)
 80002d0:	2202      	movs	r2, #2
 80002d2:	f001 fb1d 	bl	8001910 <HAL_SPI_Transmit>
			HAL_Delay(100);
 80002d6:	2064      	movs	r0, #100	@ 0x64
 80002d8:	f000 fb1a 	bl	8000910 <HAL_Delay>
		    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80002dc:	2380      	movs	r3, #128	@ 0x80
 80002de:	009b      	lsls	r3, r3, #2
 80002e0:	4805      	ldr	r0, [pc, #20]	@ (80002f8 <vSPITestTask+0x64>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	0019      	movs	r1, r3
 80002e6:	f000 fdb6 	bl	8000e56 <HAL_GPIO_WritePin>
		}

		vTaskDelay(xDelay250ms);
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	0018      	movs	r0, r3
 80002ee:	f002 ff29 	bl	8003144 <vTaskDelay>
		xStatus = xQueueReceive(xButtonQueue, &iQueueValue, 100);
 80002f2:	e7d5      	b.n	80002a0 <vSPITestTask+0xc>
 80002f4:	200002e8 	.word	0x200002e8
 80002f8:	48000800 	.word	0x48000800
 80002fc:	20000280 	.word	0x20000280

08000300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b08b      	sub	sp, #44	@ 0x2c
 8000304:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000306:	f000 fad3 	bl	80008b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030a:	f000 f847 	bl	800039c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800030e:	f000 f8cd 	bl	80004ac <MX_GPIO_Init>
  MX_SPI1_Init();
 8000312:	f000 f88d 	bl	8000430 <MX_SPI1_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  xButtonQueue = xQueueCreate(10, sizeof(uint8_t));
 8000316:	2200      	movs	r2, #0
 8000318:	2101      	movs	r1, #1
 800031a:	200a      	movs	r0, #10
 800031c:	f002 faac 	bl	8002878 <xQueueGenericCreate>
 8000320:	0002      	movs	r2, r0
 8000322:	4b17      	ldr	r3, [pc, #92]	@ (8000380 <main+0x80>)
 8000324:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	4a16      	ldr	r2, [pc, #88]	@ (8000384 <main+0x84>)
 800032a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800032c:	c313      	stmia	r3!, {r0, r1, r4}
 800032e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000330:	c313      	stmia	r3!, {r0, r1, r4}
 8000332:	6812      	ldr	r2, [r2, #0]
 8000334:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	2100      	movs	r1, #0
 800033a:	0018      	movs	r0, r3
 800033c:	f002 f93d 	bl	80025ba <osThreadCreate>
 8000340:	0002      	movs	r2, r0
 8000342:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <main+0x88>)
 8000344:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  if(xButtonQueue != NULL){
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <main+0x80>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	2b00      	cmp	r3, #0
 800034c:	d013      	beq.n	8000376 <main+0x76>
	  xTaskCreate(vSPITestTask, "SPI_Test", 100, NULL, 1, NULL);
 800034e:	490f      	ldr	r1, [pc, #60]	@ (800038c <main+0x8c>)
 8000350:	480f      	ldr	r0, [pc, #60]	@ (8000390 <main+0x90>)
 8000352:	2300      	movs	r3, #0
 8000354:	9301      	str	r3, [sp, #4]
 8000356:	2301      	movs	r3, #1
 8000358:	9300      	str	r3, [sp, #0]
 800035a:	2300      	movs	r3, #0
 800035c:	2264      	movs	r2, #100	@ 0x64
 800035e:	f002 fdc7 	bl	8002ef0 <xTaskCreate>
	  xTaskCreate(vUButtonPressed, "User button pressed", 100, NULL, 1, NULL);
 8000362:	490c      	ldr	r1, [pc, #48]	@ (8000394 <main+0x94>)
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <main+0x98>)
 8000366:	2300      	movs	r3, #0
 8000368:	9301      	str	r3, [sp, #4]
 800036a:	2301      	movs	r3, #1
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2300      	movs	r3, #0
 8000370:	2264      	movs	r2, #100	@ 0x64
 8000372:	f002 fdbd 	bl	8002ef0 <xTaskCreate>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000376:	f002 f918 	bl	80025aa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800037a:	46c0      	nop			@ (mov r8, r8)
 800037c:	e7fd      	b.n	800037a <main+0x7a>
 800037e:	46c0      	nop			@ (mov r8, r8)
 8000380:	200002e8 	.word	0x200002e8
 8000384:	080040f4 	.word	0x080040f4
 8000388:	200002e4 	.word	0x200002e4
 800038c:	080040c8 	.word	0x080040c8
 8000390:	08000295 	.word	0x08000295
 8000394:	080040d4 	.word	0x080040d4
 8000398:	08000251 	.word	0x08000251

0800039c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800039c:	b590      	push	{r4, r7, lr}
 800039e:	b091      	sub	sp, #68	@ 0x44
 80003a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a2:	2410      	movs	r4, #16
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	0018      	movs	r0, r3
 80003a8:	2330      	movs	r3, #48	@ 0x30
 80003aa:	001a      	movs	r2, r3
 80003ac:	2100      	movs	r1, #0
 80003ae:	f003 fe49 	bl	8004044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b2:	003b      	movs	r3, r7
 80003b4:	0018      	movs	r0, r3
 80003b6:	2310      	movs	r3, #16
 80003b8:	001a      	movs	r2, r3
 80003ba:	2100      	movs	r1, #0
 80003bc:	f003 fe42 	bl	8004044 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003c0:	0021      	movs	r1, r4
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2202      	movs	r2, #2
 80003c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2201      	movs	r2, #1
 80003cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ce:	187b      	adds	r3, r7, r1
 80003d0:	2210      	movs	r2, #16
 80003d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003d4:	187b      	adds	r3, r7, r1
 80003d6:	2202      	movs	r2, #2
 80003d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003da:	187b      	adds	r3, r7, r1
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80003e0:	187b      	adds	r3, r7, r1
 80003e2:	22a0      	movs	r2, #160	@ 0xa0
 80003e4:	0392      	lsls	r2, r2, #14
 80003e6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003e8:	187b      	adds	r3, r7, r1
 80003ea:	2200      	movs	r2, #0
 80003ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	187b      	adds	r3, r7, r1
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 fd4d 	bl	8000e90 <HAL_RCC_OscConfig>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80003fa:	f000 f8d9 	bl	80005b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	003b      	movs	r3, r7
 8000400:	2207      	movs	r2, #7
 8000402:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000404:	003b      	movs	r3, r7
 8000406:	2202      	movs	r2, #2
 8000408:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	003b      	movs	r3, r7
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000416:	003b      	movs	r3, r7
 8000418:	2101      	movs	r1, #1
 800041a:	0018      	movs	r0, r3
 800041c:	f001 f852 	bl	80014c4 <HAL_RCC_ClockConfig>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000424:	f000 f8c4 	bl	80005b0 <Error_Handler>
  }
}
 8000428:	46c0      	nop			@ (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b011      	add	sp, #68	@ 0x44
 800042e:	bd90      	pop	{r4, r7, pc}

08000430 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000434:	4b1b      	ldr	r3, [pc, #108]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000436:	4a1c      	ldr	r2, [pc, #112]	@ (80004a8 <MX_SPI1_Init+0x78>)
 8000438:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800043c:	2282      	movs	r2, #130	@ 0x82
 800043e:	0052      	lsls	r2, r2, #1
 8000440:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000442:	4b18      	ldr	r3, [pc, #96]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000448:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800044a:	22e0      	movs	r2, #224	@ 0xe0
 800044c:	00d2      	lsls	r2, r2, #3
 800044e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000450:	4b14      	ldr	r3, [pc, #80]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000458:	2200      	movs	r2, #0
 800045a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800045c:	4b11      	ldr	r3, [pc, #68]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800045e:	2200      	movs	r2, #0
 8000460:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000462:	4b10      	ldr	r3, [pc, #64]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000464:	2208      	movs	r2, #8
 8000466:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000468:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800046a:	2200      	movs	r2, #0
 800046c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800046e:	4b0d      	ldr	r3, [pc, #52]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000474:	4b0b      	ldr	r3, [pc, #44]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800047a:	4b0a      	ldr	r3, [pc, #40]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800047c:	2207      	movs	r2, #7
 800047e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000480:	4b08      	ldr	r3, [pc, #32]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000486:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <MX_SPI1_Init+0x74>)
 8000488:	2208      	movs	r2, #8
 800048a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800048c:	4b05      	ldr	r3, [pc, #20]	@ (80004a4 <MX_SPI1_Init+0x74>)
 800048e:	0018      	movs	r0, r3
 8000490:	f001 f986 	bl	80017a0 <HAL_SPI_Init>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d001      	beq.n	800049c <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000498:	f000 f88a 	bl	80005b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800049c:	46c0      	nop			@ (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	46c0      	nop			@ (mov r8, r8)
 80004a4:	20000280 	.word	0x20000280
 80004a8:	40013000 	.word	0x40013000

080004ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b089      	sub	sp, #36	@ 0x24
 80004b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	240c      	movs	r4, #12
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f003 fdc1 	bl	8004044 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000574 <MX_GPIO_Init+0xc8>)
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	4b2b      	ldr	r3, [pc, #172]	@ (8000574 <MX_GPIO_Init+0xc8>)
 80004c8:	2180      	movs	r1, #128	@ 0x80
 80004ca:	0289      	lsls	r1, r1, #10
 80004cc:	430a      	orrs	r2, r1
 80004ce:	615a      	str	r2, [r3, #20]
 80004d0:	4b28      	ldr	r3, [pc, #160]	@ (8000574 <MX_GPIO_Init+0xc8>)
 80004d2:	695a      	ldr	r2, [r3, #20]
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	029b      	lsls	r3, r3, #10
 80004d8:	4013      	ands	r3, r2
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	4b25      	ldr	r3, [pc, #148]	@ (8000574 <MX_GPIO_Init+0xc8>)
 80004e0:	695a      	ldr	r2, [r3, #20]
 80004e2:	4b24      	ldr	r3, [pc, #144]	@ (8000574 <MX_GPIO_Init+0xc8>)
 80004e4:	2180      	movs	r1, #128	@ 0x80
 80004e6:	0309      	lsls	r1, r1, #12
 80004e8:	430a      	orrs	r2, r1
 80004ea:	615a      	str	r2, [r3, #20]
 80004ec:	4b21      	ldr	r3, [pc, #132]	@ (8000574 <MX_GPIO_Init+0xc8>)
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	2380      	movs	r3, #128	@ 0x80
 80004f2:	031b      	lsls	r3, r3, #12
 80004f4:	4013      	ands	r3, r2
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <MX_GPIO_Init+0xc8>)
 80004fc:	695a      	ldr	r2, [r3, #20]
 80004fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000574 <MX_GPIO_Init+0xc8>)
 8000500:	2180      	movs	r1, #128	@ 0x80
 8000502:	02c9      	lsls	r1, r1, #11
 8000504:	430a      	orrs	r2, r1
 8000506:	615a      	str	r2, [r3, #20]
 8000508:	4b1a      	ldr	r3, [pc, #104]	@ (8000574 <MX_GPIO_Init+0xc8>)
 800050a:	695a      	ldr	r2, [r3, #20]
 800050c:	2380      	movs	r3, #128	@ 0x80
 800050e:	02db      	lsls	r3, r3, #11
 8000510:	4013      	ands	r3, r2
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 8000516:	2380      	movs	r3, #128	@ 0x80
 8000518:	009b      	lsls	r3, r3, #2
 800051a:	4817      	ldr	r0, [pc, #92]	@ (8000578 <MX_GPIO_Init+0xcc>)
 800051c:	2200      	movs	r2, #0
 800051e:	0019      	movs	r1, r3
 8000520:	f000 fc99 	bl	8000e56 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2201      	movs	r2, #1
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000536:	193a      	adds	r2, r7, r4
 8000538:	2390      	movs	r3, #144	@ 0x90
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f000 fafc 	bl	8000b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 8000544:	0021      	movs	r1, r4
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2280      	movs	r2, #128	@ 0x80
 800054a:	0092      	lsls	r2, r2, #2
 800054c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2201      	movs	r2, #1
 8000552:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000560:	187b      	adds	r3, r7, r1
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <MX_GPIO_Init+0xcc>)
 8000564:	0019      	movs	r1, r3
 8000566:	0010      	movs	r0, r2
 8000568:	f000 fae8 	bl	8000b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b009      	add	sp, #36	@ 0x24
 8000572:	bd90      	pop	{r4, r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	48000800 	.word	0x48000800

0800057c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000584:	2001      	movs	r0, #1
 8000586:	f002 f865 	bl	8002654 <osDelay>
 800058a:	e7fb      	b.n	8000584 <StartDefaultTask+0x8>

0800058c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a04      	ldr	r2, [pc, #16]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d101      	bne.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800059e:	f000 f99b 	bl	80008d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			@ (mov r8, r8)
 80005ac:	40012c00 	.word	0x40012c00

080005b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b4:	b672      	cpsid	i
}
 80005b6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	e7fd      	b.n	80005b8 <Error_Handler+0x8>

080005bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005c2:	4b12      	ldr	r3, [pc, #72]	@ (800060c <HAL_MspInit+0x50>)
 80005c4:	699a      	ldr	r2, [r3, #24]
 80005c6:	4b11      	ldr	r3, [pc, #68]	@ (800060c <HAL_MspInit+0x50>)
 80005c8:	2101      	movs	r1, #1
 80005ca:	430a      	orrs	r2, r1
 80005cc:	619a      	str	r2, [r3, #24]
 80005ce:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <HAL_MspInit+0x50>)
 80005d0:	699b      	ldr	r3, [r3, #24]
 80005d2:	2201      	movs	r2, #1
 80005d4:	4013      	ands	r3, r2
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b0c      	ldr	r3, [pc, #48]	@ (800060c <HAL_MspInit+0x50>)
 80005dc:	69da      	ldr	r2, [r3, #28]
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <HAL_MspInit+0x50>)
 80005e0:	2180      	movs	r1, #128	@ 0x80
 80005e2:	0549      	lsls	r1, r1, #21
 80005e4:	430a      	orrs	r2, r1
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <HAL_MspInit+0x50>)
 80005ea:	69da      	ldr	r2, [r3, #28]
 80005ec:	2380      	movs	r3, #128	@ 0x80
 80005ee:	055b      	lsls	r3, r3, #21
 80005f0:	4013      	ands	r3, r2
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80005f6:	2302      	movs	r3, #2
 80005f8:	425b      	negs	r3, r3
 80005fa:	2200      	movs	r2, #0
 80005fc:	2103      	movs	r1, #3
 80005fe:	0018      	movs	r0, r3
 8000600:	f000 fa32 	bl	8000a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000604:	46c0      	nop			@ (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000

08000610 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000610:	b590      	push	{r4, r7, lr}
 8000612:	b08b      	sub	sp, #44	@ 0x2c
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	2414      	movs	r4, #20
 800061a:	193b      	adds	r3, r7, r4
 800061c:	0018      	movs	r0, r3
 800061e:	2314      	movs	r3, #20
 8000620:	001a      	movs	r2, r3
 8000622:	2100      	movs	r1, #0
 8000624:	f003 fd0e 	bl	8004044 <memset>
  if(hspi->Instance==SPI1)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a32      	ldr	r2, [pc, #200]	@ (80006f8 <HAL_SPI_MspInit+0xe8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d15e      	bne.n	80006f0 <HAL_SPI_MspInit+0xe0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000632:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <HAL_SPI_MspInit+0xec>)
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	4b31      	ldr	r3, [pc, #196]	@ (80006fc <HAL_SPI_MspInit+0xec>)
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	0149      	lsls	r1, r1, #5
 800063c:	430a      	orrs	r2, r1
 800063e:	619a      	str	r2, [r3, #24]
 8000640:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <HAL_SPI_MspInit+0xec>)
 8000642:	699a      	ldr	r2, [r3, #24]
 8000644:	2380      	movs	r3, #128	@ 0x80
 8000646:	015b      	lsls	r3, r3, #5
 8000648:	4013      	ands	r3, r2
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b2b      	ldr	r3, [pc, #172]	@ (80006fc <HAL_SPI_MspInit+0xec>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <HAL_SPI_MspInit+0xec>)
 8000654:	2180      	movs	r1, #128	@ 0x80
 8000656:	0289      	lsls	r1, r1, #10
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <HAL_SPI_MspInit+0xec>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	@ 0x80
 8000662:	029b      	lsls	r3, r3, #10
 8000664:	4013      	ands	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <HAL_SPI_MspInit+0xec>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <HAL_SPI_MspInit+0xec>)
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	02c9      	lsls	r1, r1, #11
 8000674:	430a      	orrs	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <HAL_SPI_MspInit+0xec>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	02db      	lsls	r3, r3, #11
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000686:	193b      	adds	r3, r7, r4
 8000688:	2280      	movs	r2, #128	@ 0x80
 800068a:	0212      	lsls	r2, r2, #8
 800068c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2202      	movs	r2, #2
 8000692:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2203      	movs	r2, #3
 800069e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a6:	193a      	adds	r2, r7, r4
 80006a8:	2390      	movs	r3, #144	@ 0x90
 80006aa:	05db      	lsls	r3, r3, #23
 80006ac:	0011      	movs	r1, r2
 80006ae:	0018      	movs	r0, r3
 80006b0:	f000 fa44 	bl	8000b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80006b4:	0021      	movs	r1, r4
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2238      	movs	r2, #56	@ 0x38
 80006ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2202      	movs	r2, #2
 80006c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2203      	movs	r2, #3
 80006cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000700 <HAL_SPI_MspInit+0xf0>)
 80006d8:	0019      	movs	r1, r3
 80006da:	0010      	movs	r0, r2
 80006dc:	f000 fa2e 	bl	8000b3c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2103      	movs	r1, #3
 80006e4:	2019      	movs	r0, #25
 80006e6:	f000 f9bf 	bl	8000a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80006ea:	2019      	movs	r0, #25
 80006ec:	f000 f9d1 	bl	8000a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006f0:	46c0      	nop			@ (mov r8, r8)
 80006f2:	46bd      	mov	sp, r7
 80006f4:	b00b      	add	sp, #44	@ 0x2c
 80006f6:	bd90      	pop	{r4, r7, pc}
 80006f8:	40013000 	.word	0x40013000
 80006fc:	40021000 	.word	0x40021000
 8000700:	48000400 	.word	0x48000400

08000704 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000704:	b5b0      	push	{r4, r5, r7, lr}
 8000706:	b08c      	sub	sp, #48	@ 0x30
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000714:	4b38      	ldr	r3, [pc, #224]	@ (80007f8 <HAL_InitTick+0xf4>)
 8000716:	699a      	ldr	r2, [r3, #24]
 8000718:	4b37      	ldr	r3, [pc, #220]	@ (80007f8 <HAL_InitTick+0xf4>)
 800071a:	2180      	movs	r1, #128	@ 0x80
 800071c:	0109      	lsls	r1, r1, #4
 800071e:	430a      	orrs	r2, r1
 8000720:	619a      	str	r2, [r3, #24]
 8000722:	4b35      	ldr	r3, [pc, #212]	@ (80007f8 <HAL_InitTick+0xf4>)
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	011b      	lsls	r3, r3, #4
 800072a:	4013      	ands	r3, r2
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000730:	230c      	movs	r3, #12
 8000732:	18fa      	adds	r2, r7, r3
 8000734:	2410      	movs	r4, #16
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f001 f806 	bl	800174c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000740:	193b      	adds	r3, r7, r4
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000748:	2b00      	cmp	r3, #0
 800074a:	d104      	bne.n	8000756 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800074c:	f000 ffe8 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 8000750:	0003      	movs	r3, r0
 8000752:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000754:	e004      	b.n	8000760 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000756:	f000 ffe3 	bl	8001720 <HAL_RCC_GetPCLK1Freq>
 800075a:	0003      	movs	r3, r0
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000762:	4926      	ldr	r1, [pc, #152]	@ (80007fc <HAL_InitTick+0xf8>)
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff fccf 	bl	8000108 <__udivsi3>
 800076a:	0003      	movs	r3, r0
 800076c:	3b01      	subs	r3, #1
 800076e:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000770:	4b23      	ldr	r3, [pc, #140]	@ (8000800 <HAL_InitTick+0xfc>)
 8000772:	4a24      	ldr	r2, [pc, #144]	@ (8000804 <HAL_InitTick+0x100>)
 8000774:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000776:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <HAL_InitTick+0xfc>)
 8000778:	4a23      	ldr	r2, [pc, #140]	@ (8000808 <HAL_InitTick+0x104>)
 800077a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800077c:	4b20      	ldr	r3, [pc, #128]	@ (8000800 <HAL_InitTick+0xfc>)
 800077e:	6a3a      	ldr	r2, [r7, #32]
 8000780:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000782:	4b1f      	ldr	r3, [pc, #124]	@ (8000800 <HAL_InitTick+0xfc>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000788:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <HAL_InitTick+0xfc>)
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	@ (8000800 <HAL_InitTick+0xfc>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000794:	252b      	movs	r5, #43	@ 0x2b
 8000796:	197c      	adds	r4, r7, r5
 8000798:	4b19      	ldr	r3, [pc, #100]	@ (8000800 <HAL_InitTick+0xfc>)
 800079a:	0018      	movs	r0, r3
 800079c:	f001 fc96 	bl	80020cc <HAL_TIM_Base_Init>
 80007a0:	0003      	movs	r3, r0
 80007a2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80007a4:	197b      	adds	r3, r7, r5
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d11e      	bne.n	80007ea <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007ac:	197c      	adds	r4, r7, r5
 80007ae:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <HAL_InitTick+0xfc>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fce3 	bl	800217c <HAL_TIM_Base_Start_IT>
 80007b6:	0003      	movs	r3, r0
 80007b8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80007ba:	197b      	adds	r3, r7, r5
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d113      	bne.n	80007ea <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80007c2:	200d      	movs	r0, #13
 80007c4:	f000 f965 	bl	8000a92 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	d809      	bhi.n	80007e2 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	0019      	movs	r1, r3
 80007d4:	200d      	movs	r0, #13
 80007d6:	f000 f947 	bl	8000a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <HAL_InitTick+0x108>)
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	e003      	b.n	80007ea <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80007e2:	232b      	movs	r3, #43	@ 0x2b
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80007ea:	232b      	movs	r3, #43	@ 0x2b
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	781b      	ldrb	r3, [r3, #0]
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b00c      	add	sp, #48	@ 0x30
 80007f6:	bdb0      	pop	{r4, r5, r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	000f4240 	.word	0x000f4240
 8000800:	200002ec 	.word	0x200002ec
 8000804:	40012c00 	.word	0x40012c00
 8000808:	000003e7 	.word	0x000003e7
 800080c:	20000004 	.word	0x20000004

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000814:	46c0      	nop			@ (mov r8, r8)
 8000816:	e7fd      	b.n	8000814 <NMI_Handler+0x4>

08000818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	e7fd      	b.n	800081c <HardFault_Handler+0x4>

08000820 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000824:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000826:	0018      	movs	r0, r3
 8000828:	f001 fcfa 	bl	8002220 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800082c:	46c0      	nop			@ (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	200002ec 	.word	0x200002ec

08000838 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800083c:	4b03      	ldr	r3, [pc, #12]	@ (800084c <SPI1_IRQHandler+0x14>)
 800083e:	0018      	movs	r0, r3
 8000840:	f001 f9c6 	bl	8001bd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000844:	46c0      	nop			@ (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	20000280 	.word	0x20000280

08000850 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	480d      	ldr	r0, [pc, #52]	@ (8000894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 8000860:	f7ff fff6 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088a:	f003 fbe3 	bl	8004054 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fd37 	bl	8000300 <main>

08000892 <LoopForever>:

LoopForever:
    b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   r0, =_estack
 8000894:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008a0:	08004158 	.word	0x08004158
  ldr r2, =_sbss
 80008a4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008a8:	2000107c 	.word	0x2000107c

080008ac <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC1_COMP_IRQHandler>
	...

080008b0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <HAL_Init+0x24>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <HAL_Init+0x24>)
 80008ba:	2110      	movs	r1, #16
 80008bc:	430a      	orrs	r2, r1
 80008be:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008c0:	2003      	movs	r0, #3
 80008c2:	f7ff ff1f 	bl	8000704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c6:	f7ff fe79 	bl	80005bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ca:	2300      	movs	r3, #0
}
 80008cc:	0018      	movs	r0, r3
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	40022000 	.word	0x40022000

080008d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <HAL_IncTick+0x1c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	001a      	movs	r2, r3
 80008e2:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_IncTick+0x20>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	18d2      	adds	r2, r2, r3
 80008e8:	4b03      	ldr	r3, [pc, #12]	@ (80008f8 <HAL_IncTick+0x20>)
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	20000008 	.word	0x20000008
 80008f8:	20000334 	.word	0x20000334

080008fc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000900:	4b02      	ldr	r3, [pc, #8]	@ (800090c <HAL_GetTick+0x10>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	20000334 	.word	0x20000334

08000910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000918:	f7ff fff0 	bl	80008fc <HAL_GetTick>
 800091c:	0003      	movs	r3, r0
 800091e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	3301      	adds	r3, #1
 8000928:	d005      	beq.n	8000936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_Delay+0x44>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	001a      	movs	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	189b      	adds	r3, r3, r2
 8000934:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000936:	46c0      	nop			@ (mov r8, r8)
 8000938:	f7ff ffe0 	bl	80008fc <HAL_GetTick>
 800093c:	0002      	movs	r2, r0
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	68fa      	ldr	r2, [r7, #12]
 8000944:	429a      	cmp	r2, r3
 8000946:	d8f7      	bhi.n	8000938 <HAL_Delay+0x28>
  {
  }
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46c0      	nop			@ (mov r8, r8)
 800094c:	46bd      	mov	sp, r7
 800094e:	b004      	add	sp, #16
 8000950:	bd80      	pop	{r7, pc}
 8000952:	46c0      	nop			@ (mov r8, r8)
 8000954:	20000008 	.word	0x20000008

08000958 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	0002      	movs	r2, r0
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b7f      	cmp	r3, #127	@ 0x7f
 800096a:	d809      	bhi.n	8000980 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	001a      	movs	r2, r3
 8000972:	231f      	movs	r3, #31
 8000974:	401a      	ands	r2, r3
 8000976:	4b04      	ldr	r3, [pc, #16]	@ (8000988 <__NVIC_EnableIRQ+0x30>)
 8000978:	2101      	movs	r1, #1
 800097a:	4091      	lsls	r1, r2
 800097c:	000a      	movs	r2, r1
 800097e:	601a      	str	r2, [r3, #0]
  }
}
 8000980:	46c0      	nop			@ (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b002      	add	sp, #8
 8000986:	bd80      	pop	{r7, pc}
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	0002      	movs	r2, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800099a:	1dfb      	adds	r3, r7, #7
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b7f      	cmp	r3, #127	@ 0x7f
 80009a0:	d828      	bhi.n	80009f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a60 <__NVIC_SetPriority+0xd4>)
 80009a4:	1dfb      	adds	r3, r7, #7
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b25b      	sxtb	r3, r3
 80009aa:	089b      	lsrs	r3, r3, #2
 80009ac:	33c0      	adds	r3, #192	@ 0xc0
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	589b      	ldr	r3, [r3, r2]
 80009b2:	1dfa      	adds	r2, r7, #7
 80009b4:	7812      	ldrb	r2, [r2, #0]
 80009b6:	0011      	movs	r1, r2
 80009b8:	2203      	movs	r2, #3
 80009ba:	400a      	ands	r2, r1
 80009bc:	00d2      	lsls	r2, r2, #3
 80009be:	21ff      	movs	r1, #255	@ 0xff
 80009c0:	4091      	lsls	r1, r2
 80009c2:	000a      	movs	r2, r1
 80009c4:	43d2      	mvns	r2, r2
 80009c6:	401a      	ands	r2, r3
 80009c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	019b      	lsls	r3, r3, #6
 80009ce:	22ff      	movs	r2, #255	@ 0xff
 80009d0:	401a      	ands	r2, r3
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	0018      	movs	r0, r3
 80009d8:	2303      	movs	r3, #3
 80009da:	4003      	ands	r3, r0
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009e0:	481f      	ldr	r0, [pc, #124]	@ (8000a60 <__NVIC_SetPriority+0xd4>)
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	b25b      	sxtb	r3, r3
 80009e8:	089b      	lsrs	r3, r3, #2
 80009ea:	430a      	orrs	r2, r1
 80009ec:	33c0      	adds	r3, #192	@ 0xc0
 80009ee:	009b      	lsls	r3, r3, #2
 80009f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009f2:	e031      	b.n	8000a58 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a64 <__NVIC_SetPriority+0xd8>)
 80009f6:	1dfb      	adds	r3, r7, #7
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	0019      	movs	r1, r3
 80009fc:	230f      	movs	r3, #15
 80009fe:	400b      	ands	r3, r1
 8000a00:	3b08      	subs	r3, #8
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	3306      	adds	r3, #6
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	18d3      	adds	r3, r2, r3
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	1dfa      	adds	r2, r7, #7
 8000a10:	7812      	ldrb	r2, [r2, #0]
 8000a12:	0011      	movs	r1, r2
 8000a14:	2203      	movs	r2, #3
 8000a16:	400a      	ands	r2, r1
 8000a18:	00d2      	lsls	r2, r2, #3
 8000a1a:	21ff      	movs	r1, #255	@ 0xff
 8000a1c:	4091      	lsls	r1, r2
 8000a1e:	000a      	movs	r2, r1
 8000a20:	43d2      	mvns	r2, r2
 8000a22:	401a      	ands	r2, r3
 8000a24:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	019b      	lsls	r3, r3, #6
 8000a2a:	22ff      	movs	r2, #255	@ 0xff
 8000a2c:	401a      	ands	r2, r3
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	0018      	movs	r0, r3
 8000a34:	2303      	movs	r3, #3
 8000a36:	4003      	ands	r3, r0
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3c:	4809      	ldr	r0, [pc, #36]	@ (8000a64 <__NVIC_SetPriority+0xd8>)
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	001c      	movs	r4, r3
 8000a44:	230f      	movs	r3, #15
 8000a46:	4023      	ands	r3, r4
 8000a48:	3b08      	subs	r3, #8
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	3306      	adds	r3, #6
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	18c3      	adds	r3, r0, r3
 8000a54:	3304      	adds	r3, #4
 8000a56:	601a      	str	r2, [r3, #0]
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b003      	add	sp, #12
 8000a5e:	bd90      	pop	{r4, r7, pc}
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	210f      	movs	r1, #15
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	1c02      	adds	r2, r0, #0
 8000a78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a7a:	68ba      	ldr	r2, [r7, #8]
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b25b      	sxtb	r3, r3
 8000a82:	0011      	movs	r1, r2
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff ff81 	bl	800098c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b004      	add	sp, #16
 8000a90:	bd80      	pop	{r7, pc}

08000a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a92:	b580      	push	{r7, lr}
 8000a94:	b082      	sub	sp, #8
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	0002      	movs	r2, r0
 8000a9a:	1dfb      	adds	r3, r7, #7
 8000a9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b25b      	sxtb	r3, r3
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff ff57 	bl	8000958 <__NVIC_EnableIRQ>
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	b002      	add	sp, #8
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b084      	sub	sp, #16
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aba:	210f      	movs	r1, #15
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2221      	movs	r2, #33	@ 0x21
 8000ac6:	5c9b      	ldrb	r3, [r3, r2]
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b02      	cmp	r3, #2
 8000acc:	d006      	beq.n	8000adc <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	e028      	b.n	8000b2e <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	210e      	movs	r1, #14
 8000ae8:	438a      	bics	r2, r1
 8000aea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2101      	movs	r1, #1
 8000af8:	438a      	bics	r2, r1
 8000afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b04:	2101      	movs	r1, #1
 8000b06:	4091      	lsls	r1, r2
 8000b08:	000a      	movs	r2, r1
 8000b0a:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2221      	movs	r2, #33	@ 0x21
 8000b10:	2101      	movs	r1, #1
 8000b12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2220      	movs	r2, #32
 8000b18:	2100      	movs	r1, #0
 8000b1a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d004      	beq.n	8000b2e <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	0010      	movs	r0, r2
 8000b2c:	4798      	blx	r3
    }
  }
  return status;
 8000b2e:	230f      	movs	r3, #15
 8000b30:	18fb      	adds	r3, r7, r3
 8000b32:	781b      	ldrb	r3, [r3, #0]
}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b004      	add	sp, #16
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b4a:	e14f      	b.n	8000dec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2101      	movs	r1, #1
 8000b52:	697a      	ldr	r2, [r7, #20]
 8000b54:	4091      	lsls	r1, r2
 8000b56:	000a      	movs	r2, r1
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d100      	bne.n	8000b64 <HAL_GPIO_Init+0x28>
 8000b62:	e140      	b.n	8000de6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2203      	movs	r2, #3
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d005      	beq.n	8000b7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2203      	movs	r2, #3
 8000b76:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b78:	2b02      	cmp	r3, #2
 8000b7a:	d130      	bne.n	8000bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	2203      	movs	r2, #3
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	0013      	movs	r3, r2
 8000b8c:	43da      	mvns	r2, r3
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68da      	ldr	r2, [r3, #12]
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	0013      	movs	r3, r2
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
 8000bb8:	0013      	movs	r3, r2
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	693b      	ldr	r3, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	091b      	lsrs	r3, r3, #4
 8000bc8:	2201      	movs	r2, #1
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2203      	movs	r2, #3
 8000be4:	4013      	ands	r3, r2
 8000be6:	2b03      	cmp	r3, #3
 8000be8:	d017      	beq.n	8000c1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	409a      	lsls	r2, r3
 8000bf8:	0013      	movs	r3, r2
 8000bfa:	43da      	mvns	r2, r3
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	689a      	ldr	r2, [r3, #8]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	409a      	lsls	r2, r3
 8000c0c:	0013      	movs	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2203      	movs	r2, #3
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d123      	bne.n	8000c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	08da      	lsrs	r2, r3, #3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	3208      	adds	r2, #8
 8000c2e:	0092      	lsls	r2, r2, #2
 8000c30:	58d3      	ldr	r3, [r2, r3]
 8000c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	2207      	movs	r2, #7
 8000c38:	4013      	ands	r3, r2
 8000c3a:	009b      	lsls	r3, r3, #2
 8000c3c:	220f      	movs	r2, #15
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	43da      	mvns	r2, r3
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	691a      	ldr	r2, [r3, #16]
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	2107      	movs	r1, #7
 8000c52:	400b      	ands	r3, r1
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	08da      	lsrs	r2, r3, #3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3208      	adds	r2, #8
 8000c68:	0092      	lsls	r2, r2, #2
 8000c6a:	6939      	ldr	r1, [r7, #16]
 8000c6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2203      	movs	r2, #3
 8000c7a:	409a      	lsls	r2, r3
 8000c7c:	0013      	movs	r3, r2
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2203      	movs	r2, #3
 8000c8c:	401a      	ands	r2, r3
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	409a      	lsls	r2, r3
 8000c94:	0013      	movs	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	23c0      	movs	r3, #192	@ 0xc0
 8000ca8:	029b      	lsls	r3, r3, #10
 8000caa:	4013      	ands	r3, r2
 8000cac:	d100      	bne.n	8000cb0 <HAL_GPIO_Init+0x174>
 8000cae:	e09a      	b.n	8000de6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb0:	4b54      	ldr	r3, [pc, #336]	@ (8000e04 <HAL_GPIO_Init+0x2c8>)
 8000cb2:	699a      	ldr	r2, [r3, #24]
 8000cb4:	4b53      	ldr	r3, [pc, #332]	@ (8000e04 <HAL_GPIO_Init+0x2c8>)
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	619a      	str	r2, [r3, #24]
 8000cbc:	4b51      	ldr	r3, [pc, #324]	@ (8000e04 <HAL_GPIO_Init+0x2c8>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cc8:	4a4f      	ldr	r2, [pc, #316]	@ (8000e08 <HAL_GPIO_Init+0x2cc>)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3302      	adds	r3, #2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	589b      	ldr	r3, [r3, r2]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	2203      	movs	r2, #3
 8000cda:	4013      	ands	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	220f      	movs	r2, #15
 8000ce0:	409a      	lsls	r2, r3
 8000ce2:	0013      	movs	r3, r2
 8000ce4:	43da      	mvns	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	2390      	movs	r3, #144	@ 0x90
 8000cf0:	05db      	lsls	r3, r3, #23
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d013      	beq.n	8000d1e <HAL_GPIO_Init+0x1e2>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	4a44      	ldr	r2, [pc, #272]	@ (8000e0c <HAL_GPIO_Init+0x2d0>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d00d      	beq.n	8000d1a <HAL_GPIO_Init+0x1de>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4a43      	ldr	r2, [pc, #268]	@ (8000e10 <HAL_GPIO_Init+0x2d4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d007      	beq.n	8000d16 <HAL_GPIO_Init+0x1da>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4a42      	ldr	r2, [pc, #264]	@ (8000e14 <HAL_GPIO_Init+0x2d8>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d101      	bne.n	8000d12 <HAL_GPIO_Init+0x1d6>
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e006      	b.n	8000d20 <HAL_GPIO_Init+0x1e4>
 8000d12:	2305      	movs	r3, #5
 8000d14:	e004      	b.n	8000d20 <HAL_GPIO_Init+0x1e4>
 8000d16:	2302      	movs	r3, #2
 8000d18:	e002      	b.n	8000d20 <HAL_GPIO_Init+0x1e4>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e000      	b.n	8000d20 <HAL_GPIO_Init+0x1e4>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	2103      	movs	r1, #3
 8000d24:	400a      	ands	r2, r1
 8000d26:	0092      	lsls	r2, r2, #2
 8000d28:	4093      	lsls	r3, r2
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d30:	4935      	ldr	r1, [pc, #212]	@ (8000e08 <HAL_GPIO_Init+0x2cc>)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	089b      	lsrs	r3, r3, #2
 8000d36:	3302      	adds	r3, #2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d3e:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <HAL_GPIO_Init+0x2dc>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	035b      	lsls	r3, r3, #13
 8000d56:	4013      	ands	r3, r2
 8000d58:	d003      	beq.n	8000d62 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d62:	4b2d      	ldr	r3, [pc, #180]	@ (8000e18 <HAL_GPIO_Init+0x2dc>)
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d68:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <HAL_GPIO_Init+0x2dc>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	43da      	mvns	r2, r3
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	2380      	movs	r3, #128	@ 0x80
 8000d7e:	039b      	lsls	r3, r3, #14
 8000d80:	4013      	ands	r3, r2
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d8c:	4b22      	ldr	r3, [pc, #136]	@ (8000e18 <HAL_GPIO_Init+0x2dc>)
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <HAL_GPIO_Init+0x2dc>)
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	4013      	ands	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	2380      	movs	r3, #128	@ 0x80
 8000da8:	029b      	lsls	r3, r3, #10
 8000daa:	4013      	ands	r3, r2
 8000dac:	d003      	beq.n	8000db6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000db6:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <HAL_GPIO_Init+0x2dc>)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_GPIO_Init+0x2dc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	43da      	mvns	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685a      	ldr	r2, [r3, #4]
 8000dd0:	2380      	movs	r3, #128	@ 0x80
 8000dd2:	025b      	lsls	r3, r3, #9
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	d003      	beq.n	8000de0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000de0:	4b0d      	ldr	r3, [pc, #52]	@ (8000e18 <HAL_GPIO_Init+0x2dc>)
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	3301      	adds	r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	40da      	lsrs	r2, r3
 8000df4:	1e13      	subs	r3, r2, #0
 8000df6:	d000      	beq.n	8000dfa <HAL_GPIO_Init+0x2be>
 8000df8:	e6a8      	b.n	8000b4c <HAL_GPIO_Init+0x10>
  } 
}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	46c0      	nop			@ (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b006      	add	sp, #24
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010000 	.word	0x40010000
 8000e0c:	48000400 	.word	0x48000400
 8000e10:	48000800 	.word	0x48000800
 8000e14:	48000c00 	.word	0x48000c00
 8000e18:	40010400 	.word	0x40010400

08000e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	000a      	movs	r2, r1
 8000e26:	1cbb      	adds	r3, r7, #2
 8000e28:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	691b      	ldr	r3, [r3, #16]
 8000e2e:	1cba      	adds	r2, r7, #2
 8000e30:	8812      	ldrh	r2, [r2, #0]
 8000e32:	4013      	ands	r3, r2
 8000e34:	d004      	beq.n	8000e40 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000e36:	230f      	movs	r3, #15
 8000e38:	18fb      	adds	r3, r7, r3
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e003      	b.n	8000e48 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e40:	230f      	movs	r3, #15
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	781b      	ldrb	r3, [r3, #0]
  }
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b004      	add	sp, #16
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
 8000e5e:	0008      	movs	r0, r1
 8000e60:	0011      	movs	r1, r2
 8000e62:	1cbb      	adds	r3, r7, #2
 8000e64:	1c02      	adds	r2, r0, #0
 8000e66:	801a      	strh	r2, [r3, #0]
 8000e68:	1c7b      	adds	r3, r7, #1
 8000e6a:	1c0a      	adds	r2, r1, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e6e:	1c7b      	adds	r3, r7, #1
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d004      	beq.n	8000e80 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e76:	1cbb      	adds	r3, r7, #2
 8000e78:	881a      	ldrh	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e7e:	e003      	b.n	8000e88 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e80:	1cbb      	adds	r3, r7, #2
 8000e82:	881a      	ldrh	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e301      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_OscConfig+0x1e>
 8000eac:	e08d      	b.n	8000fca <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eae:	4bc3      	ldr	r3, [pc, #780]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	d00e      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eba:	4bc0      	ldr	r3, [pc, #768]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b08      	cmp	r3, #8
 8000ec4:	d116      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x64>
 8000ec6:	4bbd      	ldr	r3, [pc, #756]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	2380      	movs	r3, #128	@ 0x80
 8000ecc:	025b      	lsls	r3, r3, #9
 8000ece:	401a      	ands	r2, r3
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	025b      	lsls	r3, r3, #9
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10d      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	4bb8      	ldr	r3, [pc, #736]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2380      	movs	r3, #128	@ 0x80
 8000ede:	029b      	lsls	r3, r3, #10
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d100      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x56>
 8000ee4:	e070      	b.n	8000fc8 <HAL_RCC_OscConfig+0x138>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d000      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x60>
 8000eee:	e06b      	b.n	8000fc8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	e2d8      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d107      	bne.n	8000f0c <HAL_RCC_OscConfig+0x7c>
 8000efc:	4baf      	ldr	r3, [pc, #700]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4bae      	ldr	r3, [pc, #696]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f02:	2180      	movs	r1, #128	@ 0x80
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	430a      	orrs	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e02f      	b.n	8000f6c <HAL_RCC_OscConfig+0xdc>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d10c      	bne.n	8000f2e <HAL_RCC_OscConfig+0x9e>
 8000f14:	4ba9      	ldr	r3, [pc, #676]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4ba8      	ldr	r3, [pc, #672]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	49a9      	ldr	r1, [pc, #676]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000f1c:	400a      	ands	r2, r1
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	4ba6      	ldr	r3, [pc, #664]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4ba5      	ldr	r3, [pc, #660]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f26:	49a7      	ldr	r1, [pc, #668]	@ (80011c4 <HAL_RCC_OscConfig+0x334>)
 8000f28:	400a      	ands	r2, r1
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	e01e      	b.n	8000f6c <HAL_RCC_OscConfig+0xdc>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	d10e      	bne.n	8000f54 <HAL_RCC_OscConfig+0xc4>
 8000f36:	4ba1      	ldr	r3, [pc, #644]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4ba0      	ldr	r3, [pc, #640]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f3c:	2180      	movs	r1, #128	@ 0x80
 8000f3e:	02c9      	lsls	r1, r1, #11
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	4b9d      	ldr	r3, [pc, #628]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b9c      	ldr	r3, [pc, #624]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	2180      	movs	r1, #128	@ 0x80
 8000f4c:	0249      	lsls	r1, r1, #9
 8000f4e:	430a      	orrs	r2, r1
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0xdc>
 8000f54:	4b99      	ldr	r3, [pc, #612]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b98      	ldr	r3, [pc, #608]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	4999      	ldr	r1, [pc, #612]	@ (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000f5c:	400a      	ands	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	4b96      	ldr	r3, [pc, #600]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b95      	ldr	r3, [pc, #596]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f66:	4997      	ldr	r1, [pc, #604]	@ (80011c4 <HAL_RCC_OscConfig+0x334>)
 8000f68:	400a      	ands	r2, r1
 8000f6a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d014      	beq.n	8000f9e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fcc2 	bl	80008fc <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7e:	f7ff fcbd 	bl	80008fc <HAL_GetTick>
 8000f82:	0002      	movs	r2, r0
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b64      	cmp	r3, #100	@ 0x64
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e28a      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f90:	4b8a      	ldr	r3, [pc, #552]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	029b      	lsls	r3, r3, #10
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0xee>
 8000f9c:	e015      	b.n	8000fca <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9e:	f7ff fcad 	bl	80008fc <HAL_GetTick>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	e008      	b.n	8000fba <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fca8 	bl	80008fc <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	69bb      	ldr	r3, [r7, #24]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b64      	cmp	r3, #100	@ 0x64
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e275      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	4b80      	ldr	r3, [pc, #512]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	2380      	movs	r3, #128	@ 0x80
 8000fc0:	029b      	lsls	r3, r3, #10
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d1f0      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x118>
 8000fc6:	e000      	b.n	8000fca <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2202      	movs	r2, #2
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d100      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x146>
 8000fd4:	e069      	b.n	80010aa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd6:	4b79      	ldr	r3, [pc, #484]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	220c      	movs	r2, #12
 8000fdc:	4013      	ands	r3, r2
 8000fde:	d00b      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe0:	4b76      	ldr	r3, [pc, #472]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	220c      	movs	r2, #12
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	2b08      	cmp	r3, #8
 8000fea:	d11c      	bne.n	8001026 <HAL_RCC_OscConfig+0x196>
 8000fec:	4b73      	ldr	r3, [pc, #460]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	025b      	lsls	r3, r3, #9
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	d116      	bne.n	8001026 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff8:	4b70      	ldr	r3, [pc, #448]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	4013      	ands	r3, r2
 8001000:	d005      	beq.n	800100e <HAL_RCC_OscConfig+0x17e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d001      	beq.n	800100e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e24b      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100e:	4b6b      	ldr	r3, [pc, #428]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	22f8      	movs	r2, #248	@ 0xf8
 8001014:	4393      	bics	r3, r2
 8001016:	0019      	movs	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	00da      	lsls	r2, r3, #3
 800101e:	4b67      	ldr	r3, [pc, #412]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001024:	e041      	b.n	80010aa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d024      	beq.n	8001078 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800102e:	4b63      	ldr	r3, [pc, #396]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	4b62      	ldr	r3, [pc, #392]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001034:	2101      	movs	r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fc5f 	bl	80008fc <HAL_GetTick>
 800103e:	0003      	movs	r3, r0
 8001040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001042:	e008      	b.n	8001056 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001044:	f7ff fc5a 	bl	80008fc <HAL_GetTick>
 8001048:	0002      	movs	r2, r0
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d901      	bls.n	8001056 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001052:	2303      	movs	r3, #3
 8001054:	e227      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001056:	4b59      	ldr	r3, [pc, #356]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2202      	movs	r2, #2
 800105c:	4013      	ands	r3, r2
 800105e:	d0f1      	beq.n	8001044 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001060:	4b56      	ldr	r3, [pc, #344]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	22f8      	movs	r2, #248	@ 0xf8
 8001066:	4393      	bics	r3, r2
 8001068:	0019      	movs	r1, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	00da      	lsls	r2, r3, #3
 8001070:	4b52      	ldr	r3, [pc, #328]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001072:	430a      	orrs	r2, r1
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e018      	b.n	80010aa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001078:	4b50      	ldr	r3, [pc, #320]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b4f      	ldr	r3, [pc, #316]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 800107e:	2101      	movs	r1, #1
 8001080:	438a      	bics	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fc3a 	bl	80008fc <HAL_GetTick>
 8001088:	0003      	movs	r3, r0
 800108a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fc35 	bl	80008fc <HAL_GetTick>
 8001092:	0002      	movs	r2, r0
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e202      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a0:	4b46      	ldr	r3, [pc, #280]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2202      	movs	r2, #2
 80010a6:	4013      	ands	r3, r2
 80010a8:	d1f1      	bne.n	800108e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2208      	movs	r2, #8
 80010b0:	4013      	ands	r3, r2
 80010b2:	d036      	beq.n	8001122 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69db      	ldr	r3, [r3, #28]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d019      	beq.n	80010f0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010bc:	4b3f      	ldr	r3, [pc, #252]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 80010be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010c0:	4b3e      	ldr	r3, [pc, #248]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	430a      	orrs	r2, r1
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c8:	f7ff fc18 	bl	80008fc <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010d0:	e008      	b.n	80010e4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010d2:	f7ff fc13 	bl	80008fc <HAL_GetTick>
 80010d6:	0002      	movs	r2, r0
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e1e0      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e4:	4b35      	ldr	r3, [pc, #212]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 80010e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e8:	2202      	movs	r2, #2
 80010ea:	4013      	ands	r3, r2
 80010ec:	d0f1      	beq.n	80010d2 <HAL_RCC_OscConfig+0x242>
 80010ee:	e018      	b.n	8001122 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f0:	4b32      	ldr	r3, [pc, #200]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 80010f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010f4:	4b31      	ldr	r3, [pc, #196]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 80010f6:	2101      	movs	r1, #1
 80010f8:	438a      	bics	r2, r1
 80010fa:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fc:	f7ff fbfe 	bl	80008fc <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001106:	f7ff fbf9 	bl	80008fc <HAL_GetTick>
 800110a:	0002      	movs	r2, r0
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e1c6      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001118:	4b28      	ldr	r3, [pc, #160]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 800111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111c:	2202      	movs	r2, #2
 800111e:	4013      	ands	r3, r2
 8001120:	d1f1      	bne.n	8001106 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2204      	movs	r2, #4
 8001128:	4013      	ands	r3, r2
 800112a:	d100      	bne.n	800112e <HAL_RCC_OscConfig+0x29e>
 800112c:	e0b4      	b.n	8001298 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800112e:	201f      	movs	r0, #31
 8001130:	183b      	adds	r3, r7, r0
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001136:	4b21      	ldr	r3, [pc, #132]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001138:	69da      	ldr	r2, [r3, #28]
 800113a:	2380      	movs	r3, #128	@ 0x80
 800113c:	055b      	lsls	r3, r3, #21
 800113e:	4013      	ands	r3, r2
 8001140:	d110      	bne.n	8001164 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001144:	69da      	ldr	r2, [r3, #28]
 8001146:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001148:	2180      	movs	r1, #128	@ 0x80
 800114a:	0549      	lsls	r1, r1, #21
 800114c:	430a      	orrs	r2, r1
 800114e:	61da      	str	r2, [r3, #28]
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 8001152:	69da      	ldr	r2, [r3, #28]
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	055b      	lsls	r3, r3, #21
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800115e:	183b      	adds	r3, r7, r0
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	4b18      	ldr	r3, [pc, #96]	@ (80011c8 <HAL_RCC_OscConfig+0x338>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	4013      	ands	r3, r2
 800116e:	d11a      	bne.n	80011a6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001170:	4b15      	ldr	r3, [pc, #84]	@ (80011c8 <HAL_RCC_OscConfig+0x338>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_RCC_OscConfig+0x338>)
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	0049      	lsls	r1, r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117e:	f7ff fbbd 	bl	80008fc <HAL_GetTick>
 8001182:	0003      	movs	r3, r0
 8001184:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001188:	f7ff fbb8 	bl	80008fc <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b64      	cmp	r3, #100	@ 0x64
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e185      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119a:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_RCC_OscConfig+0x338>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2380      	movs	r3, #128	@ 0x80
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4013      	ands	r3, r2
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d10e      	bne.n	80011cc <HAL_RCC_OscConfig+0x33c>
 80011ae:	4b03      	ldr	r3, [pc, #12]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 80011b0:	6a1a      	ldr	r2, [r3, #32]
 80011b2:	4b02      	ldr	r3, [pc, #8]	@ (80011bc <HAL_RCC_OscConfig+0x32c>)
 80011b4:	2101      	movs	r1, #1
 80011b6:	430a      	orrs	r2, r1
 80011b8:	621a      	str	r2, [r3, #32]
 80011ba:	e035      	b.n	8001228 <HAL_RCC_OscConfig+0x398>
 80011bc:	40021000 	.word	0x40021000
 80011c0:	fffeffff 	.word	0xfffeffff
 80011c4:	fffbffff 	.word	0xfffbffff
 80011c8:	40007000 	.word	0x40007000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x35e>
 80011d4:	4bb6      	ldr	r3, [pc, #728]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	4bb5      	ldr	r3, [pc, #724]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80011da:	2101      	movs	r1, #1
 80011dc:	438a      	bics	r2, r1
 80011de:	621a      	str	r2, [r3, #32]
 80011e0:	4bb3      	ldr	r3, [pc, #716]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	4bb2      	ldr	r3, [pc, #712]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80011e6:	2104      	movs	r1, #4
 80011e8:	438a      	bics	r2, r1
 80011ea:	621a      	str	r2, [r3, #32]
 80011ec:	e01c      	b.n	8001228 <HAL_RCC_OscConfig+0x398>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x380>
 80011f6:	4bae      	ldr	r3, [pc, #696]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80011f8:	6a1a      	ldr	r2, [r3, #32]
 80011fa:	4bad      	ldr	r3, [pc, #692]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80011fc:	2104      	movs	r1, #4
 80011fe:	430a      	orrs	r2, r1
 8001200:	621a      	str	r2, [r3, #32]
 8001202:	4bab      	ldr	r3, [pc, #684]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001204:	6a1a      	ldr	r2, [r3, #32]
 8001206:	4baa      	ldr	r3, [pc, #680]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001208:	2101      	movs	r1, #1
 800120a:	430a      	orrs	r2, r1
 800120c:	621a      	str	r2, [r3, #32]
 800120e:	e00b      	b.n	8001228 <HAL_RCC_OscConfig+0x398>
 8001210:	4ba7      	ldr	r3, [pc, #668]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	4ba6      	ldr	r3, [pc, #664]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001216:	2101      	movs	r1, #1
 8001218:	438a      	bics	r2, r1
 800121a:	621a      	str	r2, [r3, #32]
 800121c:	4ba4      	ldr	r3, [pc, #656]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800121e:	6a1a      	ldr	r2, [r3, #32]
 8001220:	4ba3      	ldr	r3, [pc, #652]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001222:	2104      	movs	r1, #4
 8001224:	438a      	bics	r2, r1
 8001226:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d014      	beq.n	800125a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001230:	f7ff fb64 	bl	80008fc <HAL_GetTick>
 8001234:	0003      	movs	r3, r0
 8001236:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001238:	e009      	b.n	800124e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff fb5f 	bl	80008fc <HAL_GetTick>
 800123e:	0002      	movs	r2, r0
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	4a9b      	ldr	r2, [pc, #620]	@ (80014b4 <HAL_RCC_OscConfig+0x624>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d901      	bls.n	800124e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e12b      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800124e:	4b98      	ldr	r3, [pc, #608]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	2202      	movs	r2, #2
 8001254:	4013      	ands	r3, r2
 8001256:	d0f0      	beq.n	800123a <HAL_RCC_OscConfig+0x3aa>
 8001258:	e013      	b.n	8001282 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800125a:	f7ff fb4f 	bl	80008fc <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001262:	e009      	b.n	8001278 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001264:	f7ff fb4a 	bl	80008fc <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	4a91      	ldr	r2, [pc, #580]	@ (80014b4 <HAL_RCC_OscConfig+0x624>)
 8001270:	4293      	cmp	r3, r2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e116      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001278:	4b8d      	ldr	r3, [pc, #564]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	2202      	movs	r2, #2
 800127e:	4013      	ands	r3, r2
 8001280:	d1f0      	bne.n	8001264 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001282:	231f      	movs	r3, #31
 8001284:	18fb      	adds	r3, r7, r3
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d105      	bne.n	8001298 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800128c:	4b88      	ldr	r3, [pc, #544]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800128e:	69da      	ldr	r2, [r3, #28]
 8001290:	4b87      	ldr	r3, [pc, #540]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001292:	4989      	ldr	r1, [pc, #548]	@ (80014b8 <HAL_RCC_OscConfig+0x628>)
 8001294:	400a      	ands	r2, r1
 8001296:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2210      	movs	r2, #16
 800129e:	4013      	ands	r3, r2
 80012a0:	d063      	beq.n	800136a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d12a      	bne.n	8001300 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012aa:	4b81      	ldr	r3, [pc, #516]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80012ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ae:	4b80      	ldr	r3, [pc, #512]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80012b0:	2104      	movs	r1, #4
 80012b2:	430a      	orrs	r2, r1
 80012b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80012b6:	4b7e      	ldr	r3, [pc, #504]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80012b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ba:	4b7d      	ldr	r3, [pc, #500]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80012bc:	2101      	movs	r1, #1
 80012be:	430a      	orrs	r2, r1
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c2:	f7ff fb1b 	bl	80008fc <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012cc:	f7ff fb16 	bl	80008fc <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e0e3      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012de:	4b74      	ldr	r3, [pc, #464]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80012e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012e2:	2202      	movs	r2, #2
 80012e4:	4013      	ands	r3, r2
 80012e6:	d0f1      	beq.n	80012cc <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012e8:	4b71      	ldr	r3, [pc, #452]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80012ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012ec:	22f8      	movs	r2, #248	@ 0xf8
 80012ee:	4393      	bics	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	00da      	lsls	r2, r3, #3
 80012f8:	4b6d      	ldr	r3, [pc, #436]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80012fa:	430a      	orrs	r2, r1
 80012fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80012fe:	e034      	b.n	800136a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	695b      	ldr	r3, [r3, #20]
 8001304:	3305      	adds	r3, #5
 8001306:	d111      	bne.n	800132c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001308:	4b69      	ldr	r3, [pc, #420]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800130a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800130c:	4b68      	ldr	r3, [pc, #416]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800130e:	2104      	movs	r1, #4
 8001310:	438a      	bics	r2, r1
 8001312:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001314:	4b66      	ldr	r3, [pc, #408]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001318:	22f8      	movs	r2, #248	@ 0xf8
 800131a:	4393      	bics	r3, r2
 800131c:	0019      	movs	r1, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	00da      	lsls	r2, r3, #3
 8001324:	4b62      	ldr	r3, [pc, #392]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001326:	430a      	orrs	r2, r1
 8001328:	635a      	str	r2, [r3, #52]	@ 0x34
 800132a:	e01e      	b.n	800136a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800132c:	4b60      	ldr	r3, [pc, #384]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800132e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001330:	4b5f      	ldr	r3, [pc, #380]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001332:	2104      	movs	r1, #4
 8001334:	430a      	orrs	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001338:	4b5d      	ldr	r3, [pc, #372]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800133a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800133c:	4b5c      	ldr	r3, [pc, #368]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001344:	f7ff fada 	bl	80008fc <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800134e:	f7ff fad5 	bl	80008fc <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e0a2      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001360:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d1f1      	bne.n	800134e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d100      	bne.n	8001374 <HAL_RCC_OscConfig+0x4e4>
 8001372:	e097      	b.n	80014a4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001374:	4b4e      	ldr	r3, [pc, #312]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	220c      	movs	r2, #12
 800137a:	4013      	ands	r3, r2
 800137c:	2b08      	cmp	r3, #8
 800137e:	d100      	bne.n	8001382 <HAL_RCC_OscConfig+0x4f2>
 8001380:	e06b      	b.n	800145a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a1b      	ldr	r3, [r3, #32]
 8001386:	2b02      	cmp	r3, #2
 8001388:	d14c      	bne.n	8001424 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800138a:	4b49      	ldr	r3, [pc, #292]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b48      	ldr	r3, [pc, #288]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001390:	494a      	ldr	r1, [pc, #296]	@ (80014bc <HAL_RCC_OscConfig+0x62c>)
 8001392:	400a      	ands	r2, r1
 8001394:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001396:	f7ff fab1 	bl	80008fc <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff faac 	bl	80008fc <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e079      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b2:	4b3f      	ldr	r3, [pc, #252]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	2380      	movs	r3, #128	@ 0x80
 80013b8:	049b      	lsls	r3, r3, #18
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013be:	4b3c      	ldr	r3, [pc, #240]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c2:	220f      	movs	r2, #15
 80013c4:	4393      	bics	r3, r2
 80013c6:	0019      	movs	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013cc:	4b38      	ldr	r3, [pc, #224]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80013ce:	430a      	orrs	r2, r1
 80013d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013d2:	4b37      	ldr	r3, [pc, #220]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a3a      	ldr	r2, [pc, #232]	@ (80014c0 <HAL_RCC_OscConfig+0x630>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	431a      	orrs	r2, r3
 80013e6:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80013e8:	430a      	orrs	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b2f      	ldr	r3, [pc, #188]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 80013f2:	2180      	movs	r1, #128	@ 0x80
 80013f4:	0449      	lsls	r1, r1, #17
 80013f6:	430a      	orrs	r2, r1
 80013f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff fa7f 	bl	80008fc <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff fa7a 	bl	80008fc <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e047      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001416:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	049b      	lsls	r3, r3, #18
 800141e:	4013      	ands	r3, r2
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x574>
 8001422:	e03f      	b.n	80014a4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001424:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	4b21      	ldr	r3, [pc, #132]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800142a:	4924      	ldr	r1, [pc, #144]	@ (80014bc <HAL_RCC_OscConfig+0x62c>)
 800142c:	400a      	ands	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001430:	f7ff fa64 	bl	80008fc <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143a:	f7ff fa5f 	bl	80008fc <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e02c      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	@ 0x80
 8001452:	049b      	lsls	r3, r3, #18
 8001454:	4013      	ands	r3, r2
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x5aa>
 8001458:	e024      	b.n	80014a4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e01f      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_RCC_OscConfig+0x620>)
 800146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001470:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	2380      	movs	r3, #128	@ 0x80
 8001476:	025b      	lsls	r3, r3, #9
 8001478:	401a      	ands	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	429a      	cmp	r2, r3
 8001480:	d10e      	bne.n	80014a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	220f      	movs	r2, #15
 8001486:	401a      	ands	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800148c:	429a      	cmp	r2, r3
 800148e:	d107      	bne.n	80014a0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	23f0      	movs	r3, #240	@ 0xf0
 8001494:	039b      	lsls	r3, r3, #14
 8001496:	401a      	ands	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800149c:	429a      	cmp	r2, r3
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	0018      	movs	r0, r3
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b008      	add	sp, #32
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	46c0      	nop			@ (mov r8, r8)
 80014b0:	40021000 	.word	0x40021000
 80014b4:	00001388 	.word	0x00001388
 80014b8:	efffffff 	.word	0xefffffff
 80014bc:	feffffff 	.word	0xfeffffff
 80014c0:	ffc2ffff 	.word	0xffc2ffff

080014c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e0b3      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014d8:	4b5b      	ldr	r3, [pc, #364]	@ (8001648 <HAL_RCC_ClockConfig+0x184>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d911      	bls.n	800150a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014e6:	4b58      	ldr	r3, [pc, #352]	@ (8001648 <HAL_RCC_ClockConfig+0x184>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4393      	bics	r3, r2
 80014ee:	0019      	movs	r1, r3
 80014f0:	4b55      	ldr	r3, [pc, #340]	@ (8001648 <HAL_RCC_ClockConfig+0x184>)
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f8:	4b53      	ldr	r3, [pc, #332]	@ (8001648 <HAL_RCC_ClockConfig+0x184>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2201      	movs	r2, #1
 80014fe:	4013      	ands	r3, r2
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d001      	beq.n	800150a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	e09a      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2202      	movs	r2, #2
 8001510:	4013      	ands	r3, r2
 8001512:	d015      	beq.n	8001540 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2204      	movs	r2, #4
 800151a:	4013      	ands	r3, r2
 800151c:	d006      	beq.n	800152c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800151e:	4b4b      	ldr	r3, [pc, #300]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4b4a      	ldr	r3, [pc, #296]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 8001524:	21e0      	movs	r1, #224	@ 0xe0
 8001526:	00c9      	lsls	r1, r1, #3
 8001528:	430a      	orrs	r2, r1
 800152a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800152c:	4b47      	ldr	r3, [pc, #284]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	22f0      	movs	r2, #240	@ 0xf0
 8001532:	4393      	bics	r3, r2
 8001534:	0019      	movs	r1, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	4b44      	ldr	r3, [pc, #272]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 800153c:	430a      	orrs	r2, r1
 800153e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2201      	movs	r2, #1
 8001546:	4013      	ands	r3, r2
 8001548:	d040      	beq.n	80015cc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d107      	bne.n	8001562 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	4b3e      	ldr	r3, [pc, #248]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	2380      	movs	r3, #128	@ 0x80
 8001558:	029b      	lsls	r3, r3, #10
 800155a:	4013      	ands	r3, r2
 800155c:	d114      	bne.n	8001588 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e06e      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156a:	4b38      	ldr	r3, [pc, #224]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	049b      	lsls	r3, r3, #18
 8001572:	4013      	ands	r3, r2
 8001574:	d108      	bne.n	8001588 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e062      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	4b34      	ldr	r3, [pc, #208]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e05b      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001588:	4b30      	ldr	r3, [pc, #192]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2203      	movs	r2, #3
 800158e:	4393      	bics	r3, r2
 8001590:	0019      	movs	r1, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4b2d      	ldr	r3, [pc, #180]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 8001598:	430a      	orrs	r2, r1
 800159a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800159c:	f7ff f9ae 	bl	80008fc <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a4:	e009      	b.n	80015ba <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a6:	f7ff f9a9 	bl	80008fc <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <HAL_RCC_ClockConfig+0x18c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e042      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ba:	4b24      	ldr	r3, [pc, #144]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	220c      	movs	r2, #12
 80015c0:	401a      	ands	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d1ec      	bne.n	80015a6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <HAL_RCC_ClockConfig+0x184>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d211      	bcs.n	80015fe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <HAL_RCC_ClockConfig+0x184>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2201      	movs	r2, #1
 80015e0:	4393      	bics	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <HAL_RCC_ClockConfig+0x184>)
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ec:	4b16      	ldr	r3, [pc, #88]	@ (8001648 <HAL_RCC_ClockConfig+0x184>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2201      	movs	r2, #1
 80015f2:	4013      	ands	r3, r2
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d001      	beq.n	80015fe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e020      	b.n	8001640 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2204      	movs	r2, #4
 8001604:	4013      	ands	r3, r2
 8001606:	d009      	beq.n	800161c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001608:	4b10      	ldr	r3, [pc, #64]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	4a11      	ldr	r2, [pc, #68]	@ (8001654 <HAL_RCC_ClockConfig+0x190>)
 800160e:	4013      	ands	r3, r2
 8001610:	0019      	movs	r1, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 8001618:	430a      	orrs	r2, r1
 800161a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800161c:	f000 f820 	bl	8001660 <HAL_RCC_GetSysClockFreq>
 8001620:	0001      	movs	r1, r0
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <HAL_RCC_ClockConfig+0x188>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	091b      	lsrs	r3, r3, #4
 8001628:	220f      	movs	r2, #15
 800162a:	4013      	ands	r3, r2
 800162c:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <HAL_RCC_ClockConfig+0x194>)
 800162e:	5cd3      	ldrb	r3, [r2, r3]
 8001630:	000a      	movs	r2, r1
 8001632:	40da      	lsrs	r2, r3
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <HAL_RCC_ClockConfig+0x198>)
 8001636:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001638:	2003      	movs	r0, #3
 800163a:	f7ff f863 	bl	8000704 <HAL_InitTick>
  
  return HAL_OK;
 800163e:	2300      	movs	r3, #0
}
 8001640:	0018      	movs	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	b004      	add	sp, #16
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40022000 	.word	0x40022000
 800164c:	40021000 	.word	0x40021000
 8001650:	00001388 	.word	0x00001388
 8001654:	fffff8ff 	.word	0xfffff8ff
 8001658:	08004118 	.word	0x08004118
 800165c:	20000000 	.word	0x20000000

08001660 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	2300      	movs	r3, #0
 8001674:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001676:	2300      	movs	r3, #0
 8001678:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800167a:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x9c>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	220c      	movs	r2, #12
 8001684:	4013      	ands	r3, r2
 8001686:	2b04      	cmp	r3, #4
 8001688:	d002      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x30>
 800168a:	2b08      	cmp	r3, #8
 800168c:	d003      	beq.n	8001696 <HAL_RCC_GetSysClockFreq+0x36>
 800168e:	e02c      	b.n	80016ea <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001692:	613b      	str	r3, [r7, #16]
      break;
 8001694:	e02c      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	0c9b      	lsrs	r3, r3, #18
 800169a:	220f      	movs	r2, #15
 800169c:	4013      	ands	r3, r2
 800169e:	4a19      	ldr	r2, [pc, #100]	@ (8001704 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016a4:	4b15      	ldr	r3, [pc, #84]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x9c>)
 80016a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a8:	220f      	movs	r2, #15
 80016aa:	4013      	ands	r3, r2
 80016ac:	4a16      	ldr	r2, [pc, #88]	@ (8001708 <HAL_RCC_GetSysClockFreq+0xa8>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	025b      	lsls	r3, r3, #9
 80016b8:	4013      	ands	r3, r2
 80016ba:	d009      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	4810      	ldr	r0, [pc, #64]	@ (8001700 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016c0:	f7fe fd22 	bl	8000108 <__udivsi3>
 80016c4:	0003      	movs	r3, r0
 80016c6:	001a      	movs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4353      	muls	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]
 80016ce:	e009      	b.n	80016e4 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	000a      	movs	r2, r1
 80016d4:	0152      	lsls	r2, r2, #5
 80016d6:	1a52      	subs	r2, r2, r1
 80016d8:	0193      	lsls	r3, r2, #6
 80016da:	1a9b      	subs	r3, r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	185b      	adds	r3, r3, r1
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	613b      	str	r3, [r7, #16]
      break;
 80016e8:	e002      	b.n	80016f0 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016ec:	613b      	str	r3, [r7, #16]
      break;
 80016ee:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016f0:	693b      	ldr	r3, [r7, #16]
}
 80016f2:	0018      	movs	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b006      	add	sp, #24
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	46c0      	nop			@ (mov r8, r8)
 80016fc:	40021000 	.word	0x40021000
 8001700:	007a1200 	.word	0x007a1200
 8001704:	08004130 	.word	0x08004130
 8001708:	08004140 	.word	0x08004140

0800170c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001710:	4b02      	ldr	r3, [pc, #8]	@ (800171c <HAL_RCC_GetHCLKFreq+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	20000000 	.word	0x20000000

08001720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001724:	f7ff fff2 	bl	800170c <HAL_RCC_GetHCLKFreq>
 8001728:	0001      	movs	r1, r0
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_RCC_GetPCLK1Freq+0x24>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	0a1b      	lsrs	r3, r3, #8
 8001730:	2207      	movs	r2, #7
 8001732:	4013      	ands	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001736:	5cd3      	ldrb	r3, [r2, r3]
 8001738:	40d9      	lsrs	r1, r3
 800173a:	000b      	movs	r3, r1
}    
 800173c:	0018      	movs	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	40021000 	.word	0x40021000
 8001748:	08004128 	.word	0x08004128

0800174c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <HAL_RCC_GetClockConfig+0x4c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	401a      	ands	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <HAL_RCC_GetClockConfig+0x4c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	22f0      	movs	r2, #240	@ 0xf0
 800176e:	401a      	ands	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <HAL_RCC_GetClockConfig+0x4c>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	23e0      	movs	r3, #224	@ 0xe0
 800177a:	00db      	lsls	r3, r3, #3
 800177c:	401a      	ands	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_RCC_GetClockConfig+0x50>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2201      	movs	r2, #1
 8001788:	401a      	ands	r2, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	601a      	str	r2, [r3, #0]
}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	46bd      	mov	sp, r7
 8001792:	b002      	add	sp, #8
 8001794:	bd80      	pop	{r7, pc}
 8001796:	46c0      	nop			@ (mov r8, r8)
 8001798:	40021000 	.word	0x40021000
 800179c:	40022000 	.word	0x40022000

080017a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e0a8      	b.n	8001904 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	2382      	movs	r3, #130	@ 0x82
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d009      	beq.n	80017da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
 80017cc:	e005      	b.n	80017da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	225d      	movs	r2, #93	@ 0x5d
 80017e4:	5c9b      	ldrb	r3, [r3, r2]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	225c      	movs	r2, #92	@ 0x5c
 80017f0:	2100      	movs	r1, #0
 80017f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7fe ff0a 	bl	8000610 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	225d      	movs	r2, #93	@ 0x5d
 8001800:	2102      	movs	r1, #2
 8001802:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2140      	movs	r1, #64	@ 0x40
 8001810:	438a      	bics	r2, r1
 8001812:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	23e0      	movs	r3, #224	@ 0xe0
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	429a      	cmp	r2, r3
 800181e:	d902      	bls.n	8001826 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e002      	b.n	800182c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001826:	2380      	movs	r3, #128	@ 0x80
 8001828:	015b      	lsls	r3, r3, #5
 800182a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	23f0      	movs	r3, #240	@ 0xf0
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	429a      	cmp	r2, r3
 8001836:	d008      	beq.n	800184a <HAL_SPI_Init+0xaa>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	23e0      	movs	r3, #224	@ 0xe0
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	429a      	cmp	r2, r3
 8001842:	d002      	beq.n	800184a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	2382      	movs	r3, #130	@ 0x82
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6899      	ldr	r1, [r3, #8]
 8001858:	2384      	movs	r3, #132	@ 0x84
 800185a:	021b      	lsls	r3, r3, #8
 800185c:	400b      	ands	r3, r1
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2102      	movs	r1, #2
 8001866:	400b      	ands	r3, r1
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2101      	movs	r1, #1
 8001870:	400b      	ands	r3, r1
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6999      	ldr	r1, [r3, #24]
 8001878:	2380      	movs	r3, #128	@ 0x80
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	400b      	ands	r3, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2138      	movs	r1, #56	@ 0x38
 8001886:	400b      	ands	r3, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	2180      	movs	r1, #128	@ 0x80
 8001890:	400b      	ands	r3, r1
 8001892:	431a      	orrs	r2, r3
 8001894:	0011      	movs	r1, r2
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	019b      	lsls	r3, r3, #6
 800189e:	401a      	ands	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	2204      	movs	r2, #4
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b6:	2110      	movs	r1, #16
 80018b8:	400b      	ands	r3, r1
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c0:	2108      	movs	r1, #8
 80018c2:	400b      	ands	r3, r1
 80018c4:	431a      	orrs	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68d9      	ldr	r1, [r3, #12]
 80018ca:	23f0      	movs	r3, #240	@ 0xf0
 80018cc:	011b      	lsls	r3, r3, #4
 80018ce:	400b      	ands	r3, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	0011      	movs	r1, r2
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	2380      	movs	r3, #128	@ 0x80
 80018d8:	015b      	lsls	r3, r3, #5
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4907      	ldr	r1, [pc, #28]	@ (800190c <HAL_SPI_Init+0x16c>)
 80018f0:	400a      	ands	r2, r1
 80018f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	225d      	movs	r2, #93	@ 0x5d
 80018fe:	2101      	movs	r1, #1
 8001900:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	0018      	movs	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	b004      	add	sp, #16
 800190a:	bd80      	pop	{r7, pc}
 800190c:	fffff7ff 	.word	0xfffff7ff

08001910 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	1dbb      	adds	r3, r7, #6
 800191e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001920:	231f      	movs	r3, #31
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	225c      	movs	r2, #92	@ 0x5c
 800192c:	5c9b      	ldrb	r3, [r3, r2]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <HAL_SPI_Transmit+0x26>
 8001932:	2302      	movs	r3, #2
 8001934:	e147      	b.n	8001bc6 <HAL_SPI_Transmit+0x2b6>
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	225c      	movs	r2, #92	@ 0x5c
 800193a:	2101      	movs	r1, #1
 800193c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800193e:	f7fe ffdd 	bl	80008fc <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001946:	2316      	movs	r3, #22
 8001948:	18fb      	adds	r3, r7, r3
 800194a:	1dba      	adds	r2, r7, #6
 800194c:	8812      	ldrh	r2, [r2, #0]
 800194e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	225d      	movs	r2, #93	@ 0x5d
 8001954:	5c9b      	ldrb	r3, [r3, r2]
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d004      	beq.n	8001966 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800195c:	231f      	movs	r3, #31
 800195e:	18fb      	adds	r3, r7, r3
 8001960:	2202      	movs	r2, #2
 8001962:	701a      	strb	r2, [r3, #0]
    goto error;
 8001964:	e128      	b.n	8001bb8 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_SPI_Transmit+0x64>
 800196c:	1dbb      	adds	r3, r7, #6
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d104      	bne.n	800197e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001974:	231f      	movs	r3, #31
 8001976:	18fb      	adds	r3, r7, r3
 8001978:	2201      	movs	r2, #1
 800197a:	701a      	strb	r2, [r3, #0]
    goto error;
 800197c:	e11c      	b.n	8001bb8 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	225d      	movs	r2, #93	@ 0x5d
 8001982:	2103      	movs	r1, #3
 8001984:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	1dba      	adds	r2, r7, #6
 8001996:	8812      	ldrh	r2, [r2, #0]
 8001998:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	1dba      	adds	r2, r7, #6
 800199e:	8812      	ldrh	r2, [r2, #0]
 80019a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2244      	movs	r2, #68	@ 0x44
 80019ac:	2100      	movs	r1, #0
 80019ae:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2246      	movs	r2, #70	@ 0x46
 80019b4:	2100      	movs	r1, #0
 80019b6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2200      	movs	r2, #0
 80019bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	021b      	lsls	r3, r3, #8
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d110      	bne.n	80019f2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2140      	movs	r1, #64	@ 0x40
 80019dc:	438a      	bics	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2180      	movs	r1, #128	@ 0x80
 80019ec:	01c9      	lsls	r1, r1, #7
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2240      	movs	r2, #64	@ 0x40
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b40      	cmp	r3, #64	@ 0x40
 80019fe:	d007      	beq.n	8001a10 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2140      	movs	r1, #64	@ 0x40
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	23e0      	movs	r3, #224	@ 0xe0
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d952      	bls.n	8001ac2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <HAL_SPI_Transmit+0x11e>
 8001a24:	2316      	movs	r3, #22
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	881b      	ldrh	r3, [r3, #0]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d143      	bne.n	8001ab6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a32:	881a      	ldrh	r2, [r3, #0]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a3e:	1c9a      	adds	r2, r3, #2
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a52:	e030      	b.n	8001ab6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d112      	bne.n	8001a88 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a72:	1c9a      	adds	r2, r3, #2
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001a86:	e016      	b.n	8001ab6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a88:	f7fe ff38 	bl	80008fc <HAL_GetTick>
 8001a8c:	0002      	movs	r2, r0
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d802      	bhi.n	8001a9e <HAL_SPI_Transmit+0x18e>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	d102      	bne.n	8001aa4 <HAL_SPI_Transmit+0x194>
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d108      	bne.n	8001ab6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001aa4:	231f      	movs	r3, #31
 8001aa6:	18fb      	adds	r3, r7, r3
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	225d      	movs	r2, #93	@ 0x5d
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	5499      	strb	r1, [r3, r2]
          goto error;
 8001ab4:	e080      	b.n	8001bb8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1c9      	bne.n	8001a54 <HAL_SPI_Transmit+0x144>
 8001ac0:	e053      	b.n	8001b6a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <HAL_SPI_Transmit+0x1c4>
 8001aca:	2316      	movs	r3, #22
 8001acc:	18fb      	adds	r3, r7, r3
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d145      	bne.n	8001b60 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	330c      	adds	r3, #12
 8001ade:	7812      	ldrb	r2, [r2, #0]
 8001ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ae6:	1c5a      	adds	r2, r3, #1
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3b01      	subs	r3, #1
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001afa:	e031      	b.n	8001b60 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2202      	movs	r2, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d113      	bne.n	8001b32 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	330c      	adds	r3, #12
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001b30:	e016      	b.n	8001b60 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001b32:	f7fe fee3 	bl	80008fc <HAL_GetTick>
 8001b36:	0002      	movs	r2, r0
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d802      	bhi.n	8001b48 <HAL_SPI_Transmit+0x238>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	3301      	adds	r3, #1
 8001b46:	d102      	bne.n	8001b4e <HAL_SPI_Transmit+0x23e>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001b4e:	231f      	movs	r3, #31
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	2203      	movs	r2, #3
 8001b54:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	225d      	movs	r2, #93	@ 0x5d
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	5499      	strb	r1, [r3, r2]
          goto error;
 8001b5e:	e02b      	b.n	8001bb8 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1c8      	bne.n	8001afc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	6839      	ldr	r1, [r7, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 fa65 	bl	8002040 <SPI_EndRxTxTransaction>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d002      	beq.n	8001b80 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	2220      	movs	r2, #32
 8001b7e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d10a      	bne.n	8001b9e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001ba6:	231f      	movs	r3, #31
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	2201      	movs	r2, #1
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	e003      	b.n	8001bb8 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	225d      	movs	r2, #93	@ 0x5d
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	225c      	movs	r2, #92	@ 0x5c
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001bc0:	231f      	movs	r3, #31
 8001bc2:	18fb      	adds	r3, r7, r3
 8001bc4:	781b      	ldrb	r3, [r3, #0]
}
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b008      	add	sp, #32
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2240      	movs	r2, #64	@ 0x40
 8001bec:	4013      	ands	r3, r2
 8001bee:	d10d      	bne.n	8001c0c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001bf6:	d009      	beq.n	8001c0c <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2240      	movs	r2, #64	@ 0x40
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d005      	beq.n	8001c0c <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	0010      	movs	r0, r2
 8001c08:	4798      	blx	r3
    return;
 8001c0a:	e0c5      	b.n	8001d98 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2202      	movs	r2, #2
 8001c10:	4013      	ands	r3, r2
 8001c12:	d009      	beq.n	8001c28 <HAL_SPI_IRQHandler+0x58>
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2280      	movs	r2, #128	@ 0x80
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d005      	beq.n	8001c28 <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	0010      	movs	r0, r2
 8001c24:	4798      	blx	r3
    return;
 8001c26:	e0b7      	b.n	8001d98 <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d109      	bne.n	8001c44 <HAL_SPI_IRQHandler+0x74>
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2240      	movs	r2, #64	@ 0x40
 8001c34:	4013      	ands	r3, r2
 8001c36:	d105      	bne.n	8001c44 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	2380      	movs	r3, #128	@ 0x80
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d100      	bne.n	8001c44 <HAL_SPI_IRQHandler+0x74>
 8001c42:	e0a9      	b.n	8001d98 <HAL_SPI_IRQHandler+0x1c8>
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	2220      	movs	r2, #32
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <HAL_SPI_IRQHandler+0x7e>
 8001c4c:	e0a4      	b.n	8001d98 <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2240      	movs	r2, #64	@ 0x40
 8001c52:	4013      	ands	r3, r2
 8001c54:	d023      	beq.n	8001c9e <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	225d      	movs	r2, #93	@ 0x5d
 8001c5a:	5c9b      	ldrb	r3, [r3, r2]
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d011      	beq.n	8001c86 <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c66:	2204      	movs	r2, #4
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	e00b      	b.n	8001c9e <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	613b      	str	r3, [r7, #16]
 8001c9a:	693b      	ldr	r3, [r7, #16]
        return;
 8001c9c:	e07c      	b.n	8001d98 <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d014      	beq.n	8001cd0 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	2201      	movs	r2, #1
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2140      	movs	r1, #64	@ 0x40
 8001cca:	438a      	bics	r2, r1
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	2380      	movs	r3, #128	@ 0x80
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	d00c      	beq.n	8001cf4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	2208      	movs	r2, #8
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	60bb      	str	r3, [r7, #8]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d04c      	beq.n	8001d96 <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	21e0      	movs	r1, #224	@ 0xe0
 8001d08:	438a      	bics	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	225d      	movs	r2, #93	@ 0x5d
 8001d10:	2101      	movs	r1, #1
 8001d12:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2202      	movs	r2, #2
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d103      	bne.n	8001d24 <HAL_SPI_IRQHandler+0x154>
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4013      	ands	r3, r2
 8001d22:	d032      	beq.n	8001d8a <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2103      	movs	r1, #3
 8001d30:	438a      	bics	r2, r1
 8001d32:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d010      	beq.n	8001d5e <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d40:	4a17      	ldr	r2, [pc, #92]	@ (8001da0 <HAL_SPI_IRQHandler+0x1d0>)
 8001d42:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f7fe feb2 	bl	8000ab2 <HAL_DMA_Abort_IT>
 8001d4e:	1e03      	subs	r3, r0, #0
 8001d50:	d005      	beq.n	8001d5e <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d56:	2240      	movs	r2, #64	@ 0x40
 8001d58:	431a      	orrs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d016      	beq.n	8001d94 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8001da0 <HAL_SPI_IRQHandler+0x1d0>)
 8001d6c:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d72:	0018      	movs	r0, r3
 8001d74:	f7fe fe9d 	bl	8000ab2 <HAL_DMA_Abort_IT>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d00b      	beq.n	8001d94 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d80:	2240      	movs	r2, #64	@ 0x40
 8001d82:	431a      	orrs	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8001d88:	e004      	b.n	8001d94 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f809 	bl	8001da4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001d92:	e000      	b.n	8001d96 <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8001d94:	46c0      	nop			@ (mov r8, r8)
    return;
 8001d96:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	b008      	add	sp, #32
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	46c0      	nop			@ (mov r8, r8)
 8001da0:	08001db5 	.word	0x08001db5

08001da4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001dac:	46c0      	nop			@ (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	b002      	add	sp, #8
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2246      	movs	r2, #70	@ 0x46
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f7ff ffe6 	bl	8001da4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	b004      	add	sp, #16
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001df0:	f7fe fd84 	bl	80008fc <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001df8:	1a9b      	subs	r3, r3, r2
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	18d3      	adds	r3, r2, r3
 8001dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e00:	f7fe fd7c 	bl	80008fc <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e08:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	015b      	lsls	r3, r3, #5
 8001e0e:	0d1b      	lsrs	r3, r3, #20
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	4353      	muls	r3, r2
 8001e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e16:	e058      	b.n	8001eca <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	d055      	beq.n	8001eca <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001e1e:	f7fe fd6d 	bl	80008fc <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	69fa      	ldr	r2, [r7, #28]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d902      	bls.n	8001e34 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d142      	bne.n	8001eba <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	21e0      	movs	r1, #224	@ 0xe0
 8001e40:	438a      	bics	r2, r1
 8001e42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	2382      	movs	r3, #130	@ 0x82
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d113      	bne.n	8001e78 <SPI_WaitFlagStateUntilTimeout+0x98>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d005      	beq.n	8001e68 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	2380      	movs	r3, #128	@ 0x80
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d107      	bne.n	8001e78 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2140      	movs	r1, #64	@ 0x40
 8001e74:	438a      	bics	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e7c:	2380      	movs	r3, #128	@ 0x80
 8001e7e:	019b      	lsls	r3, r3, #6
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d110      	bne.n	8001ea6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	491a      	ldr	r1, [pc, #104]	@ (8001ef8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2180      	movs	r1, #128	@ 0x80
 8001ea0:	0189      	lsls	r1, r1, #6
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	225d      	movs	r2, #93	@ 0x5d
 8001eaa:	2101      	movs	r1, #1
 8001eac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	225c      	movs	r2, #92	@ 0x5c
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e017      	b.n	8001eea <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	68ba      	ldr	r2, [r7, #8]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	425a      	negs	r2, r3
 8001eda:	4153      	adcs	r3, r2
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	001a      	movs	r2, r3
 8001ee0:	1dfb      	adds	r3, r7, #7
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d197      	bne.n	8001e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	0018      	movs	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b008      	add	sp, #32
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	ffffdfff 	.word	0xffffdfff

08001efc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	@ 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001f0a:	2317      	movs	r3, #23
 8001f0c:	18fb      	adds	r3, r7, r3
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001f12:	f7fe fcf3 	bl	80008fc <HAL_GetTick>
 8001f16:	0002      	movs	r2, r0
 8001f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f1a:	1a9b      	subs	r3, r3, r2
 8001f1c:	683a      	ldr	r2, [r7, #0]
 8001f1e:	18d3      	adds	r3, r2, r3
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001f22:	f7fe fceb 	bl	80008fc <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001f32:	4b41      	ldr	r3, [pc, #260]	@ (8002038 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	0013      	movs	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	189b      	adds	r3, r3, r2
 8001f3c:	00da      	lsls	r2, r3, #3
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	0d1b      	lsrs	r3, r3, #20
 8001f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f44:	4353      	muls	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f48:	e068      	b.n	800201c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f4a:	68ba      	ldr	r2, [r7, #8]
 8001f4c:	23c0      	movs	r3, #192	@ 0xc0
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d10a      	bne.n	8001f6a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	2117      	movs	r1, #23
 8001f62:	187b      	adds	r3, r7, r1
 8001f64:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	d055      	beq.n	800201c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f70:	f7fe fcc4 	bl	80008fc <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d902      	bls.n	8001f86 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d142      	bne.n	800200c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	21e0      	movs	r1, #224	@ 0xe0
 8001f92:	438a      	bics	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	2382      	movs	r3, #130	@ 0x82
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d113      	bne.n	8001fca <SPI_WaitFifoStateUntilTimeout+0xce>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d005      	beq.n	8001fba <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	689a      	ldr	r2, [r3, #8]
 8001fb2:	2380      	movs	r3, #128	@ 0x80
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d107      	bne.n	8001fca <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2140      	movs	r1, #64	@ 0x40
 8001fc6:	438a      	bics	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fce:	2380      	movs	r3, #128	@ 0x80
 8001fd0:	019b      	lsls	r3, r3, #6
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d110      	bne.n	8001ff8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4916      	ldr	r1, [pc, #88]	@ (800203c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001fe2:	400a      	ands	r2, r1
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2180      	movs	r1, #128	@ 0x80
 8001ff2:	0189      	lsls	r1, r1, #6
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	225d      	movs	r2, #93	@ 0x5d
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	225c      	movs	r2, #92	@ 0x5c
 8002004:	2100      	movs	r1, #0
 8002006:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e010      	b.n	800202e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002012:	2300      	movs	r3, #0
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	3b01      	subs	r3, #1
 800201a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	68ba      	ldr	r2, [r7, #8]
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	d18e      	bne.n	8001f4a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	0018      	movs	r0, r3
 8002030:	46bd      	mov	sp, r7
 8002032:	b00a      	add	sp, #40	@ 0x28
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	20000000 	.word	0x20000000
 800203c:	ffffdfff 	.word	0xffffdfff

08002040 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800204c:	68ba      	ldr	r2, [r7, #8]
 800204e:	23c0      	movs	r3, #192	@ 0xc0
 8002050:	0159      	lsls	r1, r3, #5
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	0013      	movs	r3, r2
 800205a:	2200      	movs	r2, #0
 800205c:	f7ff ff4e 	bl	8001efc <SPI_WaitFifoStateUntilTimeout>
 8002060:	1e03      	subs	r3, r0, #0
 8002062:	d007      	beq.n	8002074 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002068:	2220      	movs	r2, #32
 800206a:	431a      	orrs	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e027      	b.n	80020c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	0013      	movs	r3, r2
 800207e:	2200      	movs	r2, #0
 8002080:	2180      	movs	r1, #128	@ 0x80
 8002082:	f7ff fead 	bl	8001de0 <SPI_WaitFlagStateUntilTimeout>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d007      	beq.n	800209a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800208e:	2220      	movs	r2, #32
 8002090:	431a      	orrs	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e014      	b.n	80020c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	23c0      	movs	r3, #192	@ 0xc0
 800209e:	00d9      	lsls	r1, r3, #3
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	0013      	movs	r3, r2
 80020a8:	2200      	movs	r2, #0
 80020aa:	f7ff ff27 	bl	8001efc <SPI_WaitFifoStateUntilTimeout>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d007      	beq.n	80020c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b6:	2220      	movs	r2, #32
 80020b8:	431a      	orrs	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e000      	b.n	80020c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e042      	b.n	8002164 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	223d      	movs	r2, #61	@ 0x3d
 80020e2:	5c9b      	ldrb	r3, [r3, r2]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d107      	bne.n	80020fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	223c      	movs	r2, #60	@ 0x3c
 80020ee:	2100      	movs	r1, #0
 80020f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 f839 	bl	800216c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	223d      	movs	r2, #61	@ 0x3d
 80020fe:	2102      	movs	r1, #2
 8002100:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	0019      	movs	r1, r3
 800210c:	0010      	movs	r0, r2
 800210e:	f000 f995 	bl	800243c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2246      	movs	r2, #70	@ 0x46
 8002116:	2101      	movs	r1, #1
 8002118:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	223e      	movs	r2, #62	@ 0x3e
 800211e:	2101      	movs	r1, #1
 8002120:	5499      	strb	r1, [r3, r2]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	223f      	movs	r2, #63	@ 0x3f
 8002126:	2101      	movs	r1, #1
 8002128:	5499      	strb	r1, [r3, r2]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2240      	movs	r2, #64	@ 0x40
 800212e:	2101      	movs	r1, #1
 8002130:	5499      	strb	r1, [r3, r2]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2241      	movs	r2, #65	@ 0x41
 8002136:	2101      	movs	r1, #1
 8002138:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2242      	movs	r2, #66	@ 0x42
 800213e:	2101      	movs	r1, #1
 8002140:	5499      	strb	r1, [r3, r2]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2243      	movs	r2, #67	@ 0x43
 8002146:	2101      	movs	r1, #1
 8002148:	5499      	strb	r1, [r3, r2]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2244      	movs	r2, #68	@ 0x44
 800214e:	2101      	movs	r1, #1
 8002150:	5499      	strb	r1, [r3, r2]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2245      	movs	r2, #69	@ 0x45
 8002156:	2101      	movs	r1, #1
 8002158:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	223d      	movs	r2, #61	@ 0x3d
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002162:	2300      	movs	r3, #0
}
 8002164:	0018      	movs	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002174:	46c0      	nop			@ (mov r8, r8)
 8002176:	46bd      	mov	sp, r7
 8002178:	b002      	add	sp, #8
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	223d      	movs	r2, #61	@ 0x3d
 8002188:	5c9b      	ldrb	r3, [r3, r2]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b01      	cmp	r3, #1
 800218e:	d001      	beq.n	8002194 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e03b      	b.n	800220c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	223d      	movs	r2, #61	@ 0x3d
 8002198:	2102      	movs	r1, #2
 800219a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2101      	movs	r1, #1
 80021a8:	430a      	orrs	r2, r1
 80021aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a18      	ldr	r2, [pc, #96]	@ (8002214 <HAL_TIM_Base_Start_IT+0x98>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00f      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x5a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	@ 0x80
 80021bc:	05db      	lsls	r3, r3, #23
 80021be:	429a      	cmp	r2, r3
 80021c0:	d009      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x5a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a14      	ldr	r2, [pc, #80]	@ (8002218 <HAL_TIM_Base_Start_IT+0x9c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x5a>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a12      	ldr	r2, [pc, #72]	@ (800221c <HAL_TIM_Base_Start_IT+0xa0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d111      	bne.n	80021fa <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2207      	movs	r2, #7
 80021de:	4013      	ands	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d010      	beq.n	800220a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2101      	movs	r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021f8:	e007      	b.n	800220a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2101      	movs	r1, #1
 8002206:	430a      	orrs	r2, r1
 8002208:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b004      	add	sp, #16
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40012c00 	.word	0x40012c00
 8002218:	40000400 	.word	0x40000400
 800221c:	40014000 	.word	0x40014000

08002220 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2202      	movs	r2, #2
 800223c:	4013      	ands	r3, r2
 800223e:	d021      	beq.n	8002284 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2202      	movs	r2, #2
 8002244:	4013      	ands	r3, r2
 8002246:	d01d      	beq.n	8002284 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2203      	movs	r2, #3
 800224e:	4252      	negs	r2, r2
 8002250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2203      	movs	r2, #3
 8002260:	4013      	ands	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	0018      	movs	r0, r3
 8002268:	f000 f8d0 	bl	800240c <HAL_TIM_IC_CaptureCallback>
 800226c:	e007      	b.n	800227e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	0018      	movs	r0, r3
 8002272:	f000 f8c3 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 f8cf 	bl	800241c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	2204      	movs	r2, #4
 8002288:	4013      	ands	r3, r2
 800228a:	d022      	beq.n	80022d2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2204      	movs	r2, #4
 8002290:	4013      	ands	r3, r2
 8002292:	d01e      	beq.n	80022d2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2205      	movs	r2, #5
 800229a:	4252      	negs	r2, r2
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2202      	movs	r2, #2
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	699a      	ldr	r2, [r3, #24]
 80022aa:	23c0      	movs	r3, #192	@ 0xc0
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d004      	beq.n	80022bc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f000 f8a9 	bl	800240c <HAL_TIM_IC_CaptureCallback>
 80022ba:	e007      	b.n	80022cc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	0018      	movs	r0, r3
 80022c0:	f000 f89c 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f000 f8a8 	bl	800241c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2208      	movs	r2, #8
 80022d6:	4013      	ands	r3, r2
 80022d8:	d021      	beq.n	800231e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2208      	movs	r2, #8
 80022de:	4013      	ands	r3, r2
 80022e0:	d01d      	beq.n	800231e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2209      	movs	r2, #9
 80022e8:	4252      	negs	r2, r2
 80022ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2204      	movs	r2, #4
 80022f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2203      	movs	r2, #3
 80022fa:	4013      	ands	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f883 	bl	800240c <HAL_TIM_IC_CaptureCallback>
 8002306:	e007      	b.n	8002318 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	0018      	movs	r0, r3
 800230c:	f000 f876 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 f882 	bl	800241c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2210      	movs	r2, #16
 8002322:	4013      	ands	r3, r2
 8002324:	d022      	beq.n	800236c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2210      	movs	r2, #16
 800232a:	4013      	ands	r3, r2
 800232c:	d01e      	beq.n	800236c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2211      	movs	r2, #17
 8002334:	4252      	negs	r2, r2
 8002336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2208      	movs	r2, #8
 800233c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69da      	ldr	r2, [r3, #28]
 8002344:	23c0      	movs	r3, #192	@ 0xc0
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4013      	ands	r3, r2
 800234a:	d004      	beq.n	8002356 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0018      	movs	r0, r3
 8002350:	f000 f85c 	bl	800240c <HAL_TIM_IC_CaptureCallback>
 8002354:	e007      	b.n	8002366 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f000 f84f 	bl	80023fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 f85b 	bl	800241c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	2201      	movs	r2, #1
 8002370:	4013      	ands	r3, r2
 8002372:	d00c      	beq.n	800238e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d008      	beq.n	800238e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2202      	movs	r2, #2
 8002382:	4252      	negs	r2, r2
 8002384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	0018      	movs	r0, r3
 800238a:	f7fe f8ff 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	2280      	movs	r2, #128	@ 0x80
 8002392:	4013      	ands	r3, r2
 8002394:	d00c      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2280      	movs	r2, #128	@ 0x80
 800239a:	4013      	ands	r3, r2
 800239c:	d008      	beq.n	80023b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2281      	movs	r2, #129	@ 0x81
 80023a4:	4252      	negs	r2, r2
 80023a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 f8dc 	bl	8002568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2240      	movs	r2, #64	@ 0x40
 80023b4:	4013      	ands	r3, r2
 80023b6:	d00c      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2240      	movs	r2, #64	@ 0x40
 80023bc:	4013      	ands	r3, r2
 80023be:	d008      	beq.n	80023d2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2241      	movs	r2, #65	@ 0x41
 80023c6:	4252      	negs	r2, r2
 80023c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 f82d 	bl	800242c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2220      	movs	r2, #32
 80023d6:	4013      	ands	r3, r2
 80023d8:	d00c      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	4013      	ands	r3, r2
 80023e0:	d008      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2221      	movs	r2, #33	@ 0x21
 80023e8:	4252      	negs	r2, r2
 80023ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 f8b2 	bl	8002558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f4:	46c0      	nop			@ (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b004      	add	sp, #16
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002414:	46c0      	nop			@ (mov r8, r8)
 8002416:	46bd      	mov	sp, r7
 8002418:	b002      	add	sp, #8
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b002      	add	sp, #8
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002434:	46c0      	nop			@ (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}

0800243c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a3b      	ldr	r2, [pc, #236]	@ (800253c <TIM_Base_SetConfig+0x100>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d008      	beq.n	8002466 <TIM_Base_SetConfig+0x2a>
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	2380      	movs	r3, #128	@ 0x80
 8002458:	05db      	lsls	r3, r3, #23
 800245a:	429a      	cmp	r2, r3
 800245c:	d003      	beq.n	8002466 <TIM_Base_SetConfig+0x2a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a37      	ldr	r2, [pc, #220]	@ (8002540 <TIM_Base_SetConfig+0x104>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d108      	bne.n	8002478 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2270      	movs	r2, #112	@ 0x70
 800246a:	4393      	bics	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	4313      	orrs	r3, r2
 8002476:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a30      	ldr	r2, [pc, #192]	@ (800253c <TIM_Base_SetConfig+0x100>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d018      	beq.n	80024b2 <TIM_Base_SetConfig+0x76>
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	05db      	lsls	r3, r3, #23
 8002486:	429a      	cmp	r2, r3
 8002488:	d013      	beq.n	80024b2 <TIM_Base_SetConfig+0x76>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a2c      	ldr	r2, [pc, #176]	@ (8002540 <TIM_Base_SetConfig+0x104>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d00f      	beq.n	80024b2 <TIM_Base_SetConfig+0x76>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a2b      	ldr	r2, [pc, #172]	@ (8002544 <TIM_Base_SetConfig+0x108>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00b      	beq.n	80024b2 <TIM_Base_SetConfig+0x76>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a2a      	ldr	r2, [pc, #168]	@ (8002548 <TIM_Base_SetConfig+0x10c>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d007      	beq.n	80024b2 <TIM_Base_SetConfig+0x76>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a29      	ldr	r2, [pc, #164]	@ (800254c <TIM_Base_SetConfig+0x110>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d003      	beq.n	80024b2 <TIM_Base_SetConfig+0x76>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <TIM_Base_SetConfig+0x114>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d108      	bne.n	80024c4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4a27      	ldr	r2, [pc, #156]	@ (8002554 <TIM_Base_SetConfig+0x118>)
 80024b6:	4013      	ands	r3, r2
 80024b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2280      	movs	r2, #128	@ 0x80
 80024c8:	4393      	bics	r3, r2
 80024ca:	001a      	movs	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a13      	ldr	r2, [pc, #76]	@ (800253c <TIM_Base_SetConfig+0x100>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00b      	beq.n	800250a <TIM_Base_SetConfig+0xce>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a14      	ldr	r2, [pc, #80]	@ (8002548 <TIM_Base_SetConfig+0x10c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <TIM_Base_SetConfig+0xce>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a13      	ldr	r2, [pc, #76]	@ (800254c <TIM_Base_SetConfig+0x110>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d003      	beq.n	800250a <TIM_Base_SetConfig+0xce>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a12      	ldr	r2, [pc, #72]	@ (8002550 <TIM_Base_SetConfig+0x114>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d103      	bne.n	8002512 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691a      	ldr	r2, [r3, #16]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2201      	movs	r2, #1
 8002516:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2201      	movs	r2, #1
 800251e:	4013      	ands	r3, r2
 8002520:	2b01      	cmp	r3, #1
 8002522:	d106      	bne.n	8002532 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2201      	movs	r2, #1
 800252a:	4393      	bics	r3, r2
 800252c:	001a      	movs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	611a      	str	r2, [r3, #16]
  }
}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b004      	add	sp, #16
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			@ (mov r8, r8)
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40000400 	.word	0x40000400
 8002544:	40002000 	.word	0x40002000
 8002548:	40014000 	.word	0x40014000
 800254c:	40014400 	.word	0x40014400
 8002550:	40014800 	.word	0x40014800
 8002554:	fffffcff 	.word	0xfffffcff

08002558 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002560:	46c0      	nop			@ (mov r8, r8)
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002570:	46c0      	nop			@ (mov r8, r8)
 8002572:	46bd      	mov	sp, r7
 8002574:	b002      	add	sp, #8
 8002576:	bd80      	pop	{r7, pc}

08002578 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	0002      	movs	r2, r0
 8002580:	1dbb      	adds	r3, r7, #6
 8002582:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002584:	2300      	movs	r3, #0
 8002586:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002588:	1dbb      	adds	r3, r7, #6
 800258a:	2200      	movs	r2, #0
 800258c:	5e9b      	ldrsh	r3, [r3, r2]
 800258e:	2b84      	cmp	r3, #132	@ 0x84
 8002590:	d006      	beq.n	80025a0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002592:	1dbb      	adds	r3, r7, #6
 8002594:	2200      	movs	r2, #0
 8002596:	5e9a      	ldrsh	r2, [r3, r2]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	18d3      	adds	r3, r2, r3
 800259c:	3303      	adds	r3, #3
 800259e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80025a0:	68fb      	ldr	r3, [r7, #12]
}
 80025a2:	0018      	movs	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	b004      	add	sp, #16
 80025a8:	bd80      	pop	{r7, pc}

080025aa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80025ae:	f000 fdef 	bl	8003190 <vTaskStartScheduler>
  
  return osOK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025bc:	b089      	sub	sp, #36	@ 0x24
 80025be:	af04      	add	r7, sp, #16
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <osThreadCreate+0x54>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01c      	beq.n	800260e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685c      	ldr	r4, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	691e      	ldr	r6, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2208      	movs	r2, #8
 80025e4:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff ffc6 	bl	8002578 <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	695a      	ldr	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	9302      	str	r3, [sp, #8]
 80025f8:	9201      	str	r2, [sp, #4]
 80025fa:	9000      	str	r0, [sp, #0]
 80025fc:	000b      	movs	r3, r1
 80025fe:	0032      	movs	r2, r6
 8002600:	0029      	movs	r1, r5
 8002602:	0020      	movs	r0, r4
 8002604:	f000 fc2e 	bl	8002e64 <xTaskCreateStatic>
 8002608:	0003      	movs	r3, r0
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	e01d      	b.n	800264a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685c      	ldr	r4, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800261a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2208      	movs	r2, #8
 8002620:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002622:	0018      	movs	r0, r3
 8002624:	f7ff ffa8 	bl	8002578 <makeFreeRtosPriority>
 8002628:	0001      	movs	r1, r0
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	230c      	movs	r3, #12
 800262e:	18fb      	adds	r3, r7, r3
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	9100      	str	r1, [sp, #0]
 8002634:	0013      	movs	r3, r2
 8002636:	0032      	movs	r2, r6
 8002638:	0029      	movs	r1, r5
 800263a:	0020      	movs	r0, r4
 800263c:	f000 fc58 	bl	8002ef0 <xTaskCreate>
 8002640:	0003      	movs	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d001      	beq.n	800264a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8002646:	2300      	movs	r3, #0
 8002648:	e000      	b.n	800264c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800264a:	68fb      	ldr	r3, [r7, #12]
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	b005      	add	sp, #20
 8002652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002654 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <osDelay+0x16>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	e000      	b.n	800266c <osDelay+0x18>
 800266a:	2301      	movs	r3, #1
 800266c:	0018      	movs	r0, r3
 800266e:	f000 fd69 	bl	8003144 <vTaskDelay>
  
  return osOK;
 8002672:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b004      	add	sp, #16
 800267a:	bd80      	pop	{r7, pc}

0800267c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3308      	adds	r3, #8
 8002688:	001a      	movs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	4252      	negs	r2, r2
 8002694:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3308      	adds	r3, #8
 800269a:	001a      	movs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3308      	adds	r3, #8
 80026a4:	001a      	movs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026b0:	46c0      	nop			@ (mov r8, r8)
 80026b2:	46bd      	mov	sp, r7
 80026b4:	b002      	add	sp, #8
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b002      	add	sp, #8
 80026cc:	bd80      	pop	{r7, pc}

080026ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	601a      	str	r2, [r3, #0]
}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b004      	add	sp, #16
 8002710:	bd80      	pop	{r7, pc}

08002712 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	d103      	bne.n	8002730 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	60fb      	str	r3, [r7, #12]
 800272e:	e00c      	b.n	800274a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3308      	adds	r3, #8
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	e002      	b.n	800273e <vListInsert+0x2c>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d2f6      	bcs.n	8002738 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1c5a      	adds	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	601a      	str	r2, [r3, #0]
}
 8002776:	46c0      	nop			@ (mov r8, r8)
 8002778:	46bd      	mov	sp, r7
 800277a:	b004      	add	sp, #16
 800277c:	bd80      	pop	{r7, pc}

0800277e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6892      	ldr	r2, [r2, #8]
 8002794:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6852      	ldr	r2, [r2, #4]
 800279e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d103      	bne.n	80027b2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1e5a      	subs	r2, r3, #1
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b004      	add	sp, #16
 80027cc:	bd80      	pop	{r7, pc}

080027ce <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <xQueueGenericReset+0x1a>
 80027e2:	b672      	cpsid	i
 80027e4:	46c0      	nop			@ (mov r8, r8)
 80027e6:	e7fd      	b.n	80027e4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80027e8:	f001 f9ea 	bl	8003bc0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	434b      	muls	r3, r1
 80027fa:	18d2      	adds	r2, r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002816:	1e59      	subs	r1, r3, #1
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281c:	434b      	muls	r3, r1
 800281e:	18d2      	adds	r2, r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2244      	movs	r2, #68	@ 0x44
 8002828:	21ff      	movs	r1, #255	@ 0xff
 800282a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2245      	movs	r2, #69	@ 0x45
 8002830:	21ff      	movs	r1, #255	@ 0xff
 8002832:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10d      	bne.n	8002856 <xQueueGenericReset+0x88>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d013      	beq.n	800286a <xQueueGenericReset+0x9c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	3310      	adds	r3, #16
 8002846:	0018      	movs	r0, r3
 8002848:	f000 feb0 	bl	80035ac <xTaskRemoveFromEventList>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d00c      	beq.n	800286a <xQueueGenericReset+0x9c>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002850:	f001 f9a6 	bl	8003ba0 <vPortYield>
 8002854:	e009      	b.n	800286a <xQueueGenericReset+0x9c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3310      	adds	r3, #16
 800285a:	0018      	movs	r0, r3
 800285c:	f7ff ff0e 	bl	800267c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3324      	adds	r3, #36	@ 0x24
 8002864:	0018      	movs	r0, r3
 8002866:	f7ff ff09 	bl	800267c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800286a:	f001 f9bb 	bl	8003be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800286e:	2301      	movs	r3, #1
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b004      	add	sp, #16
 8002876:	bd80      	pop	{r7, pc}

08002878 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b08b      	sub	sp, #44	@ 0x2c
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	1dfb      	adds	r3, r7, #7
 8002884:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d102      	bne.n	8002892 <xQueueGenericCreate+0x1a>
 800288c:	b672      	cpsid	i
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	e7fd      	b.n	800288e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <xQueueGenericCreate+0x26>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e003      	b.n	80028a6 <xQueueGenericCreate+0x2e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	4353      	muls	r3, r2
 80028a4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	3348      	adds	r3, #72	@ 0x48
 80028aa:	0018      	movs	r0, r3
 80028ac:	f001 fa20 	bl	8003cf0 <pvPortMalloc>
 80028b0:	0003      	movs	r3, r0
 80028b2:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d010      	beq.n	80028dc <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	3348      	adds	r3, #72	@ 0x48
 80028be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2246      	movs	r2, #70	@ 0x46
 80028c4:	2100      	movs	r1, #0
 80028c6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028c8:	1dfb      	adds	r3, r7, #7
 80028ca:	781c      	ldrb	r4, [r3, #0]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	0023      	movs	r3, r4
 80028d8:	f000 f805 	bl	80028e6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80028dc:	69bb      	ldr	r3, [r7, #24]
	}
 80028de:	0018      	movs	r0, r3
 80028e0:	46bd      	mov	sp, r7
 80028e2:	b009      	add	sp, #36	@ 0x24
 80028e4:	bd90      	pop	{r4, r7, pc}

080028e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b084      	sub	sp, #16
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	60f8      	str	r0, [r7, #12]
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	001a      	movs	r2, r3
 80028f4:	1cfb      	adds	r3, r7, #3
 80028f6:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e002      	b.n	800290c <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2101      	movs	r1, #1
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff ff56 	bl	80027ce <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	46bd      	mov	sp, r7
 8002926:	b004      	add	sp, #16
 8002928:	bd80      	pop	{r7, pc}

0800292a <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b08a      	sub	sp, #40	@ 0x28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002938:	2300      	movs	r3, #0
 800293a:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <xQueueGenericSend+0x22>
 8002946:	b672      	cpsid	i
 8002948:	46c0      	nop			@ (mov r8, r8)
 800294a:	e7fd      	b.n	8002948 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d103      	bne.n	800295a <xQueueGenericSend+0x30>
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <xQueueGenericSend+0x34>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <xQueueGenericSend+0x36>
 800295e:	2300      	movs	r3, #0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d102      	bne.n	800296a <xQueueGenericSend+0x40>
 8002964:	b672      	cpsid	i
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	e7fd      	b.n	8002966 <xQueueGenericSend+0x3c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d103      	bne.n	8002978 <xQueueGenericSend+0x4e>
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <xQueueGenericSend+0x52>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <xQueueGenericSend+0x54>
 800297c:	2300      	movs	r3, #0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d102      	bne.n	8002988 <xQueueGenericSend+0x5e>
 8002982:	b672      	cpsid	i
 8002984:	46c0      	nop			@ (mov r8, r8)
 8002986:	e7fd      	b.n	8002984 <xQueueGenericSend+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002988:	f000 ffae 	bl	80038e8 <xTaskGetSchedulerState>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d102      	bne.n	8002996 <xQueueGenericSend+0x6c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <xQueueGenericSend+0x70>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <xQueueGenericSend+0x72>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d102      	bne.n	80029a6 <xQueueGenericSend+0x7c>
 80029a0:	b672      	cpsid	i
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	e7fd      	b.n	80029a2 <xQueueGenericSend+0x78>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029a6:	f001 f90b 	bl	8003bc0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <xQueueGenericSend+0x92>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d11e      	bne.n	80029fa <xQueueGenericSend+0xd0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	68b9      	ldr	r1, [r7, #8]
 80029c0:	6a3b      	ldr	r3, [r7, #32]
 80029c2:	0018      	movs	r0, r3
 80029c4:	f000 f931 	bl	8002c2a <prvCopyDataToQueue>
 80029c8:	0003      	movs	r3, r0
 80029ca:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	3324      	adds	r3, #36	@ 0x24
 80029d8:	0018      	movs	r0, r3
 80029da:	f000 fde7 	bl	80035ac <xTaskRemoveFromEventList>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d007      	beq.n	80029f2 <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029e2:	f001 f8dd 	bl	8003ba0 <vPortYield>
 80029e6:	e004      	b.n	80029f2 <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029ee:	f001 f8d7 	bl	8003ba0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029f2:	f001 f8f7 	bl	8003be4 <vPortExitCritical>
				return pdPASS;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e05b      	b.n	8002ab2 <xQueueGenericSend+0x188>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d103      	bne.n	8002a08 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a00:	f001 f8f0 	bl	8003be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e054      	b.n	8002ab2 <xQueueGenericSend+0x188>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d106      	bne.n	8002a1c <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a0e:	2314      	movs	r3, #20
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 fe28 	bl	8003668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a1c:	f001 f8e2 	bl	8003be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a20:	f000 fc04 	bl	800322c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a24:	f001 f8cc 	bl	8003bc0 <vPortEnterCritical>
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2244      	movs	r2, #68	@ 0x44
 8002a2c:	5c9b      	ldrb	r3, [r3, r2]
 8002a2e:	b25b      	sxtb	r3, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	d103      	bne.n	8002a3c <xQueueGenericSend+0x112>
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	2244      	movs	r2, #68	@ 0x44
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2245      	movs	r2, #69	@ 0x45
 8002a40:	5c9b      	ldrb	r3, [r3, r2]
 8002a42:	b25b      	sxtb	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	d103      	bne.n	8002a50 <xQueueGenericSend+0x126>
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	2245      	movs	r2, #69	@ 0x45
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	5499      	strb	r1, [r3, r2]
 8002a50:	f001 f8c8 	bl	8003be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a54:	1d3a      	adds	r2, r7, #4
 8002a56:	2314      	movs	r3, #20
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 fe17 	bl	8003690 <xTaskCheckForTimeOut>
 8002a62:	1e03      	subs	r3, r0, #0
 8002a64:	d11e      	bne.n	8002aa4 <xQueueGenericSend+0x17a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a66:	6a3b      	ldr	r3, [r7, #32]
 8002a68:	0018      	movs	r0, r3
 8002a6a:	f000 f9e3 	bl	8002e34 <prvIsQueueFull>
 8002a6e:	1e03      	subs	r3, r0, #0
 8002a70:	d011      	beq.n	8002a96 <xQueueGenericSend+0x16c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	3310      	adds	r3, #16
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	0011      	movs	r1, r2
 8002a7a:	0018      	movs	r0, r3
 8002a7c:	f000 fd76 	bl	800356c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f962 	bl	8002d4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a88:	f000 fbdc 	bl	8003244 <xTaskResumeAll>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d18a      	bne.n	80029a6 <xQueueGenericSend+0x7c>
				{
					portYIELD_WITHIN_API();
 8002a90:	f001 f886 	bl	8003ba0 <vPortYield>
 8002a94:	e787      	b.n	80029a6 <xQueueGenericSend+0x7c>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f000 f957 	bl	8002d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a9e:	f000 fbd1 	bl	8003244 <xTaskResumeAll>
 8002aa2:	e780      	b.n	80029a6 <xQueueGenericSend+0x7c>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f950 	bl	8002d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002aac:	f000 fbca 	bl	8003244 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002ab0:	2300      	movs	r3, #0
		}
	}
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b00a      	add	sp, #40	@ 0x28
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b08a      	sub	sp, #40	@ 0x28
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	60f8      	str	r0, [r7, #12]
 8002ac2:	60b9      	str	r1, [r7, #8]
 8002ac4:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d102      	bne.n	8002ada <xQueueReceive+0x20>
 8002ad4:	b672      	cpsid	i
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	e7fd      	b.n	8002ad6 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d103      	bne.n	8002ae8 <xQueueReceive+0x2e>
 8002ae0:	6a3b      	ldr	r3, [r7, #32]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <xQueueReceive+0x32>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e000      	b.n	8002aee <xQueueReceive+0x34>
 8002aec:	2300      	movs	r3, #0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d102      	bne.n	8002af8 <xQueueReceive+0x3e>
 8002af2:	b672      	cpsid	i
 8002af4:	46c0      	nop			@ (mov r8, r8)
 8002af6:	e7fd      	b.n	8002af4 <xQueueReceive+0x3a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002af8:	f000 fef6 	bl	80038e8 <xTaskGetSchedulerState>
 8002afc:	1e03      	subs	r3, r0, #0
 8002afe:	d102      	bne.n	8002b06 <xQueueReceive+0x4c>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <xQueueReceive+0x50>
 8002b06:	2301      	movs	r3, #1
 8002b08:	e000      	b.n	8002b0c <xQueueReceive+0x52>
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <xQueueReceive+0x5c>
 8002b10:	b672      	cpsid	i
 8002b12:	46c0      	nop			@ (mov r8, r8)
 8002b14:	e7fd      	b.n	8002b12 <xQueueReceive+0x58>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b16:	f001 f853 	bl	8003bc0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01a      	beq.n	8002b5c <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	0011      	movs	r1, r2
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f000 f8e7 	bl	8002d00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	3310      	adds	r3, #16
 8002b46:	0018      	movs	r0, r3
 8002b48:	f000 fd30 	bl	80035ac <xTaskRemoveFromEventList>
 8002b4c:	1e03      	subs	r3, r0, #0
 8002b4e:	d001      	beq.n	8002b54 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b50:	f001 f826 	bl	8003ba0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b54:	f001 f846 	bl	8003be4 <vPortExitCritical>
				return pdPASS;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e062      	b.n	8002c22 <xQueueReceive+0x168>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d103      	bne.n	8002b6a <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b62:	f001 f83f 	bl	8003be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b66:	2300      	movs	r3, #0
 8002b68:	e05b      	b.n	8002c22 <xQueueReceive+0x168>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b70:	2314      	movs	r3, #20
 8002b72:	18fb      	adds	r3, r7, r3
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 fd77 	bl	8003668 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	627b      	str	r3, [r7, #36]	@ 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b7e:	f001 f831 	bl	8003be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b82:	f000 fb53 	bl	800322c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b86:	f001 f81b 	bl	8003bc0 <vPortEnterCritical>
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2244      	movs	r2, #68	@ 0x44
 8002b8e:	5c9b      	ldrb	r3, [r3, r2]
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	d103      	bne.n	8002b9e <xQueueReceive+0xe4>
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	2244      	movs	r2, #68	@ 0x44
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5499      	strb	r1, [r3, r2]
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	2245      	movs	r2, #69	@ 0x45
 8002ba2:	5c9b      	ldrb	r3, [r3, r2]
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	d103      	bne.n	8002bb2 <xQueueReceive+0xf8>
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	2245      	movs	r2, #69	@ 0x45
 8002bae:	2100      	movs	r1, #0
 8002bb0:	5499      	strb	r1, [r3, r2]
 8002bb2:	f001 f817 	bl	8003be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bb6:	1d3a      	adds	r2, r7, #4
 8002bb8:	2314      	movs	r3, #20
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	0011      	movs	r1, r2
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 fd66 	bl	8003690 <xTaskCheckForTimeOut>
 8002bc4:	1e03      	subs	r3, r0, #0
 8002bc6:	d11e      	bne.n	8002c06 <xQueueReceive+0x14c>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 f91c 	bl	8002e08 <prvIsQueueEmpty>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d011      	beq.n	8002bf8 <xQueueReceive+0x13e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	3324      	adds	r3, #36	@ 0x24
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	0011      	movs	r1, r2
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f000 fcc5 	bl	800356c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	0018      	movs	r0, r3
 8002be6:	f000 f8b1 	bl	8002d4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bea:	f000 fb2b 	bl	8003244 <xTaskResumeAll>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d191      	bne.n	8002b16 <xQueueReceive+0x5c>
				{
					portYIELD_WITHIN_API();
 8002bf2:	f000 ffd5 	bl	8003ba0 <vPortYield>
 8002bf6:	e78e      	b.n	8002b16 <xQueueReceive+0x5c>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f000 f8a6 	bl	8002d4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c00:	f000 fb20 	bl	8003244 <xTaskResumeAll>
 8002c04:	e787      	b.n	8002b16 <xQueueReceive+0x5c>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 f89f 	bl	8002d4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c0e:	f000 fb19 	bl	8003244 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c12:	6a3b      	ldr	r3, [r7, #32]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f000 f8f7 	bl	8002e08 <prvIsQueueEmpty>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d100      	bne.n	8002c20 <xQueueReceive+0x166>
 8002c1e:	e77a      	b.n	8002b16 <xQueueReceive+0x5c>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b00a      	add	sp, #40	@ 0x28
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10e      	bne.n	8002c66 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d14e      	bne.n	8002cee <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 fe63 	bl	8003920 <xTaskPriorityDisinherit>
 8002c5a:	0003      	movs	r3, r0
 8002c5c:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	e043      	b.n	8002cee <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d119      	bne.n	8002ca0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6898      	ldr	r0, [r3, #8]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	0019      	movs	r1, r3
 8002c78:	f001 fa10 	bl	800409c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	18d2      	adds	r2, r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d32b      	bcc.n	8002cee <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	609a      	str	r2, [r3, #8]
 8002c9e:	e026      	b.n	8002cee <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68d8      	ldr	r0, [r3, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	0019      	movs	r1, r3
 8002cac:	f001 f9f6 	bl	800409c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	425b      	negs	r3, r3
 8002cba:	18d2      	adds	r2, r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d207      	bcs.n	8002cdc <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	18d2      	adds	r2, r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d105      	bne.n	8002cee <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002cf6:	697b      	ldr	r3, [r7, #20]
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b006      	add	sp, #24
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d018      	beq.n	8002d44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	18d2      	adds	r2, r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d303      	bcc.n	8002d34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68d9      	ldr	r1, [r3, #12]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f001 f9ac 	bl	800409c <memcpy>
	}
}
 8002d44:	46c0      	nop			@ (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d54:	f000 ff34 	bl	8003bc0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d58:	230f      	movs	r3, #15
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	2145      	movs	r1, #69	@ 0x45
 8002d60:	5c52      	ldrb	r2, [r2, r1]
 8002d62:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d64:	e013      	b.n	8002d8e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d016      	beq.n	8002d9c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3324      	adds	r3, #36	@ 0x24
 8002d72:	0018      	movs	r0, r3
 8002d74:	f000 fc1a 	bl	80035ac <xTaskRemoveFromEventList>
 8002d78:	1e03      	subs	r3, r0, #0
 8002d7a:	d001      	beq.n	8002d80 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d7c:	f000 fcda 	bl	8003734 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d80:	210f      	movs	r1, #15
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	187b      	adds	r3, r7, r1
 8002d8c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d8e:	230f      	movs	r3, #15
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b25b      	sxtb	r3, r3
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	dce5      	bgt.n	8002d66 <prvUnlockQueue+0x1a>
 8002d9a:	e000      	b.n	8002d9e <prvUnlockQueue+0x52>
					break;
 8002d9c:	46c0      	nop			@ (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2245      	movs	r2, #69	@ 0x45
 8002da2:	21ff      	movs	r1, #255	@ 0xff
 8002da4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002da6:	f000 ff1d 	bl	8003be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002daa:	f000 ff09 	bl	8003bc0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002dae:	230e      	movs	r3, #14
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	2144      	movs	r1, #68	@ 0x44
 8002db6:	5c52      	ldrb	r2, [r2, r1]
 8002db8:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dba:	e013      	b.n	8002de4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d016      	beq.n	8002df2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3310      	adds	r3, #16
 8002dc8:	0018      	movs	r0, r3
 8002dca:	f000 fbef 	bl	80035ac <xTaskRemoveFromEventList>
 8002dce:	1e03      	subs	r3, r0, #0
 8002dd0:	d001      	beq.n	8002dd6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8002dd2:	f000 fcaf 	bl	8003734 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002dd6:	210e      	movs	r1, #14
 8002dd8:	187b      	adds	r3, r7, r1
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b2da      	uxtb	r2, r3
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002de4:	230e      	movs	r3, #14
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b25b      	sxtb	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	dce5      	bgt.n	8002dbc <prvUnlockQueue+0x70>
 8002df0:	e000      	b.n	8002df4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8002df2:	46c0      	nop			@ (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2244      	movs	r2, #68	@ 0x44
 8002df8:	21ff      	movs	r1, #255	@ 0xff
 8002dfa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8002dfc:	f000 fef2 	bl	8003be4 <vPortExitCritical>
}
 8002e00:	46c0      	nop			@ (mov r8, r8)
 8002e02:	46bd      	mov	sp, r7
 8002e04:	b004      	add	sp, #16
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e10:	f000 fed6 	bl	8003bc0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d102      	bne.n	8002e22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	e001      	b.n	8002e26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e26:	f000 fedd 	bl	8003be4 <vPortExitCritical>

	return xReturn;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
}
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	b004      	add	sp, #16
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e3c:	f000 fec0 	bl	8003bc0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d102      	bne.n	8002e52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	e001      	b.n	8002e56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e56:	f000 fec5 	bl	8003be4 <vPortExitCritical>

	return xReturn;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	b004      	add	sp, #16
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002e64:	b590      	push	{r4, r7, lr}
 8002e66:	b08d      	sub	sp, #52	@ 0x34
 8002e68:	af04      	add	r7, sp, #16
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <xTaskCreateStatic+0x1a>
 8002e78:	b672      	cpsid	i
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	e7fd      	b.n	8002e7a <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8002e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d102      	bne.n	8002e8a <xTaskCreateStatic+0x26>
 8002e84:	b672      	cpsid	i
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	e7fd      	b.n	8002e86 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002e8a:	2354      	movs	r3, #84	@ 0x54
 8002e8c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b54      	cmp	r3, #84	@ 0x54
 8002e92:	d002      	beq.n	8002e9a <xTaskCreateStatic+0x36>
 8002e94:	b672      	cpsid	i
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	e7fd      	b.n	8002e96 <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d020      	beq.n	8002ee2 <xTaskCreateStatic+0x7e>
 8002ea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d01d      	beq.n	8002ee2 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ea8:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002eae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	2251      	movs	r2, #81	@ 0x51
 8002eb4:	2102      	movs	r1, #2
 8002eb6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002eb8:	683c      	ldr	r4, [r7, #0]
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	9303      	str	r3, [sp, #12]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	9302      	str	r3, [sp, #8]
 8002ec8:	2318      	movs	r3, #24
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	0023      	movs	r3, r4
 8002ed4:	f000 f858 	bl	8002f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f8ce 	bl	800307c <prvAddNewTaskToReadyList>
 8002ee0:	e001      	b.n	8002ee6 <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002ee6:	69bb      	ldr	r3, [r7, #24]
	}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b009      	add	sp, #36	@ 0x24
 8002eee:	bd90      	pop	{r4, r7, pc}

08002ef0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ef0:	b590      	push	{r4, r7, lr}
 8002ef2:	b08d      	sub	sp, #52	@ 0x34
 8002ef4:	af04      	add	r7, sp, #16
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	1dbb      	adds	r3, r7, #6
 8002efe:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f00:	1dbb      	adds	r3, r7, #6
 8002f02:	881b      	ldrh	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 fef2 	bl	8003cf0 <pvPortMalloc>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d010      	beq.n	8002f38 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002f16:	2054      	movs	r0, #84	@ 0x54
 8002f18:	f000 feea 	bl	8003cf0 <pvPortMalloc>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f2c:	e006      	b.n	8002f3c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	0018      	movs	r0, r3
 8002f32:	f000 ff85 	bl	8003e40 <vPortFree>
 8002f36:	e001      	b.n	8002f3c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d01a      	beq.n	8002f78 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	2251      	movs	r2, #81	@ 0x51
 8002f46:	2100      	movs	r1, #0
 8002f48:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f4a:	1dbb      	adds	r3, r7, #6
 8002f4c:	881a      	ldrh	r2, [r3, #0]
 8002f4e:	683c      	ldr	r4, [r7, #0]
 8002f50:	68b9      	ldr	r1, [r7, #8]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	2300      	movs	r3, #0
 8002f56:	9303      	str	r3, [sp, #12]
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	9302      	str	r3, [sp, #8]
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5e:	9301      	str	r3, [sp, #4]
 8002f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	0023      	movs	r3, r4
 8002f66:	f000 f80f 	bl	8002f88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f000 f885 	bl	800307c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61bb      	str	r3, [r7, #24]
 8002f76:	e002      	b.n	8002f7e <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	425b      	negs	r3, r3
 8002f7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
	}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b009      	add	sp, #36	@ 0x24
 8002f86:	bd90      	pop	{r4, r7, pc}

08002f88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4936      	ldr	r1, [pc, #216]	@ (8003078 <prvInitialiseNewTask+0xf0>)
 8002f9e:	468c      	mov	ip, r1
 8002fa0:	4463      	add	r3, ip
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2207      	movs	r2, #7
 8002fac:	4393      	bics	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d002      	beq.n	8002fbe <prvInitialiseNewTask+0x36>
 8002fb8:	b672      	cpsid	i
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	e7fd      	b.n	8002fba <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	e013      	b.n	8002fec <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	18d3      	adds	r3, r2, r3
 8002fca:	7818      	ldrb	r0, [r3, #0]
 8002fcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fce:	2134      	movs	r1, #52	@ 0x34
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	18d3      	adds	r3, r2, r3
 8002fd4:	185b      	adds	r3, r3, r1
 8002fd6:	1c02      	adds	r2, r0, #0
 8002fd8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	18d3      	adds	r3, r2, r3
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	617b      	str	r3, [r7, #20]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b0f      	cmp	r3, #15
 8002ff0:	d9e8      	bls.n	8002fc4 <prvInitialiseNewTask+0x3c>
 8002ff2:	e000      	b.n	8002ff6 <prvInitialiseNewTask+0x6e>
		{
			break;
 8002ff4:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff8:	2243      	movs	r2, #67	@ 0x43
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ffe:	6a3b      	ldr	r3, [r7, #32]
 8003000:	2b06      	cmp	r3, #6
 8003002:	d901      	bls.n	8003008 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003004:	2306      	movs	r3, #6
 8003006:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	6a3a      	ldr	r2, [r7, #32]
 800300c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800300e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003010:	6a3a      	ldr	r2, [r7, #32]
 8003012:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	2200      	movs	r2, #0
 8003018:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800301a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800301c:	3304      	adds	r3, #4
 800301e:	0018      	movs	r0, r3
 8003020:	f7ff fb4a 	bl	80026b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	3318      	adds	r3, #24
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff fb45 	bl	80026b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003032:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003034:	6a3b      	ldr	r3, [r7, #32]
 8003036:	2207      	movs	r2, #7
 8003038:	1ad2      	subs	r2, r2, r3
 800303a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003042:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003046:	2200      	movs	r2, #0
 8003048:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800304a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304c:	2250      	movs	r2, #80	@ 0x50
 800304e:	2100      	movs	r1, #0
 8003050:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	68f9      	ldr	r1, [r7, #12]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fd13 	bl	8003a84 <pxPortInitialiseStack>
 800305e:	0002      	movs	r2, r0
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <prvInitialiseNewTask+0xe8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800306e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003070:	46c0      	nop			@ (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b006      	add	sp, #24
 8003076:	bd80      	pop	{r7, pc}
 8003078:	3fffffff 	.word	0x3fffffff

0800307c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003084:	f000 fd9c 	bl	8003bc0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003088:	4b28      	ldr	r3, [pc, #160]	@ (800312c <prvAddNewTaskToReadyList+0xb0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	4b27      	ldr	r3, [pc, #156]	@ (800312c <prvAddNewTaskToReadyList+0xb0>)
 8003090:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003092:	4b27      	ldr	r3, [pc, #156]	@ (8003130 <prvAddNewTaskToReadyList+0xb4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d109      	bne.n	80030ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800309a:	4b25      	ldr	r3, [pc, #148]	@ (8003130 <prvAddNewTaskToReadyList+0xb4>)
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030a0:	4b22      	ldr	r3, [pc, #136]	@ (800312c <prvAddNewTaskToReadyList+0xb0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d110      	bne.n	80030ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80030a8:	f000 fb5e 	bl	8003768 <prvInitialiseTaskLists>
 80030ac:	e00d      	b.n	80030ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80030ae:	4b21      	ldr	r3, [pc, #132]	@ (8003134 <prvAddNewTaskToReadyList+0xb8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030b6:	4b1e      	ldr	r3, [pc, #120]	@ (8003130 <prvAddNewTaskToReadyList+0xb4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d802      	bhi.n	80030ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80030c4:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <prvAddNewTaskToReadyList+0xb4>)
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80030ca:	4b1b      	ldr	r3, [pc, #108]	@ (8003138 <prvAddNewTaskToReadyList+0xbc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	4b19      	ldr	r3, [pc, #100]	@ (8003138 <prvAddNewTaskToReadyList+0xbc>)
 80030d2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d8:	4b18      	ldr	r3, [pc, #96]	@ (800313c <prvAddNewTaskToReadyList+0xc0>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d903      	bls.n	80030e8 <prvAddNewTaskToReadyList+0x6c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e4:	4b15      	ldr	r3, [pc, #84]	@ (800313c <prvAddNewTaskToReadyList+0xc0>)
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030ec:	0013      	movs	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	189b      	adds	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4a12      	ldr	r2, [pc, #72]	@ (8003140 <prvAddNewTaskToReadyList+0xc4>)
 80030f6:	189a      	adds	r2, r3, r2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	0019      	movs	r1, r3
 80030fe:	0010      	movs	r0, r2
 8003100:	f7ff fae5 	bl	80026ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003104:	f000 fd6e 	bl	8003be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003108:	4b0a      	ldr	r3, [pc, #40]	@ (8003134 <prvAddNewTaskToReadyList+0xb8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d008      	beq.n	8003122 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003110:	4b07      	ldr	r3, [pc, #28]	@ (8003130 <prvAddNewTaskToReadyList+0xb4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311a:	429a      	cmp	r2, r3
 800311c:	d201      	bcs.n	8003122 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800311e:	f000 fd3f 	bl	8003ba0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b002      	add	sp, #8
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	20000438 	.word	0x20000438
 8003130:	20000338 	.word	0x20000338
 8003134:	20000444 	.word	0x20000444
 8003138:	20000454 	.word	0x20000454
 800313c:	20000440 	.word	0x20000440
 8003140:	2000033c 	.word	0x2000033c

08003144 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d011      	beq.n	800317a <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003156:	4b0d      	ldr	r3, [pc, #52]	@ (800318c <vTaskDelay+0x48>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <vTaskDelay+0x20>
 800315e:	b672      	cpsid	i
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	e7fd      	b.n	8003160 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8003164:	f000 f862 	bl	800322c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2100      	movs	r1, #0
 800316c:	0018      	movs	r0, r3
 800316e:	f000 fc35 	bl	80039dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003172:	f000 f867 	bl	8003244 <xTaskResumeAll>
 8003176:	0003      	movs	r3, r0
 8003178:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8003180:	f000 fd0e 	bl	8003ba0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003184:	46c0      	nop			@ (mov r8, r8)
 8003186:	46bd      	mov	sp, r7
 8003188:	b004      	add	sp, #16
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20000460 	.word	0x20000460

08003190 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	@ 0x24
 8003194:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800319e:	003a      	movs	r2, r7
 80031a0:	1d39      	adds	r1, r7, #4
 80031a2:	2308      	movs	r3, #8
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7fd f83a 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80031ac:	683c      	ldr	r4, [r7, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68ba      	ldr	r2, [r7, #8]
 80031b2:	4918      	ldr	r1, [pc, #96]	@ (8003214 <vTaskStartScheduler+0x84>)
 80031b4:	4818      	ldr	r0, [pc, #96]	@ (8003218 <vTaskStartScheduler+0x88>)
 80031b6:	9202      	str	r2, [sp, #8]
 80031b8:	9301      	str	r3, [sp, #4]
 80031ba:	2300      	movs	r3, #0
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	2300      	movs	r3, #0
 80031c0:	0022      	movs	r2, r4
 80031c2:	f7ff fe4f 	bl	8002e64 <xTaskCreateStatic>
 80031c6:	0002      	movs	r2, r0
 80031c8:	4b14      	ldr	r3, [pc, #80]	@ (800321c <vTaskStartScheduler+0x8c>)
 80031ca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <vTaskStartScheduler+0x8c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80031d4:	2301      	movs	r3, #1
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	e001      	b.n	80031de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d10d      	bne.n	8003200 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80031e4:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80031e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003220 <vTaskStartScheduler+0x90>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	4252      	negs	r2, r2
 80031ec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80031ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003224 <vTaskStartScheduler+0x94>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <vTaskStartScheduler+0x98>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80031fa:	f000 fcad 	bl	8003b58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80031fe:	e005      	b.n	800320c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3301      	adds	r3, #1
 8003204:	d102      	bne.n	800320c <vTaskStartScheduler+0x7c>
 8003206:	b672      	cpsid	i
 8003208:	46c0      	nop			@ (mov r8, r8)
 800320a:	e7fd      	b.n	8003208 <vTaskStartScheduler+0x78>
}
 800320c:	46c0      	nop			@ (mov r8, r8)
 800320e:	46bd      	mov	sp, r7
 8003210:	b005      	add	sp, #20
 8003212:	bd90      	pop	{r4, r7, pc}
 8003214:	08004110 	.word	0x08004110
 8003218:	08003749 	.word	0x08003749
 800321c:	2000045c 	.word	0x2000045c
 8003220:	20000458 	.word	0x20000458
 8003224:	20000444 	.word	0x20000444
 8003228:	2000043c 	.word	0x2000043c

0800322c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003230:	4b03      	ldr	r3, [pc, #12]	@ (8003240 <vTaskSuspendAll+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	1c5a      	adds	r2, r3, #1
 8003236:	4b02      	ldr	r3, [pc, #8]	@ (8003240 <vTaskSuspendAll+0x14>)
 8003238:	601a      	str	r2, [r3, #0]
}
 800323a:	46c0      	nop			@ (mov r8, r8)
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	20000460 	.word	0x20000460

08003244 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003252:	4b3a      	ldr	r3, [pc, #232]	@ (800333c <xTaskResumeAll+0xf8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d102      	bne.n	8003260 <xTaskResumeAll+0x1c>
 800325a:	b672      	cpsid	i
 800325c:	46c0      	nop			@ (mov r8, r8)
 800325e:	e7fd      	b.n	800325c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003260:	f000 fcae 	bl	8003bc0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003264:	4b35      	ldr	r3, [pc, #212]	@ (800333c <xTaskResumeAll+0xf8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	1e5a      	subs	r2, r3, #1
 800326a:	4b34      	ldr	r3, [pc, #208]	@ (800333c <xTaskResumeAll+0xf8>)
 800326c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326e:	4b33      	ldr	r3, [pc, #204]	@ (800333c <xTaskResumeAll+0xf8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d15b      	bne.n	800332e <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003276:	4b32      	ldr	r3, [pc, #200]	@ (8003340 <xTaskResumeAll+0xfc>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d057      	beq.n	800332e <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800327e:	e02f      	b.n	80032e0 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003280:	4b30      	ldr	r3, [pc, #192]	@ (8003344 <xTaskResumeAll+0x100>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	3318      	adds	r3, #24
 800328c:	0018      	movs	r0, r3
 800328e:	f7ff fa76 	bl	800277e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3304      	adds	r3, #4
 8003296:	0018      	movs	r0, r3
 8003298:	f7ff fa71 	bl	800277e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a0:	4b29      	ldr	r3, [pc, #164]	@ (8003348 <xTaskResumeAll+0x104>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d903      	bls.n	80032b0 <xTaskResumeAll+0x6c>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032ac:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <xTaskResumeAll+0x104>)
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032b4:	0013      	movs	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	189b      	adds	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4a23      	ldr	r2, [pc, #140]	@ (800334c <xTaskResumeAll+0x108>)
 80032be:	189a      	adds	r2, r3, r2
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3304      	adds	r3, #4
 80032c4:	0019      	movs	r1, r3
 80032c6:	0010      	movs	r0, r2
 80032c8:	f7ff fa01 	bl	80026ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003350 <xTaskResumeAll+0x10c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d302      	bcc.n	80032e0 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80032da:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <xTaskResumeAll+0x110>)
 80032dc:	2201      	movs	r2, #1
 80032de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032e0:	4b18      	ldr	r3, [pc, #96]	@ (8003344 <xTaskResumeAll+0x100>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1cb      	bne.n	8003280 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032ee:	f000 fad7 	bl	80038a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80032f2:	4b19      	ldr	r3, [pc, #100]	@ (8003358 <xTaskResumeAll+0x114>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00f      	beq.n	800331e <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032fe:	f000 f82d 	bl	800335c <xTaskIncrementTick>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d002      	beq.n	800330c <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8003306:	4b13      	ldr	r3, [pc, #76]	@ (8003354 <xTaskResumeAll+0x110>)
 8003308:	2201      	movs	r2, #1
 800330a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1f2      	bne.n	80032fe <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8003318:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <xTaskResumeAll+0x114>)
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800331e:	4b0d      	ldr	r3, [pc, #52]	@ (8003354 <xTaskResumeAll+0x110>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003326:	2301      	movs	r3, #1
 8003328:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800332a:	f000 fc39 	bl	8003ba0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800332e:	f000 fc59 	bl	8003be4 <vPortExitCritical>

	return xAlreadyYielded;
 8003332:	68bb      	ldr	r3, [r7, #8]
}
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	b004      	add	sp, #16
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000460 	.word	0x20000460
 8003340:	20000438 	.word	0x20000438
 8003344:	200003f8 	.word	0x200003f8
 8003348:	20000440 	.word	0x20000440
 800334c:	2000033c 	.word	0x2000033c
 8003350:	20000338 	.word	0x20000338
 8003354:	2000044c 	.word	0x2000044c
 8003358:	20000448 	.word	0x20000448

0800335c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003362:	2300      	movs	r3, #0
 8003364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003366:	4b4d      	ldr	r3, [pc, #308]	@ (800349c <xTaskIncrementTick+0x140>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d000      	beq.n	8003370 <xTaskIncrementTick+0x14>
 800336e:	e084      	b.n	800347a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003370:	4b4b      	ldr	r3, [pc, #300]	@ (80034a0 <xTaskIncrementTick+0x144>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3301      	adds	r3, #1
 8003376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003378:	4b49      	ldr	r3, [pc, #292]	@ (80034a0 <xTaskIncrementTick+0x144>)
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d118      	bne.n	80033b6 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003384:	4b47      	ldr	r3, [pc, #284]	@ (80034a4 <xTaskIncrementTick+0x148>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <xTaskIncrementTick+0x38>
 800338e:	b672      	cpsid	i
 8003390:	46c0      	nop			@ (mov r8, r8)
 8003392:	e7fd      	b.n	8003390 <xTaskIncrementTick+0x34>
 8003394:	4b43      	ldr	r3, [pc, #268]	@ (80034a4 <xTaskIncrementTick+0x148>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	4b43      	ldr	r3, [pc, #268]	@ (80034a8 <xTaskIncrementTick+0x14c>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b41      	ldr	r3, [pc, #260]	@ (80034a4 <xTaskIncrementTick+0x148>)
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	4b41      	ldr	r3, [pc, #260]	@ (80034a8 <xTaskIncrementTick+0x14c>)
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	4b40      	ldr	r3, [pc, #256]	@ (80034ac <xTaskIncrementTick+0x150>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	1c5a      	adds	r2, r3, #1
 80033ae:	4b3f      	ldr	r3, [pc, #252]	@ (80034ac <xTaskIncrementTick+0x150>)
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f000 fa75 	bl	80038a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033b6:	4b3e      	ldr	r3, [pc, #248]	@ (80034b0 <xTaskIncrementTick+0x154>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d34e      	bcc.n	800345e <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033c0:	4b38      	ldr	r3, [pc, #224]	@ (80034a4 <xTaskIncrementTick+0x148>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <xTaskIncrementTick+0x72>
 80033ca:	2301      	movs	r3, #1
 80033cc:	e000      	b.n	80033d0 <xTaskIncrementTick+0x74>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d004      	beq.n	80033de <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033d4:	4b36      	ldr	r3, [pc, #216]	@ (80034b0 <xTaskIncrementTick+0x154>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	4252      	negs	r2, r2
 80033da:	601a      	str	r2, [r3, #0]
					break;
 80033dc:	e03f      	b.n	800345e <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033de:	4b31      	ldr	r3, [pc, #196]	@ (80034a4 <xTaskIncrementTick+0x148>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d203      	bcs.n	80033fe <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033f6:	4b2e      	ldr	r3, [pc, #184]	@ (80034b0 <xTaskIncrementTick+0x154>)
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	601a      	str	r2, [r3, #0]
						break;
 80033fc:	e02f      	b.n	800345e <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	3304      	adds	r3, #4
 8003402:	0018      	movs	r0, r3
 8003404:	f7ff f9bb 	bl	800277e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800340c:	2b00      	cmp	r3, #0
 800340e:	d004      	beq.n	800341a <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	3318      	adds	r3, #24
 8003414:	0018      	movs	r0, r3
 8003416:	f7ff f9b2 	bl	800277e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341e:	4b25      	ldr	r3, [pc, #148]	@ (80034b4 <xTaskIncrementTick+0x158>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d903      	bls.n	800342e <xTaskIncrementTick+0xd2>
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800342a:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <xTaskIncrementTick+0x158>)
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003432:	0013      	movs	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	189b      	adds	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <xTaskIncrementTick+0x15c>)
 800343c:	189a      	adds	r2, r3, r2
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3304      	adds	r3, #4
 8003442:	0019      	movs	r1, r3
 8003444:	0010      	movs	r0, r2
 8003446:	f7ff f942 	bl	80026ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800344e:	4b1b      	ldr	r3, [pc, #108]	@ (80034bc <xTaskIncrementTick+0x160>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003454:	429a      	cmp	r2, r3
 8003456:	d3b3      	bcc.n	80033c0 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8003458:	2301      	movs	r3, #1
 800345a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800345c:	e7b0      	b.n	80033c0 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800345e:	4b17      	ldr	r3, [pc, #92]	@ (80034bc <xTaskIncrementTick+0x160>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003464:	4914      	ldr	r1, [pc, #80]	@ (80034b8 <xTaskIncrementTick+0x15c>)
 8003466:	0013      	movs	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	189b      	adds	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	585b      	ldr	r3, [r3, r1]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d907      	bls.n	8003484 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8003474:	2301      	movs	r3, #1
 8003476:	617b      	str	r3, [r7, #20]
 8003478:	e004      	b.n	8003484 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800347a:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <xTaskIncrementTick+0x164>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <xTaskIncrementTick+0x164>)
 8003482:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003484:	4b0f      	ldr	r3, [pc, #60]	@ (80034c4 <xTaskIncrementTick+0x168>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 800348c:	2301      	movs	r3, #1
 800348e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003490:	697b      	ldr	r3, [r7, #20]
}
 8003492:	0018      	movs	r0, r3
 8003494:	46bd      	mov	sp, r7
 8003496:	b006      	add	sp, #24
 8003498:	bd80      	pop	{r7, pc}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	20000460 	.word	0x20000460
 80034a0:	2000043c 	.word	0x2000043c
 80034a4:	200003f0 	.word	0x200003f0
 80034a8:	200003f4 	.word	0x200003f4
 80034ac:	20000450 	.word	0x20000450
 80034b0:	20000458 	.word	0x20000458
 80034b4:	20000440 	.word	0x20000440
 80034b8:	2000033c 	.word	0x2000033c
 80034bc:	20000338 	.word	0x20000338
 80034c0:	20000448 	.word	0x20000448
 80034c4:	2000044c 	.word	0x2000044c

080034c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034ce:	4b22      	ldr	r3, [pc, #136]	@ (8003558 <vTaskSwitchContext+0x90>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034d6:	4b21      	ldr	r3, [pc, #132]	@ (800355c <vTaskSwitchContext+0x94>)
 80034d8:	2201      	movs	r2, #1
 80034da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034dc:	e038      	b.n	8003550 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 80034de:	4b1f      	ldr	r3, [pc, #124]	@ (800355c <vTaskSwitchContext+0x94>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80034e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003560 <vTaskSwitchContext+0x98>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	e008      	b.n	80034fe <vTaskSwitchContext+0x36>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <vTaskSwitchContext+0x30>
 80034f2:	b672      	cpsid	i
 80034f4:	46c0      	nop			@ (mov r8, r8)
 80034f6:	e7fd      	b.n	80034f4 <vTaskSwitchContext+0x2c>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	4919      	ldr	r1, [pc, #100]	@ (8003564 <vTaskSwitchContext+0x9c>)
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	0013      	movs	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	189b      	adds	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	585b      	ldr	r3, [r3, r1]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ed      	beq.n	80034ec <vTaskSwitchContext+0x24>
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	0013      	movs	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	189b      	adds	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4a12      	ldr	r2, [pc, #72]	@ (8003564 <vTaskSwitchContext+0x9c>)
 800351c:	189b      	adds	r3, r3, r2
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	3308      	adds	r3, #8
 8003532:	429a      	cmp	r2, r3
 8003534:	d104      	bne.n	8003540 <vTaskSwitchContext+0x78>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	605a      	str	r2, [r3, #4]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <vTaskSwitchContext+0xa0>)
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <vTaskSwitchContext+0x98>)
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	601a      	str	r2, [r3, #0]
}
 8003550:	46c0      	nop			@ (mov r8, r8)
 8003552:	46bd      	mov	sp, r7
 8003554:	b002      	add	sp, #8
 8003556:	bd80      	pop	{r7, pc}
 8003558:	20000460 	.word	0x20000460
 800355c:	2000044c 	.word	0x2000044c
 8003560:	20000440 	.word	0x20000440
 8003564:	2000033c 	.word	0x2000033c
 8003568:	20000338 	.word	0x20000338

0800356c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d102      	bne.n	8003582 <vTaskPlaceOnEventList+0x16>
 800357c:	b672      	cpsid	i
 800357e:	46c0      	nop			@ (mov r8, r8)
 8003580:	e7fd      	b.n	800357e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003582:	4b09      	ldr	r3, [pc, #36]	@ (80035a8 <vTaskPlaceOnEventList+0x3c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3318      	adds	r3, #24
 8003588:	001a      	movs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0011      	movs	r1, r2
 800358e:	0018      	movs	r0, r3
 8003590:	f7ff f8bf 	bl	8002712 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2101      	movs	r1, #1
 8003598:	0018      	movs	r0, r3
 800359a:	f000 fa1f 	bl	80039dc <prvAddCurrentTaskToDelayedList>
}
 800359e:	46c0      	nop			@ (mov r8, r8)
 80035a0:	46bd      	mov	sp, r7
 80035a2:	b002      	add	sp, #8
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	46c0      	nop			@ (mov r8, r8)
 80035a8:	20000338 	.word	0x20000338

080035ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d102      	bne.n	80035c8 <xTaskRemoveFromEventList+0x1c>
 80035c2:	b672      	cpsid	i
 80035c4:	46c0      	nop			@ (mov r8, r8)
 80035c6:	e7fd      	b.n	80035c4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	3318      	adds	r3, #24
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7ff f8d6 	bl	800277e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003650 <xTaskRemoveFromEventList+0xa4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11d      	bne.n	8003616 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3304      	adds	r3, #4
 80035de:	0018      	movs	r0, r3
 80035e0:	f7ff f8cd 	bl	800277e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <xTaskRemoveFromEventList+0xa8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d903      	bls.n	80035f8 <xTaskRemoveFromEventList+0x4c>
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	4b17      	ldr	r3, [pc, #92]	@ (8003654 <xTaskRemoveFromEventList+0xa8>)
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fc:	0013      	movs	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	189b      	adds	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4a14      	ldr	r2, [pc, #80]	@ (8003658 <xTaskRemoveFromEventList+0xac>)
 8003606:	189a      	adds	r2, r3, r2
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	3304      	adds	r3, #4
 800360c:	0019      	movs	r1, r3
 800360e:	0010      	movs	r0, r2
 8003610:	f7ff f85d 	bl	80026ce <vListInsertEnd>
 8003614:	e007      	b.n	8003626 <xTaskRemoveFromEventList+0x7a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	3318      	adds	r3, #24
 800361a:	001a      	movs	r2, r3
 800361c:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <xTaskRemoveFromEventList+0xb0>)
 800361e:	0011      	movs	r1, r2
 8003620:	0018      	movs	r0, r3
 8003622:	f7ff f854 	bl	80026ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362a:	4b0d      	ldr	r3, [pc, #52]	@ (8003660 <xTaskRemoveFromEventList+0xb4>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	429a      	cmp	r2, r3
 8003632:	d905      	bls.n	8003640 <xTaskRemoveFromEventList+0x94>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003634:	2301      	movs	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003638:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <xTaskRemoveFromEventList+0xb8>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e001      	b.n	8003644 <xTaskRemoveFromEventList+0x98>
	}
	else
	{
		xReturn = pdFALSE;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003644:	68fb      	ldr	r3, [r7, #12]
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	20000460 	.word	0x20000460
 8003654:	20000440 	.word	0x20000440
 8003658:	2000033c 	.word	0x2000033c
 800365c:	200003f8 	.word	0x200003f8
 8003660:	20000338 	.word	0x20000338
 8003664:	2000044c 	.word	0x2000044c

08003668 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003670:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <vTaskInternalSetTimeOutState+0x20>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003678:	4b04      	ldr	r3, [pc, #16]	@ (800368c <vTaskInternalSetTimeOutState+0x24>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	605a      	str	r2, [r3, #4]
}
 8003680:	46c0      	nop			@ (mov r8, r8)
 8003682:	46bd      	mov	sp, r7
 8003684:	b002      	add	sp, #8
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000450 	.word	0x20000450
 800368c:	2000043c 	.word	0x2000043c

08003690 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <xTaskCheckForTimeOut+0x16>
 80036a0:	b672      	cpsid	i
 80036a2:	46c0      	nop			@ (mov r8, r8)
 80036a4:	e7fd      	b.n	80036a2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d102      	bne.n	80036b2 <xTaskCheckForTimeOut+0x22>
 80036ac:	b672      	cpsid	i
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	e7fd      	b.n	80036ae <xTaskCheckForTimeOut+0x1e>

	taskENTER_CRITICAL();
 80036b2:	f000 fa85 	bl	8003bc0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80036b6:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <xTaskCheckForTimeOut+0x9c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	d102      	bne.n	80036d4 <xTaskCheckForTimeOut+0x44>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e024      	b.n	800371e <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	4b15      	ldr	r3, [pc, #84]	@ (8003730 <xTaskCheckForTimeOut+0xa0>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d007      	beq.n	80036f0 <xTaskCheckForTimeOut+0x60>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d302      	bcc.n	80036f0 <xTaskCheckForTimeOut+0x60>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80036ea:	2301      	movs	r3, #1
 80036ec:	617b      	str	r3, [r7, #20]
 80036ee:	e016      	b.n	800371e <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d20c      	bcs.n	8003714 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1ad2      	subs	r2, r2, r3
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	0018      	movs	r0, r3
 800370a:	f7ff ffad 	bl	8003668 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	e004      	b.n	800371e <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800371a:	2301      	movs	r3, #1
 800371c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800371e:	f000 fa61 	bl	8003be4 <vPortExitCritical>

	return xReturn;
 8003722:	697b      	ldr	r3, [r7, #20]
}
 8003724:	0018      	movs	r0, r3
 8003726:	46bd      	mov	sp, r7
 8003728:	b006      	add	sp, #24
 800372a:	bd80      	pop	{r7, pc}
 800372c:	2000043c 	.word	0x2000043c
 8003730:	20000450 	.word	0x20000450

08003734 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003738:	4b02      	ldr	r3, [pc, #8]	@ (8003744 <vTaskMissedYield+0x10>)
 800373a:	2201      	movs	r2, #1
 800373c:	601a      	str	r2, [r3, #0]
}
 800373e:	46c0      	nop			@ (mov r8, r8)
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	2000044c 	.word	0x2000044c

08003748 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003750:	f000 f84e 	bl	80037f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003754:	4b03      	ldr	r3, [pc, #12]	@ (8003764 <prvIdleTask+0x1c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d9f9      	bls.n	8003750 <prvIdleTask+0x8>
			{
				taskYIELD();
 800375c:	f000 fa20 	bl	8003ba0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8003760:	e7f6      	b.n	8003750 <prvIdleTask+0x8>
 8003762:	46c0      	nop			@ (mov r8, r8)
 8003764:	2000033c 	.word	0x2000033c

08003768 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	e00c      	b.n	800378e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	0013      	movs	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	189b      	adds	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <prvInitialiseTaskLists+0x68>)
 8003780:	189b      	adds	r3, r3, r2
 8003782:	0018      	movs	r0, r3
 8003784:	f7fe ff7a 	bl	800267c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b06      	cmp	r3, #6
 8003792:	d9ef      	bls.n	8003774 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003794:	4b0f      	ldr	r3, [pc, #60]	@ (80037d4 <prvInitialiseTaskLists+0x6c>)
 8003796:	0018      	movs	r0, r3
 8003798:	f7fe ff70 	bl	800267c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800379c:	4b0e      	ldr	r3, [pc, #56]	@ (80037d8 <prvInitialiseTaskLists+0x70>)
 800379e:	0018      	movs	r0, r3
 80037a0:	f7fe ff6c 	bl	800267c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80037a4:	4b0d      	ldr	r3, [pc, #52]	@ (80037dc <prvInitialiseTaskLists+0x74>)
 80037a6:	0018      	movs	r0, r3
 80037a8:	f7fe ff68 	bl	800267c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80037ac:	4b0c      	ldr	r3, [pc, #48]	@ (80037e0 <prvInitialiseTaskLists+0x78>)
 80037ae:	0018      	movs	r0, r3
 80037b0:	f7fe ff64 	bl	800267c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80037b4:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <prvInitialiseTaskLists+0x7c>)
 80037b6:	0018      	movs	r0, r3
 80037b8:	f7fe ff60 	bl	800267c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80037bc:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <prvInitialiseTaskLists+0x80>)
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <prvInitialiseTaskLists+0x6c>)
 80037c0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <prvInitialiseTaskLists+0x84>)
 80037c4:	4a04      	ldr	r2, [pc, #16]	@ (80037d8 <prvInitialiseTaskLists+0x70>)
 80037c6:	601a      	str	r2, [r3, #0]
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	b002      	add	sp, #8
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	2000033c 	.word	0x2000033c
 80037d4:	200003c8 	.word	0x200003c8
 80037d8:	200003dc 	.word	0x200003dc
 80037dc:	200003f8 	.word	0x200003f8
 80037e0:	2000040c 	.word	0x2000040c
 80037e4:	20000424 	.word	0x20000424
 80037e8:	200003f0 	.word	0x200003f0
 80037ec:	200003f4 	.word	0x200003f4

080037f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037f6:	e01a      	b.n	800382e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80037f8:	f000 f9e2 	bl	8003bc0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037fc:	4b10      	ldr	r3, [pc, #64]	@ (8003840 <prvCheckTasksWaitingTermination+0x50>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3304      	adds	r3, #4
 8003808:	0018      	movs	r0, r3
 800380a:	f7fe ffb8 	bl	800277e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800380e:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <prvCheckTasksWaitingTermination+0x54>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	1e5a      	subs	r2, r3, #1
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <prvCheckTasksWaitingTermination+0x54>)
 8003816:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003818:	4b0b      	ldr	r3, [pc, #44]	@ (8003848 <prvCheckTasksWaitingTermination+0x58>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	1e5a      	subs	r2, r3, #1
 800381e:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <prvCheckTasksWaitingTermination+0x58>)
 8003820:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8003822:	f000 f9df 	bl	8003be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0018      	movs	r0, r3
 800382a:	f000 f80f 	bl	800384c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800382e:	4b06      	ldr	r3, [pc, #24]	@ (8003848 <prvCheckTasksWaitingTermination+0x58>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e0      	bne.n	80037f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	46c0      	nop			@ (mov r8, r8)
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}
 8003840:	2000040c 	.word	0x2000040c
 8003844:	20000438 	.word	0x20000438
 8003848:	20000420 	.word	0x20000420

0800384c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2251      	movs	r2, #81	@ 0x51
 8003858:	5c9b      	ldrb	r3, [r3, r2]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	0018      	movs	r0, r3
 8003864:	f000 faec 	bl	8003e40 <vPortFree>
				vPortFree( pxTCB );
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 fae8 	bl	8003e40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003870:	e011      	b.n	8003896 <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2251      	movs	r2, #81	@ 0x51
 8003876:	5c9b      	ldrb	r3, [r3, r2]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d104      	bne.n	8003886 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	0018      	movs	r0, r3
 8003880:	f000 fade 	bl	8003e40 <vPortFree>
	}
 8003884:	e007      	b.n	8003896 <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2251      	movs	r2, #81	@ 0x51
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d002      	beq.n	8003896 <prvDeleteTCB+0x4a>
 8003890:	b672      	cpsid	i
 8003892:	46c0      	nop			@ (mov r8, r8)
 8003894:	e7fd      	b.n	8003892 <prvDeleteTCB+0x46>
	}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038a6:	4b0e      	ldr	r3, [pc, #56]	@ (80038e0 <prvResetNextTaskUnblockTime+0x40>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <prvResetNextTaskUnblockTime+0x14>
 80038b0:	2301      	movs	r3, #1
 80038b2:	e000      	b.n	80038b6 <prvResetNextTaskUnblockTime+0x16>
 80038b4:	2300      	movs	r3, #0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d004      	beq.n	80038c4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80038ba:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <prvResetNextTaskUnblockTime+0x44>)
 80038bc:	2201      	movs	r2, #1
 80038be:	4252      	negs	r2, r2
 80038c0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80038c2:	e008      	b.n	80038d6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <prvResetNextTaskUnblockTime+0x40>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	4b04      	ldr	r3, [pc, #16]	@ (80038e4 <prvResetNextTaskUnblockTime+0x44>)
 80038d4:	601a      	str	r2, [r3, #0]
}
 80038d6:	46c0      	nop			@ (mov r8, r8)
 80038d8:	46bd      	mov	sp, r7
 80038da:	b002      	add	sp, #8
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	46c0      	nop			@ (mov r8, r8)
 80038e0:	200003f0 	.word	0x200003f0
 80038e4:	20000458 	.word	0x20000458

080038e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80038ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <xTaskGetSchedulerState+0x30>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80038f6:	2301      	movs	r3, #1
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	e008      	b.n	800390e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038fc:	4b07      	ldr	r3, [pc, #28]	@ (800391c <xTaskGetSchedulerState+0x34>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003904:	2302      	movs	r3, #2
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	e001      	b.n	800390e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800390a:	2300      	movs	r3, #0
 800390c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800390e:	687b      	ldr	r3, [r7, #4]
	}
 8003910:	0018      	movs	r0, r3
 8003912:	46bd      	mov	sp, r7
 8003914:	b002      	add	sp, #8
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000444 	.word	0x20000444
 800391c:	20000460 	.word	0x20000460

08003920 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d046      	beq.n	80039c4 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003936:	4b26      	ldr	r3, [pc, #152]	@ (80039d0 <xTaskPriorityDisinherit+0xb0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	429a      	cmp	r2, r3
 800393e:	d002      	beq.n	8003946 <xTaskPriorityDisinherit+0x26>
 8003940:	b672      	cpsid	i
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	e7fd      	b.n	8003942 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394a:	2b00      	cmp	r3, #0
 800394c:	d102      	bne.n	8003954 <xTaskPriorityDisinherit+0x34>
 800394e:	b672      	cpsid	i
 8003950:	46c0      	nop			@ (mov r8, r8)
 8003952:	e7fd      	b.n	8003950 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003958:	1e5a      	subs	r2, r3, #1
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003966:	429a      	cmp	r2, r3
 8003968:	d02c      	beq.n	80039c4 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800396e:	2b00      	cmp	r3, #0
 8003970:	d128      	bne.n	80039c4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	3304      	adds	r3, #4
 8003976:	0018      	movs	r0, r3
 8003978:	f7fe ff01 	bl	800277e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003988:	2207      	movs	r2, #7
 800398a:	1ad2      	subs	r2, r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003994:	4b0f      	ldr	r3, [pc, #60]	@ (80039d4 <xTaskPriorityDisinherit+0xb4>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d903      	bls.n	80039a4 <xTaskPriorityDisinherit+0x84>
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a0:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <xTaskPriorityDisinherit+0xb4>)
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a8:	0013      	movs	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	189b      	adds	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4a09      	ldr	r2, [pc, #36]	@ (80039d8 <xTaskPriorityDisinherit+0xb8>)
 80039b2:	189a      	adds	r2, r3, r2
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	3304      	adds	r3, #4
 80039b8:	0019      	movs	r1, r3
 80039ba:	0010      	movs	r0, r2
 80039bc:	f7fe fe87 	bl	80026ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80039c0:	2301      	movs	r3, #1
 80039c2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80039c4:	68fb      	ldr	r3, [r7, #12]
	}
 80039c6:	0018      	movs	r0, r3
 80039c8:	46bd      	mov	sp, r7
 80039ca:	b004      	add	sp, #16
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	46c0      	nop			@ (mov r8, r8)
 80039d0:	20000338 	.word	0x20000338
 80039d4:	20000440 	.word	0x20000440
 80039d8:	2000033c 	.word	0x2000033c

080039dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80039e6:	4b21      	ldr	r3, [pc, #132]	@ (8003a6c <prvAddCurrentTaskToDelayedList+0x90>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039ec:	4b20      	ldr	r3, [pc, #128]	@ (8003a70 <prvAddCurrentTaskToDelayedList+0x94>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	3304      	adds	r3, #4
 80039f2:	0018      	movs	r0, r3
 80039f4:	f7fe fec3 	bl	800277e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	3301      	adds	r3, #1
 80039fc:	d10b      	bne.n	8003a16 <prvAddCurrentTaskToDelayedList+0x3a>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a04:	4b1a      	ldr	r3, [pc, #104]	@ (8003a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	1d1a      	adds	r2, r3, #4
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <prvAddCurrentTaskToDelayedList+0x98>)
 8003a0c:	0011      	movs	r1, r2
 8003a0e:	0018      	movs	r0, r3
 8003a10:	f7fe fe5d 	bl	80026ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003a14:	e026      	b.n	8003a64 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	18d3      	adds	r3, r2, r3
 8003a1c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a1e:	4b14      	ldr	r3, [pc, #80]	@ (8003a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003a26:	68ba      	ldr	r2, [r7, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d209      	bcs.n	8003a42 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a2e:	4b12      	ldr	r3, [pc, #72]	@ (8003a78 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b0f      	ldr	r3, [pc, #60]	@ (8003a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3304      	adds	r3, #4
 8003a38:	0019      	movs	r1, r3
 8003a3a:	0010      	movs	r0, r2
 8003a3c:	f7fe fe69 	bl	8002712 <vListInsert>
}
 8003a40:	e010      	b.n	8003a64 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a42:	4b0e      	ldr	r3, [pc, #56]	@ (8003a7c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b0a      	ldr	r3, [pc, #40]	@ (8003a70 <prvAddCurrentTaskToDelayedList+0x94>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3304      	adds	r3, #4
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	0010      	movs	r0, r2
 8003a50:	f7fe fe5f 	bl	8002712 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003a54:	4b0a      	ldr	r3, [pc, #40]	@ (8003a80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d202      	bcs.n	8003a64 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003a5e:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	601a      	str	r2, [r3, #0]
}
 8003a64:	46c0      	nop			@ (mov r8, r8)
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b004      	add	sp, #16
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	2000043c 	.word	0x2000043c
 8003a70:	20000338 	.word	0x20000338
 8003a74:	20000424 	.word	0x20000424
 8003a78:	200003f4 	.word	0x200003f4
 8003a7c:	200003f0 	.word	0x200003f0
 8003a80:	20000458 	.word	0x20000458

08003a84 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3b04      	subs	r3, #4
 8003a94:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2280      	movs	r2, #128	@ 0x80
 8003a9a:	0452      	lsls	r2, r2, #17
 8003a9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	3b04      	subs	r3, #4
 8003aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	3b04      	subs	r3, #4
 8003aae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ab0:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <pxPortInitialiseStack+0x50>)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	3b14      	subs	r3, #20
 8003aba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3b20      	subs	r3, #32
 8003ac6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	08003ad9 	.word	0x08003ad9

08003ad8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ae2:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <prvTaskExitError+0x2c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	d002      	beq.n	8003af0 <prvTaskExitError+0x18>
 8003aea:	b672      	cpsid	i
 8003aec:	46c0      	nop			@ (mov r8, r8)
 8003aee:	e7fd      	b.n	8003aec <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003af0:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0fc      	beq.n	8003af4 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	46c0      	nop			@ (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b002      	add	sp, #8
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	2000000c 	.word	0x2000000c

08003b08 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8003b0c:	46c0      	nop			@ (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003b20:	4a0b      	ldr	r2, [pc, #44]	@ (8003b50 <pxCurrentTCBConst2>)
 8003b22:	6813      	ldr	r3, [r2, #0]
 8003b24:	6818      	ldr	r0, [r3, #0]
 8003b26:	3020      	adds	r0, #32
 8003b28:	f380 8809 	msr	PSP, r0
 8003b2c:	2002      	movs	r0, #2
 8003b2e:	f380 8814 	msr	CONTROL, r0
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003b38:	46ae      	mov	lr, r5
 8003b3a:	bc08      	pop	{r3}
 8003b3c:	bc04      	pop	{r2}
 8003b3e:	b662      	cpsie	i
 8003b40:	4718      	bx	r3
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46c0      	nop			@ (mov r8, r8)
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46c0      	nop			@ (mov r8, r8)
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	46c0      	nop			@ (mov r8, r8)
 8003b4e:	46c0      	nop			@ (mov r8, r8)

08003b50 <pxCurrentTCBConst2>:
 8003b50:	20000338 	.word	0x20000338
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	46c0      	nop			@ (mov r8, r8)

08003b58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b98 <xPortStartScheduler+0x40>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	4b0d      	ldr	r3, [pc, #52]	@ (8003b98 <xPortStartScheduler+0x40>)
 8003b62:	21ff      	movs	r1, #255	@ 0xff
 8003b64:	0409      	lsls	r1, r1, #16
 8003b66:	430a      	orrs	r2, r1
 8003b68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <xPortStartScheduler+0x40>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b98 <xPortStartScheduler+0x40>)
 8003b70:	21ff      	movs	r1, #255	@ 0xff
 8003b72:	0609      	lsls	r1, r1, #24
 8003b74:	430a      	orrs	r2, r1
 8003b76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8003b78:	f000 f898 	bl	8003cac <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003b7c:	4b07      	ldr	r3, [pc, #28]	@ (8003b9c <xPortStartScheduler+0x44>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8003b82:	f7ff ffcd 	bl	8003b20 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003b86:	f7ff fc9f 	bl	80034c8 <vTaskSwitchContext>
	prvTaskExitError();
 8003b8a:	f7ff ffa5 	bl	8003ad8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	0018      	movs	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			@ (mov r8, r8)
 8003b98:	e000ed20 	.word	0xe000ed20
 8003b9c:	2000000c 	.word	0x2000000c

08003ba0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <vPortYield+0x1c>)
 8003ba6:	2280      	movs	r2, #128	@ 0x80
 8003ba8:	0552      	lsls	r2, r2, #21
 8003baa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8003bac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003bb0:	f3bf 8f6f 	isb	sy
}
 8003bb4:	46c0      	nop			@ (mov r8, r8)
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	e000ed04 	.word	0xe000ed04

08003bc0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003bc4:	b672      	cpsid	i
    uxCriticalNesting++;
 8003bc6:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <vPortEnterCritical+0x20>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	4b04      	ldr	r3, [pc, #16]	@ (8003be0 <vPortEnterCritical+0x20>)
 8003bce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003bd0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003bd4:	f3bf 8f6f 	isb	sy
}
 8003bd8:	46c0      	nop			@ (mov r8, r8)
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	46c0      	nop			@ (mov r8, r8)
 8003be0:	2000000c 	.word	0x2000000c

08003be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003be8:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <vPortExitCritical+0x2c>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <vPortExitCritical+0x12>
 8003bf0:	b672      	cpsid	i
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	e7fd      	b.n	8003bf2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003bf6:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <vPortExitCritical+0x2c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	1e5a      	subs	r2, r3, #1
 8003bfc:	4b04      	ldr	r3, [pc, #16]	@ (8003c10 <vPortExitCritical+0x2c>)
 8003bfe:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003c00:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <vPortExitCritical+0x2c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d100      	bne.n	8003c0a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8003c08:	b662      	cpsie	i
    }
}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	2000000c 	.word	0x2000000c

08003c14 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003c14:	f3ef 8010 	mrs	r0, PRIMASK
 8003c18:	b672      	cpsid	i
 8003c1a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	0018      	movs	r0, r3

08003c20 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003c20:	f380 8810 	msr	PRIMASK, r0
 8003c24:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003c26:	46c0      	nop			@ (mov r8, r8)
	...

08003c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003c30:	f3ef 8009 	mrs	r0, PSP
 8003c34:	4b0e      	ldr	r3, [pc, #56]	@ (8003c70 <pxCurrentTCBConst>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	3820      	subs	r0, #32
 8003c3a:	6010      	str	r0, [r2, #0]
 8003c3c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003c3e:	4644      	mov	r4, r8
 8003c40:	464d      	mov	r5, r9
 8003c42:	4656      	mov	r6, sl
 8003c44:	465f      	mov	r7, fp
 8003c46:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8003c48:	b508      	push	{r3, lr}
 8003c4a:	b672      	cpsid	i
 8003c4c:	f7ff fc3c 	bl	80034c8 <vTaskSwitchContext>
 8003c50:	b662      	cpsie	i
 8003c52:	bc0c      	pop	{r2, r3}
 8003c54:	6811      	ldr	r1, [r2, #0]
 8003c56:	6808      	ldr	r0, [r1, #0]
 8003c58:	3010      	adds	r0, #16
 8003c5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003c5c:	46a0      	mov	r8, r4
 8003c5e:	46a9      	mov	r9, r5
 8003c60:	46b2      	mov	sl, r6
 8003c62:	46bb      	mov	fp, r7
 8003c64:	f380 8809 	msr	PSP, r0
 8003c68:	3820      	subs	r0, #32
 8003c6a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8003c6c:	4718      	bx	r3
 8003c6e:	46c0      	nop			@ (mov r8, r8)

08003c70 <pxCurrentTCBConst>:
 8003c70:	20000338 	.word	0x20000338
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8003c74:	46c0      	nop			@ (mov r8, r8)
 8003c76:	46c0      	nop			@ (mov r8, r8)

08003c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c7e:	f7ff ffc9 	bl	8003c14 <ulSetInterruptMaskFromISR>
 8003c82:	0003      	movs	r3, r0
 8003c84:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003c86:	f7ff fb69 	bl	800335c <xTaskIncrementTick>
 8003c8a:	1e03      	subs	r3, r0, #0
 8003c8c:	d003      	beq.n	8003c96 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8003c8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ca8 <SysTick_Handler+0x30>)
 8003c90:	2280      	movs	r2, #128	@ 0x80
 8003c92:	0552      	lsls	r2, r2, #21
 8003c94:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	0018      	movs	r0, r3
 8003c9a:	f7ff ffc1 	bl	8003c20 <vClearInterruptMaskFromISR>
}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b002      	add	sp, #8
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <prvSetupTimerInterrupt+0x34>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <prvSetupTimerInterrupt+0x38>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce8 <prvSetupTimerInterrupt+0x3c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	22fa      	movs	r2, #250	@ 0xfa
 8003cc2:	0091      	lsls	r1, r2, #2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7fc fa1f 	bl	8000108 <__udivsi3>
 8003cca:	0003      	movs	r3, r0
 8003ccc:	001a      	movs	r2, r3
 8003cce:	4b07      	ldr	r3, [pc, #28]	@ (8003cec <prvSetupTimerInterrupt+0x40>)
 8003cd0:	3a01      	subs	r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003cd4:	4b02      	ldr	r3, [pc, #8]	@ (8003ce0 <prvSetupTimerInterrupt+0x34>)
 8003cd6:	2207      	movs	r2, #7
 8003cd8:	601a      	str	r2, [r3, #0]
}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	e000e010 	.word	0xe000e010
 8003ce4:	e000e018 	.word	0xe000e018
 8003ce8:	20000000 	.word	0x20000000
 8003cec:	e000e014 	.word	0xe000e014

08003cf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b086      	sub	sp, #24
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8003cfc:	f7ff fa96 	bl	800322c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003d00:	4b4a      	ldr	r3, [pc, #296]	@ (8003e2c <pvPortMalloc+0x13c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d101      	bne.n	8003d0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003d08:	f000 f8e4 	bl	8003ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003d0c:	4b48      	ldr	r3, [pc, #288]	@ (8003e30 <pvPortMalloc+0x140>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	4013      	ands	r3, r2
 8003d14:	d000      	beq.n	8003d18 <pvPortMalloc+0x28>
 8003d16:	e07b      	b.n	8003e10 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d013      	beq.n	8003d46 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 8003d1e:	2208      	movs	r2, #8
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	189b      	adds	r3, r3, r2
 8003d24:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2207      	movs	r2, #7
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d00b      	beq.n	8003d46 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2207      	movs	r2, #7
 8003d32:	4393      	bics	r3, r2
 8003d34:	3308      	adds	r3, #8
 8003d36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2207      	movs	r2, #7
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d002      	beq.n	8003d46 <pvPortMalloc+0x56>
 8003d40:	b672      	cpsid	i
 8003d42:	46c0      	nop			@ (mov r8, r8)
 8003d44:	e7fd      	b.n	8003d42 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d061      	beq.n	8003e10 <pvPortMalloc+0x120>
 8003d4c:	4b39      	ldr	r3, [pc, #228]	@ (8003e34 <pvPortMalloc+0x144>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d85c      	bhi.n	8003e10 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003d56:	4b38      	ldr	r3, [pc, #224]	@ (8003e38 <pvPortMalloc+0x148>)
 8003d58:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8003d5a:	4b37      	ldr	r3, [pc, #220]	@ (8003e38 <pvPortMalloc+0x148>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d60:	e004      	b.n	8003d6c <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d903      	bls.n	8003d7e <pvPortMalloc+0x8e>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f1      	bne.n	8003d62 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003e2c <pvPortMalloc+0x13c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d043      	beq.n	8003e10 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	1ad2      	subs	r2, r2, r3
 8003da2:	2308      	movs	r3, #8
 8003da4:	005b      	lsls	r3, r3, #1
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d917      	bls.n	8003dda <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	18d3      	adds	r3, r2, r3
 8003db0:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2207      	movs	r2, #7
 8003db6:	4013      	ands	r3, r2
 8003db8:	d002      	beq.n	8003dc0 <pvPortMalloc+0xd0>
 8003dba:	b672      	cpsid	i
 8003dbc:	46c0      	nop			@ (mov r8, r8)
 8003dbe:	e7fd      	b.n	8003dbc <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	0018      	movs	r0, r3
 8003dd6:	f000 f8dd 	bl	8003f94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003dda:	4b16      	ldr	r3, [pc, #88]	@ (8003e34 <pvPortMalloc+0x144>)
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	1ad2      	subs	r2, r2, r3
 8003de4:	4b13      	ldr	r3, [pc, #76]	@ (8003e34 <pvPortMalloc+0x144>)
 8003de6:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003de8:	4b12      	ldr	r3, [pc, #72]	@ (8003e34 <pvPortMalloc+0x144>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4b13      	ldr	r3, [pc, #76]	@ (8003e3c <pvPortMalloc+0x14c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d203      	bcs.n	8003dfc <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003df4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e34 <pvPortMalloc+0x144>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b10      	ldr	r3, [pc, #64]	@ (8003e3c <pvPortMalloc+0x14c>)
 8003dfa:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	685a      	ldr	r2, [r3, #4]
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <pvPortMalloc+0x140>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003e10:	f7ff fa18 	bl	8003244 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2207      	movs	r2, #7
 8003e18:	4013      	ands	r3, r2
 8003e1a:	d002      	beq.n	8003e22 <pvPortMalloc+0x132>
 8003e1c:	b672      	cpsid	i
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	e7fd      	b.n	8003e1e <pvPortMalloc+0x12e>
	return pvReturn;
 8003e22:	68fb      	ldr	r3, [r7, #12]
}
 8003e24:	0018      	movs	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b006      	add	sp, #24
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	2000106c 	.word	0x2000106c
 8003e30:	20001078 	.word	0x20001078
 8003e34:	20001070 	.word	0x20001070
 8003e38:	20001064 	.word	0x20001064
 8003e3c:	20001074 	.word	0x20001074

08003e40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d037      	beq.n	8003ec2 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e52:	2308      	movs	r3, #8
 8003e54:	425b      	negs	r3, r3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	18d3      	adds	r3, r2, r3
 8003e5a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	4b19      	ldr	r3, [pc, #100]	@ (8003ecc <vPortFree+0x8c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d102      	bne.n	8003e72 <vPortFree+0x32>
 8003e6c:	b672      	cpsid	i
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	e7fd      	b.n	8003e6e <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <vPortFree+0x40>
 8003e7a:	b672      	cpsid	i
 8003e7c:	46c0      	nop			@ (mov r8, r8)
 8003e7e:	e7fd      	b.n	8003e7c <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	4b11      	ldr	r3, [pc, #68]	@ (8003ecc <vPortFree+0x8c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d01a      	beq.n	8003ec2 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d116      	bne.n	8003ec2 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	685a      	ldr	r2, [r3, #4]
 8003e98:	4b0c      	ldr	r3, [pc, #48]	@ (8003ecc <vPortFree+0x8c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	43db      	mvns	r3, r3
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003ea4:	f7ff f9c2 	bl	800322c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	4b08      	ldr	r3, [pc, #32]	@ (8003ed0 <vPortFree+0x90>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	18d2      	adds	r2, r2, r3
 8003eb2:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <vPortFree+0x90>)
 8003eb4:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f000 f86b 	bl	8003f94 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003ebe:	f7ff f9c1 	bl	8003244 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ec2:	46c0      	nop			@ (mov r8, r8)
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b004      	add	sp, #16
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			@ (mov r8, r8)
 8003ecc:	20001078 	.word	0x20001078
 8003ed0:	20001070 	.word	0x20001070

08003ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003eda:	23c0      	movs	r3, #192	@ 0xc0
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ee0:	4b26      	ldr	r3, [pc, #152]	@ (8003f7c <prvHeapInit+0xa8>)
 8003ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	4013      	ands	r3, r2
 8003eea:	d00c      	beq.n	8003f06 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3307      	adds	r3, #7
 8003ef0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2207      	movs	r2, #7
 8003ef6:	4393      	bics	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	1ad2      	subs	r2, r2, r3
 8003f00:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <prvHeapInit+0xa8>)
 8003f02:	18d3      	adds	r3, r2, r3
 8003f04:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003f80 <prvHeapInit+0xac>)
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f10:	4b1b      	ldr	r3, [pc, #108]	@ (8003f80 <prvHeapInit+0xac>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	18d3      	adds	r3, r2, r3
 8003f1c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f1e:	2208      	movs	r2, #8
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2207      	movs	r2, #7
 8003f2a:	4393      	bics	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4b14      	ldr	r3, [pc, #80]	@ (8003f84 <prvHeapInit+0xb0>)
 8003f32:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003f34:	4b13      	ldr	r3, [pc, #76]	@ (8003f84 <prvHeapInit+0xb0>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f3c:	4b11      	ldr	r3, [pc, #68]	@ (8003f84 <prvHeapInit+0xb0>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	1ad2      	subs	r2, r2, r3
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f52:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <prvHeapInit+0xb0>)
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003f88 <prvHeapInit+0xb4>)
 8003f60:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	4b09      	ldr	r3, [pc, #36]	@ (8003f8c <prvHeapInit+0xb8>)
 8003f68:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f6a:	4b09      	ldr	r3, [pc, #36]	@ (8003f90 <prvHeapInit+0xbc>)
 8003f6c:	2280      	movs	r2, #128	@ 0x80
 8003f6e:	0612      	lsls	r2, r2, #24
 8003f70:	601a      	str	r2, [r3, #0]
}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b004      	add	sp, #16
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	46c0      	nop			@ (mov r8, r8)
 8003f7c:	20000464 	.word	0x20000464
 8003f80:	20001064 	.word	0x20001064
 8003f84:	2000106c 	.word	0x2000106c
 8003f88:	20001074 	.word	0x20001074
 8003f8c:	20001070 	.word	0x20001070
 8003f90:	20001078 	.word	0x20001078

08003f94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f9c:	4b27      	ldr	r3, [pc, #156]	@ (800403c <prvInsertBlockIntoFreeList+0xa8>)
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e002      	b.n	8003fa8 <prvInsertBlockIntoFreeList+0x14>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d8f7      	bhi.n	8003fa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	18d3      	adds	r3, r2, r3
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d108      	bne.n	8003fd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	18d2      	adds	r2, r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	18d2      	adds	r2, r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d118      	bne.n	800401c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	4b14      	ldr	r3, [pc, #80]	@ (8004040 <prvInsertBlockIntoFreeList+0xac>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d00d      	beq.n	8004012 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	18d2      	adds	r2, r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	e008      	b.n	8004024 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004012:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <prvInsertBlockIntoFreeList+0xac>)
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e003      	b.n	8004024 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	d002      	beq.n	8004032 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	20001064 	.word	0x20001064
 8004040:	2000106c 	.word	0x2000106c

08004044 <memset>:
 8004044:	0003      	movs	r3, r0
 8004046:	1882      	adds	r2, r0, r2
 8004048:	4293      	cmp	r3, r2
 800404a:	d100      	bne.n	800404e <memset+0xa>
 800404c:	4770      	bx	lr
 800404e:	7019      	strb	r1, [r3, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	e7f9      	b.n	8004048 <memset+0x4>

08004054 <__libc_init_array>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	2600      	movs	r6, #0
 8004058:	4c0c      	ldr	r4, [pc, #48]	@ (800408c <__libc_init_array+0x38>)
 800405a:	4d0d      	ldr	r5, [pc, #52]	@ (8004090 <__libc_init_array+0x3c>)
 800405c:	1b64      	subs	r4, r4, r5
 800405e:	10a4      	asrs	r4, r4, #2
 8004060:	42a6      	cmp	r6, r4
 8004062:	d109      	bne.n	8004078 <__libc_init_array+0x24>
 8004064:	2600      	movs	r6, #0
 8004066:	f000 f823 	bl	80040b0 <_init>
 800406a:	4c0a      	ldr	r4, [pc, #40]	@ (8004094 <__libc_init_array+0x40>)
 800406c:	4d0a      	ldr	r5, [pc, #40]	@ (8004098 <__libc_init_array+0x44>)
 800406e:	1b64      	subs	r4, r4, r5
 8004070:	10a4      	asrs	r4, r4, #2
 8004072:	42a6      	cmp	r6, r4
 8004074:	d105      	bne.n	8004082 <__libc_init_array+0x2e>
 8004076:	bd70      	pop	{r4, r5, r6, pc}
 8004078:	00b3      	lsls	r3, r6, #2
 800407a:	58eb      	ldr	r3, [r5, r3]
 800407c:	4798      	blx	r3
 800407e:	3601      	adds	r6, #1
 8004080:	e7ee      	b.n	8004060 <__libc_init_array+0xc>
 8004082:	00b3      	lsls	r3, r6, #2
 8004084:	58eb      	ldr	r3, [r5, r3]
 8004086:	4798      	blx	r3
 8004088:	3601      	adds	r6, #1
 800408a:	e7f2      	b.n	8004072 <__libc_init_array+0x1e>
 800408c:	08004150 	.word	0x08004150
 8004090:	08004150 	.word	0x08004150
 8004094:	08004154 	.word	0x08004154
 8004098:	08004150 	.word	0x08004150

0800409c <memcpy>:
 800409c:	2300      	movs	r3, #0
 800409e:	b510      	push	{r4, lr}
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d100      	bne.n	80040a6 <memcpy+0xa>
 80040a4:	bd10      	pop	{r4, pc}
 80040a6:	5ccc      	ldrb	r4, [r1, r3]
 80040a8:	54c4      	strb	r4, [r0, r3]
 80040aa:	3301      	adds	r3, #1
 80040ac:	e7f8      	b.n	80040a0 <memcpy+0x4>
	...

080040b0 <_init>:
 80040b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b2:	46c0      	nop			@ (mov r8, r8)
 80040b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040b6:	bc08      	pop	{r3}
 80040b8:	469e      	mov	lr, r3
 80040ba:	4770      	bx	lr

080040bc <_fini>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr
