
doorCam.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003654  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003714  08003714  00004714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003788  08003788  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003788  08003788  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003788  08003788  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003788  08003788  00004788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800378c  0800378c  0000478c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003790  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001068  20000010  080037a0  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001078  080037a0  00005078  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e28c  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000278c  00000000  00000000  000132c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00015a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c54  00000000  00000000  00016a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012f34  00000000  00000000  0001769c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f90  00000000  00000000  0002a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00076243  00000000  00000000  0003c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b27a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038b0  00000000  00000000  000b27e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000b6098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036fc 	.word	0x080036fc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080036fc 	.word	0x080036fc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a06      	ldr	r2, [pc, #24]	@ (8000248 <vApplicationGetIdleTaskMemory+0x28>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a05      	ldr	r2, [pc, #20]	@ (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	@ 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	46c0      	nop			@ (mov r8, r8)
 8000240:	46bd      	mov	sp, r7
 8000242:	b004      	add	sp, #16
 8000244:	bd80      	pop	{r7, pc}
 8000246:	46c0      	nop			@ (mov r8, r8)
 8000248:	2000002c 	.word	0x2000002c
 800024c:	20000080 	.word	0x20000080

08000250 <vSPITestTask>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vSPITestTask(){
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
	uint8_t testData = 1;
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	2201      	movs	r2, #1
 800025a:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1) {
 800025c:	2380      	movs	r3, #128	@ 0x80
 800025e:	019b      	lsls	r3, r3, #6
 8000260:	4a11      	ldr	r2, [pc, #68]	@ (80002a8 <vSPITestTask+0x58>)
 8000262:	0019      	movs	r1, r3
 8000264:	0010      	movs	r0, r2
 8000266:	f000 fdbb 	bl	8000de0 <HAL_GPIO_ReadPin>
 800026a:	0003      	movs	r3, r0
 800026c:	2b01      	cmp	r3, #1
 800026e:	d110      	bne.n	8000292 <vSPITestTask+0x42>
		HAL_SPI_Transmit(&hspi1, testData, 1, 1000);
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	0019      	movs	r1, r3
 8000276:	23fa      	movs	r3, #250	@ 0xfa
 8000278:	009b      	lsls	r3, r3, #2
 800027a:	480c      	ldr	r0, [pc, #48]	@ (80002ac <vSPITestTask+0x5c>)
 800027c:	2201      	movs	r2, #1
 800027e:	f001 fb29 	bl	80018d4 <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000282:	2380      	movs	r3, #128	@ 0x80
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	4808      	ldr	r0, [pc, #32]	@ (80002a8 <vSPITestTask+0x58>)
 8000288:	2201      	movs	r2, #1
 800028a:	0019      	movs	r1, r3
 800028c:	f000 fdc5 	bl	8000e1a <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
	}

}
 8000290:	e006      	b.n	80002a0 <vSPITestTask+0x50>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000292:	2380      	movs	r3, #128	@ 0x80
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	4804      	ldr	r0, [pc, #16]	@ (80002a8 <vSPITestTask+0x58>)
 8000298:	2200      	movs	r2, #0
 800029a:	0019      	movs	r1, r3
 800029c:	f000 fdbd 	bl	8000e1a <HAL_GPIO_WritePin>
}
 80002a0:	46c0      	nop			@ (mov r8, r8)
 80002a2:	46bd      	mov	sp, r7
 80002a4:	b002      	add	sp, #8
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	48000800 	.word	0x48000800
 80002ac:	20000280 	.word	0x20000280

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b590      	push	{r4, r7, lr}
 80002b2:	b08b      	sub	sp, #44	@ 0x2c
 80002b4:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	xTaskCreate(vSPITestTask, "SPI_Test", 16, NULL, 1, NULL);
 80002b6:	4913      	ldr	r1, [pc, #76]	@ (8000304 <main+0x54>)
 80002b8:	4813      	ldr	r0, [pc, #76]	@ (8000308 <main+0x58>)
 80002ba:	2300      	movs	r3, #0
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2301      	movs	r3, #1
 80002c0:	9300      	str	r3, [sp, #0]
 80002c2:	2300      	movs	r3, #0
 80002c4:	2210      	movs	r2, #16
 80002c6:	f002 faaa 	bl	800281e <xTaskCreate>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002ca:	f000 faf7 	bl	80008bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ce:	f000 f821 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002d2:	f000 f8a7 	bl	8000424 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002d6:	f000 f867 	bl	80003a8 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80002da:	1d3b      	adds	r3, r7, #4
 80002dc:	4a0b      	ldr	r2, [pc, #44]	@ (800030c <main+0x5c>)
 80002de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002e0:	c313      	stmia	r3!, {r0, r1, r4}
 80002e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80002e4:	c313      	stmia	r3!, {r0, r1, r4}
 80002e6:	6812      	ldr	r2, [r2, #0]
 80002e8:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	2100      	movs	r1, #0
 80002ee:	0018      	movs	r0, r3
 80002f0:	f002 f945 	bl	800257e <osThreadCreate>
 80002f4:	0002      	movs	r2, r0
 80002f6:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <main+0x60>)
 80002f8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002fa:	f002 f938 	bl	800256e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002fe:	46c0      	nop			@ (mov r8, r8)
 8000300:	e7fd      	b.n	80002fe <main+0x4e>
 8000302:	46c0      	nop			@ (mov r8, r8)
 8000304:	08003714 	.word	0x08003714
 8000308:	08000251 	.word	0x08000251
 800030c:	0800372c 	.word	0x0800372c
 8000310:	200002e4 	.word	0x200002e4

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b091      	sub	sp, #68	@ 0x44
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	2410      	movs	r4, #16
 800031c:	193b      	adds	r3, r7, r4
 800031e:	0018      	movs	r0, r3
 8000320:	2330      	movs	r3, #48	@ 0x30
 8000322:	001a      	movs	r2, r3
 8000324:	2100      	movs	r1, #0
 8000326:	f003 f9bd 	bl	80036a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800032a:	003b      	movs	r3, r7
 800032c:	0018      	movs	r0, r3
 800032e:	2310      	movs	r3, #16
 8000330:	001a      	movs	r2, r3
 8000332:	2100      	movs	r1, #0
 8000334:	f003 f9b6 	bl	80036a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000338:	0021      	movs	r1, r4
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2202      	movs	r2, #2
 800033e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2201      	movs	r2, #1
 8000344:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2210      	movs	r2, #16
 800034a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2202      	movs	r2, #2
 8000350:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2200      	movs	r2, #0
 8000356:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000358:	187b      	adds	r3, r7, r1
 800035a:	22a0      	movs	r2, #160	@ 0xa0
 800035c:	0392      	lsls	r2, r2, #14
 800035e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000360:	187b      	adds	r3, r7, r1
 8000362:	2200      	movs	r2, #0
 8000364:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000366:	187b      	adds	r3, r7, r1
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fd73 	bl	8000e54 <HAL_RCC_OscConfig>
 800036e:	1e03      	subs	r3, r0, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000372:	f000 f923 	bl	80005bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000376:	003b      	movs	r3, r7
 8000378:	2207      	movs	r2, #7
 800037a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800037c:	003b      	movs	r3, r7
 800037e:	2202      	movs	r2, #2
 8000380:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000382:	003b      	movs	r3, r7
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000388:	003b      	movs	r3, r7
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800038e:	003b      	movs	r3, r7
 8000390:	2101      	movs	r1, #1
 8000392:	0018      	movs	r0, r3
 8000394:	f001 f878 	bl	8001488 <HAL_RCC_ClockConfig>
 8000398:	1e03      	subs	r3, r0, #0
 800039a:	d001      	beq.n	80003a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800039c:	f000 f90e 	bl	80005bc <Error_Handler>
  }
}
 80003a0:	46c0      	nop			@ (mov r8, r8)
 80003a2:	46bd      	mov	sp, r7
 80003a4:	b011      	add	sp, #68	@ 0x44
 80003a6:	bd90      	pop	{r4, r7, pc}

080003a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003ac:	4b1b      	ldr	r3, [pc, #108]	@ (800041c <MX_SPI1_Init+0x74>)
 80003ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000420 <MX_SPI1_Init+0x78>)
 80003b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003b2:	4b1a      	ldr	r3, [pc, #104]	@ (800041c <MX_SPI1_Init+0x74>)
 80003b4:	2282      	movs	r2, #130	@ 0x82
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ba:	4b18      	ldr	r3, [pc, #96]	@ (800041c <MX_SPI1_Init+0x74>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c0:	4b16      	ldr	r3, [pc, #88]	@ (800041c <MX_SPI1_Init+0x74>)
 80003c2:	22e0      	movs	r2, #224	@ 0xe0
 80003c4:	00d2      	lsls	r2, r2, #3
 80003c6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003c8:	4b14      	ldr	r3, [pc, #80]	@ (800041c <MX_SPI1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003ce:	4b13      	ldr	r3, [pc, #76]	@ (800041c <MX_SPI1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80003d4:	4b11      	ldr	r3, [pc, #68]	@ (800041c <MX_SPI1_Init+0x74>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003da:	4b10      	ldr	r3, [pc, #64]	@ (800041c <MX_SPI1_Init+0x74>)
 80003dc:	2208      	movs	r2, #8
 80003de:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e0:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <MX_SPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003e6:	4b0d      	ldr	r3, [pc, #52]	@ (800041c <MX_SPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003ec:	4b0b      	ldr	r3, [pc, #44]	@ (800041c <MX_SPI1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003f2:	4b0a      	ldr	r3, [pc, #40]	@ (800041c <MX_SPI1_Init+0x74>)
 80003f4:	2207      	movs	r2, #7
 80003f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003f8:	4b08      	ldr	r3, [pc, #32]	@ (800041c <MX_SPI1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003fe:	4b07      	ldr	r3, [pc, #28]	@ (800041c <MX_SPI1_Init+0x74>)
 8000400:	2208      	movs	r2, #8
 8000402:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000404:	4b05      	ldr	r3, [pc, #20]	@ (800041c <MX_SPI1_Init+0x74>)
 8000406:	0018      	movs	r0, r3
 8000408:	f001 f9ac 	bl	8001764 <HAL_SPI_Init>
 800040c:	1e03      	subs	r3, r0, #0
 800040e:	d001      	beq.n	8000414 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000410:	f000 f8d4 	bl	80005bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000414:	46c0      	nop			@ (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			@ (mov r8, r8)
 800041c:	20000280 	.word	0x20000280
 8000420:	40013000 	.word	0x40013000

08000424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b08b      	sub	sp, #44	@ 0x2c
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	2414      	movs	r4, #20
 800042c:	193b      	adds	r3, r7, r4
 800042e:	0018      	movs	r0, r3
 8000430:	2314      	movs	r3, #20
 8000432:	001a      	movs	r2, r3
 8000434:	2100      	movs	r1, #0
 8000436:	f003 f935 	bl	80036a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043a:	4b50      	ldr	r3, [pc, #320]	@ (800057c <MX_GPIO_Init+0x158>)
 800043c:	695a      	ldr	r2, [r3, #20]
 800043e:	4b4f      	ldr	r3, [pc, #316]	@ (800057c <MX_GPIO_Init+0x158>)
 8000440:	2180      	movs	r1, #128	@ 0x80
 8000442:	0309      	lsls	r1, r1, #12
 8000444:	430a      	orrs	r2, r1
 8000446:	615a      	str	r2, [r3, #20]
 8000448:	4b4c      	ldr	r3, [pc, #304]	@ (800057c <MX_GPIO_Init+0x158>)
 800044a:	695a      	ldr	r2, [r3, #20]
 800044c:	2380      	movs	r3, #128	@ 0x80
 800044e:	031b      	lsls	r3, r3, #12
 8000450:	4013      	ands	r3, r2
 8000452:	613b      	str	r3, [r7, #16]
 8000454:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000456:	4b49      	ldr	r3, [pc, #292]	@ (800057c <MX_GPIO_Init+0x158>)
 8000458:	695a      	ldr	r2, [r3, #20]
 800045a:	4b48      	ldr	r3, [pc, #288]	@ (800057c <MX_GPIO_Init+0x158>)
 800045c:	2180      	movs	r1, #128	@ 0x80
 800045e:	03c9      	lsls	r1, r1, #15
 8000460:	430a      	orrs	r2, r1
 8000462:	615a      	str	r2, [r3, #20]
 8000464:	4b45      	ldr	r3, [pc, #276]	@ (800057c <MX_GPIO_Init+0x158>)
 8000466:	695a      	ldr	r2, [r3, #20]
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	03db      	lsls	r3, r3, #15
 800046c:	4013      	ands	r3, r2
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	4b42      	ldr	r3, [pc, #264]	@ (800057c <MX_GPIO_Init+0x158>)
 8000474:	695a      	ldr	r2, [r3, #20]
 8000476:	4b41      	ldr	r3, [pc, #260]	@ (800057c <MX_GPIO_Init+0x158>)
 8000478:	2180      	movs	r1, #128	@ 0x80
 800047a:	0289      	lsls	r1, r1, #10
 800047c:	430a      	orrs	r2, r1
 800047e:	615a      	str	r2, [r3, #20]
 8000480:	4b3e      	ldr	r3, [pc, #248]	@ (800057c <MX_GPIO_Init+0x158>)
 8000482:	695a      	ldr	r2, [r3, #20]
 8000484:	2380      	movs	r3, #128	@ 0x80
 8000486:	029b      	lsls	r3, r3, #10
 8000488:	4013      	ands	r3, r2
 800048a:	60bb      	str	r3, [r7, #8]
 800048c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b3b      	ldr	r3, [pc, #236]	@ (800057c <MX_GPIO_Init+0x158>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b3a      	ldr	r3, [pc, #232]	@ (800057c <MX_GPIO_Init+0x158>)
 8000494:	2180      	movs	r1, #128	@ 0x80
 8000496:	02c9      	lsls	r1, r1, #11
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b37      	ldr	r3, [pc, #220]	@ (800057c <MX_GPIO_Init+0x158>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	@ 0x80
 80004a2:	02db      	lsls	r3, r3, #11
 80004a4:	4013      	ands	r3, r2
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80004aa:	2390      	movs	r3, #144	@ 0x90
 80004ac:	05db      	lsls	r3, r3, #23
 80004ae:	2200      	movs	r2, #0
 80004b0:	21e0      	movs	r1, #224	@ 0xe0
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 fcb1 	bl	8000e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_PIN_GPIO_Port, LED_PIN_Pin, GPIO_PIN_RESET);
 80004b8:	2380      	movs	r3, #128	@ 0x80
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	4830      	ldr	r0, [pc, #192]	@ (8000580 <MX_GPIO_Init+0x15c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0019      	movs	r1, r3
 80004c2:	f000 fcaa 	bl	8000e1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80004c6:	193b      	adds	r3, r7, r4
 80004c8:	2280      	movs	r2, #128	@ 0x80
 80004ca:	0192      	lsls	r2, r2, #6
 80004cc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ce:	193b      	adds	r3, r7, r4
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	2202      	movs	r2, #2
 80004d8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80004da:	193b      	adds	r3, r7, r4
 80004dc:	4a28      	ldr	r2, [pc, #160]	@ (8000580 <MX_GPIO_Init+0x15c>)
 80004de:	0019      	movs	r1, r3
 80004e0:	0010      	movs	r0, r2
 80004e2:	f000 fb0d 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2230      	movs	r2, #48	@ 0x30
 80004ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2200      	movs	r2, #0
 80004f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	4a22      	ldr	r2, [pc, #136]	@ (8000584 <MX_GPIO_Init+0x160>)
 80004fc:	0019      	movs	r1, r3
 80004fe:	0010      	movs	r0, r2
 8000500:	f000 fafe 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2210      	movs	r2, #16
 8000508:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	193a      	adds	r2, r7, r4
 8000518:	2390      	movs	r3, #144	@ 0x90
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f000 faee 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	22e0      	movs	r2, #224	@ 0xe0
 8000528:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2201      	movs	r2, #1
 800052e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	193b      	adds	r3, r7, r4
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2200      	movs	r2, #0
 800053a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	193a      	adds	r2, r7, r4
 800053e:	2390      	movs	r3, #144	@ 0x90
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f000 fadb 	bl	8000b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_PIN_Pin */
  GPIO_InitStruct.Pin = LED_PIN_Pin;
 800054a:	0021      	movs	r1, r4
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2280      	movs	r2, #128	@ 0x80
 8000550:	0092      	lsls	r2, r2, #2
 8000552:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000554:	187b      	adds	r3, r7, r1
 8000556:	2201      	movs	r2, #1
 8000558:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	187b      	adds	r3, r7, r1
 800055c:	2200      	movs	r2, #0
 800055e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2200      	movs	r2, #0
 8000564:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_PIN_GPIO_Port, &GPIO_InitStruct);
 8000566:	187b      	adds	r3, r7, r1
 8000568:	4a05      	ldr	r2, [pc, #20]	@ (8000580 <MX_GPIO_Init+0x15c>)
 800056a:	0019      	movs	r1, r3
 800056c:	0010      	movs	r0, r2
 800056e:	f000 fac7 	bl	8000b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000572:	46c0      	nop			@ (mov r8, r8)
 8000574:	46bd      	mov	sp, r7
 8000576:	b00b      	add	sp, #44	@ 0x2c
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	40021000 	.word	0x40021000
 8000580:	48000800 	.word	0x48000800
 8000584:	48001400 	.word	0x48001400

08000588 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f002 f841 	bl	8002618 <osDelay>
 8000596:	e7fb      	b.n	8000590 <StartDefaultTask+0x8>

08000598 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a04      	ldr	r2, [pc, #16]	@ (80005b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d101      	bne.n	80005ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80005aa:	f000 f99b 	bl	80008e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	46bd      	mov	sp, r7
 80005b2:	b002      	add	sp, #8
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	40012c00 	.word	0x40012c00

080005bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005c0:	b672      	cpsid	i
}
 80005c2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	e7fd      	b.n	80005c4 <Error_Handler+0x8>

080005c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ce:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_MspInit+0x50>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	4b11      	ldr	r3, [pc, #68]	@ (8000618 <HAL_MspInit+0x50>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	619a      	str	r2, [r3, #24]
 80005da:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <HAL_MspInit+0x50>)
 80005dc:	699b      	ldr	r3, [r3, #24]
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	607b      	str	r3, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <HAL_MspInit+0x50>)
 80005e8:	69da      	ldr	r2, [r3, #28]
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <HAL_MspInit+0x50>)
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	0549      	lsls	r1, r1, #21
 80005f0:	430a      	orrs	r2, r1
 80005f2:	61da      	str	r2, [r3, #28]
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <HAL_MspInit+0x50>)
 80005f6:	69da      	ldr	r2, [r3, #28]
 80005f8:	2380      	movs	r3, #128	@ 0x80
 80005fa:	055b      	lsls	r3, r3, #21
 80005fc:	4013      	ands	r3, r2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000602:	2302      	movs	r3, #2
 8000604:	425b      	negs	r3, r3
 8000606:	2200      	movs	r2, #0
 8000608:	2103      	movs	r1, #3
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fa0e 	bl	8000a2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000610:	46c0      	nop			@ (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	@ 0x2c
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	2414      	movs	r4, #20
 8000626:	193b      	adds	r3, r7, r4
 8000628:	0018      	movs	r0, r3
 800062a:	2314      	movs	r3, #20
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f003 f838 	bl	80036a4 <memset>
  if(hspi->Instance==SPI1)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a32      	ldr	r2, [pc, #200]	@ (8000704 <HAL_SPI_MspInit+0xe8>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d15e      	bne.n	80006fc <HAL_SPI_MspInit+0xe0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800063e:	4b32      	ldr	r3, [pc, #200]	@ (8000708 <HAL_SPI_MspInit+0xec>)
 8000640:	699a      	ldr	r2, [r3, #24]
 8000642:	4b31      	ldr	r3, [pc, #196]	@ (8000708 <HAL_SPI_MspInit+0xec>)
 8000644:	2180      	movs	r1, #128	@ 0x80
 8000646:	0149      	lsls	r1, r1, #5
 8000648:	430a      	orrs	r2, r1
 800064a:	619a      	str	r2, [r3, #24]
 800064c:	4b2e      	ldr	r3, [pc, #184]	@ (8000708 <HAL_SPI_MspInit+0xec>)
 800064e:	699a      	ldr	r2, [r3, #24]
 8000650:	2380      	movs	r3, #128	@ 0x80
 8000652:	015b      	lsls	r3, r3, #5
 8000654:	4013      	ands	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <HAL_SPI_MspInit+0xec>)
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <HAL_SPI_MspInit+0xec>)
 8000660:	2180      	movs	r1, #128	@ 0x80
 8000662:	0289      	lsls	r1, r1, #10
 8000664:	430a      	orrs	r2, r1
 8000666:	615a      	str	r2, [r3, #20]
 8000668:	4b27      	ldr	r3, [pc, #156]	@ (8000708 <HAL_SPI_MspInit+0xec>)
 800066a:	695a      	ldr	r2, [r3, #20]
 800066c:	2380      	movs	r3, #128	@ 0x80
 800066e:	029b      	lsls	r3, r3, #10
 8000670:	4013      	ands	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000676:	4b24      	ldr	r3, [pc, #144]	@ (8000708 <HAL_SPI_MspInit+0xec>)
 8000678:	695a      	ldr	r2, [r3, #20]
 800067a:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <HAL_SPI_MspInit+0xec>)
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	02c9      	lsls	r1, r1, #11
 8000680:	430a      	orrs	r2, r1
 8000682:	615a      	str	r2, [r3, #20]
 8000684:	4b20      	ldr	r3, [pc, #128]	@ (8000708 <HAL_SPI_MspInit+0xec>)
 8000686:	695a      	ldr	r2, [r3, #20]
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	02db      	lsls	r3, r3, #11
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2280      	movs	r2, #128	@ 0x80
 8000696:	0212      	lsls	r2, r2, #8
 8000698:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2202      	movs	r2, #2
 800069e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2203      	movs	r2, #3
 80006aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006ac:	193b      	adds	r3, r7, r4
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	193a      	adds	r2, r7, r4
 80006b4:	2390      	movs	r3, #144	@ 0x90
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	0011      	movs	r1, r2
 80006ba:	0018      	movs	r0, r3
 80006bc:	f000 fa20 	bl	8000b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80006c0:	0021      	movs	r1, r4
 80006c2:	187b      	adds	r3, r7, r1
 80006c4:	2238      	movs	r2, #56	@ 0x38
 80006c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2202      	movs	r2, #2
 80006cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2203      	movs	r2, #3
 80006d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <HAL_SPI_MspInit+0xf0>)
 80006e4:	0019      	movs	r1, r3
 80006e6:	0010      	movs	r0, r2
 80006e8:	f000 fa0a 	bl	8000b00 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2103      	movs	r1, #3
 80006f0:	2019      	movs	r0, #25
 80006f2:	f000 f99b 	bl	8000a2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80006f6:	2019      	movs	r0, #25
 80006f8:	f000 f9ad 	bl	8000a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006fc:	46c0      	nop			@ (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b00b      	add	sp, #44	@ 0x2c
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	40013000 	.word	0x40013000
 8000708:	40021000 	.word	0x40021000
 800070c:	48000400 	.word	0x48000400

08000710 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000710:	b5b0      	push	{r4, r5, r7, lr}
 8000712:	b08c      	sub	sp, #48	@ 0x30
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000718:	2300      	movs	r3, #0
 800071a:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t              uwPrescalerValue = 0U;
 800071c:	2300      	movs	r3, #0
 800071e:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000720:	4b38      	ldr	r3, [pc, #224]	@ (8000804 <HAL_InitTick+0xf4>)
 8000722:	699a      	ldr	r2, [r3, #24]
 8000724:	4b37      	ldr	r3, [pc, #220]	@ (8000804 <HAL_InitTick+0xf4>)
 8000726:	2180      	movs	r1, #128	@ 0x80
 8000728:	0109      	lsls	r1, r1, #4
 800072a:	430a      	orrs	r2, r1
 800072c:	619a      	str	r2, [r3, #24]
 800072e:	4b35      	ldr	r3, [pc, #212]	@ (8000804 <HAL_InitTick+0xf4>)
 8000730:	699a      	ldr	r2, [r3, #24]
 8000732:	2380      	movs	r3, #128	@ 0x80
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	4013      	ands	r3, r2
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800073c:	230c      	movs	r3, #12
 800073e:	18fa      	adds	r2, r7, r3
 8000740:	2410      	movs	r4, #16
 8000742:	193b      	adds	r3, r7, r4
 8000744:	0011      	movs	r1, r2
 8000746:	0018      	movs	r0, r3
 8000748:	f000 ffe2 	bl	8001710 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000754:	2b00      	cmp	r3, #0
 8000756:	d104      	bne.n	8000762 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000758:	f000 ffc4 	bl	80016e4 <HAL_RCC_GetPCLK1Freq>
 800075c:	0003      	movs	r3, r0
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000760:	e004      	b.n	800076c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000762:	f000 ffbf 	bl	80016e4 <HAL_RCC_GetPCLK1Freq>
 8000766:	0003      	movs	r3, r0
 8000768:	005b      	lsls	r3, r3, #1
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800076c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800076e:	4926      	ldr	r1, [pc, #152]	@ (8000808 <HAL_InitTick+0xf8>)
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fcc9 	bl	8000108 <__udivsi3>
 8000776:	0003      	movs	r3, r0
 8000778:	3b01      	subs	r3, #1
 800077a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800077c:	4b23      	ldr	r3, [pc, #140]	@ (800080c <HAL_InitTick+0xfc>)
 800077e:	4a24      	ldr	r2, [pc, #144]	@ (8000810 <HAL_InitTick+0x100>)
 8000780:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000782:	4b22      	ldr	r3, [pc, #136]	@ (800080c <HAL_InitTick+0xfc>)
 8000784:	4a23      	ldr	r2, [pc, #140]	@ (8000814 <HAL_InitTick+0x104>)
 8000786:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000788:	4b20      	ldr	r3, [pc, #128]	@ (800080c <HAL_InitTick+0xfc>)
 800078a:	6a3a      	ldr	r2, [r7, #32]
 800078c:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 800078e:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <HAL_InitTick+0xfc>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000794:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <HAL_InitTick+0xfc>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <HAL_InitTick+0xfc>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80007a0:	252b      	movs	r5, #43	@ 0x2b
 80007a2:	197c      	adds	r4, r7, r5
 80007a4:	4b19      	ldr	r3, [pc, #100]	@ (800080c <HAL_InitTick+0xfc>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f001 fc72 	bl	8002090 <HAL_TIM_Base_Init>
 80007ac:	0003      	movs	r3, r0
 80007ae:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80007b0:	197b      	adds	r3, r7, r5
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d11e      	bne.n	80007f6 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80007b8:	197c      	adds	r4, r7, r5
 80007ba:	4b14      	ldr	r3, [pc, #80]	@ (800080c <HAL_InitTick+0xfc>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fcbf 	bl	8002140 <HAL_TIM_Base_Start_IT>
 80007c2:	0003      	movs	r3, r0
 80007c4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80007c6:	197b      	adds	r3, r7, r5
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d113      	bne.n	80007f6 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80007ce:	200d      	movs	r0, #13
 80007d0:	f000 f941 	bl	8000a56 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d809      	bhi.n	80007ee <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	0019      	movs	r1, r3
 80007e0:	200d      	movs	r0, #13
 80007e2:	f000 f923 	bl	8000a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <HAL_InitTick+0x108>)
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	e003      	b.n	80007f6 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80007ee:	232b      	movs	r3, #43	@ 0x2b
 80007f0:	18fb      	adds	r3, r7, r3
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80007f6:	232b      	movs	r3, #43	@ 0x2b
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	781b      	ldrb	r3, [r3, #0]
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	b00c      	add	sp, #48	@ 0x30
 8000802:	bdb0      	pop	{r4, r5, r7, pc}
 8000804:	40021000 	.word	0x40021000
 8000808:	000f4240 	.word	0x000f4240
 800080c:	200002e8 	.word	0x200002e8
 8000810:	40012c00 	.word	0x40012c00
 8000814:	000003e7 	.word	0x000003e7
 8000818:	20000004 	.word	0x20000004

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	e7fd      	b.n	8000820 <NMI_Handler+0x4>

08000824 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	e7fd      	b.n	8000828 <HardFault_Handler+0x4>

0800082c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000830:	4b03      	ldr	r3, [pc, #12]	@ (8000840 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000832:	0018      	movs	r0, r3
 8000834:	f001 fcd6 	bl	80021e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	200002e8 	.word	0x200002e8

08000844 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000848:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <SPI1_IRQHandler+0x14>)
 800084a:	0018      	movs	r0, r3
 800084c:	f001 f9a2 	bl	8001b94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	20000280 	.word	0x20000280

0800085c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000868:	480d      	ldr	r0, [pc, #52]	@ (80008a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800086a:	4685      	mov	sp, r0
  
  /* Call the clock system initialization function.*/
  bl  SystemInit
 800086c:	f7ff fff6 	bl	800085c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000870:	480c      	ldr	r0, [pc, #48]	@ (80008a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000872:	490d      	ldr	r1, [pc, #52]	@ (80008a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000874:	4a0d      	ldr	r2, [pc, #52]	@ (80008ac <LoopForever+0xe>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000878:	e002      	b.n	8000880 <LoopCopyDataInit>

0800087a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800087a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800087c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800087e:	3304      	adds	r3, #4

08000880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000884:	d3f9      	bcc.n	800087a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000886:	4a0a      	ldr	r2, [pc, #40]	@ (80008b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000888:	4c0a      	ldr	r4, [pc, #40]	@ (80008b4 <LoopForever+0x16>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800088c:	e001      	b.n	8000892 <LoopFillZerobss>

0800088e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800088e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000890:	3204      	adds	r2, #4

08000892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000894:	d3fb      	bcc.n	800088e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000896:	f002 ff0d 	bl	80036b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800089a:	f7ff fd09 	bl	80002b0 <main>

0800089e <LoopForever>:

LoopForever:
    b LoopForever
 800089e:	e7fe      	b.n	800089e <LoopForever>
  ldr   r0, =_estack
 80008a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008ac:	08003790 	.word	0x08003790
  ldr r2, =_sbss
 80008b0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008b4:	20001078 	.word	0x20001078

080008b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008b8:	e7fe      	b.n	80008b8 <ADC1_COMP_IRQHandler>
	...

080008bc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b07      	ldr	r3, [pc, #28]	@ (80008e0 <HAL_Init+0x24>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_Init+0x24>)
 80008c6:	2110      	movs	r1, #16
 80008c8:	430a      	orrs	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f7ff ff1f 	bl	8000710 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d2:	f7ff fe79 	bl	80005c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d6:	2300      	movs	r3, #0
}
 80008d8:	0018      	movs	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	40022000 	.word	0x40022000

080008e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <HAL_IncTick+0x1c>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	001a      	movs	r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_IncTick+0x20>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	18d2      	adds	r2, r2, r3
 80008f4:	4b03      	ldr	r3, [pc, #12]	@ (8000904 <HAL_IncTick+0x20>)
 80008f6:	601a      	str	r2, [r3, #0]
}
 80008f8:	46c0      	nop			@ (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	20000008 	.word	0x20000008
 8000904:	20000330 	.word	0x20000330

08000908 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;
 800090c:	4b02      	ldr	r3, [pc, #8]	@ (8000918 <HAL_GetTick+0x10>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	0018      	movs	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			@ (mov r8, r8)
 8000918:	20000330 	.word	0x20000330

0800091c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	0002      	movs	r2, r0
 8000924:	1dfb      	adds	r3, r7, #7
 8000926:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000928:	1dfb      	adds	r3, r7, #7
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b7f      	cmp	r3, #127	@ 0x7f
 800092e:	d809      	bhi.n	8000944 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	001a      	movs	r2, r3
 8000936:	231f      	movs	r3, #31
 8000938:	401a      	ands	r2, r3
 800093a:	4b04      	ldr	r3, [pc, #16]	@ (800094c <__NVIC_EnableIRQ+0x30>)
 800093c:	2101      	movs	r1, #1
 800093e:	4091      	lsls	r1, r2
 8000940:	000a      	movs	r2, r1
 8000942:	601a      	str	r2, [r3, #0]
  }
}
 8000944:	46c0      	nop			@ (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b002      	add	sp, #8
 800094a:	bd80      	pop	{r7, pc}
 800094c:	e000e100 	.word	0xe000e100

08000950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	0002      	movs	r2, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	1dfb      	adds	r3, r7, #7
 800095c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b7f      	cmp	r3, #127	@ 0x7f
 8000964:	d828      	bhi.n	80009b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000966:	4a2f      	ldr	r2, [pc, #188]	@ (8000a24 <__NVIC_SetPriority+0xd4>)
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b25b      	sxtb	r3, r3
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	33c0      	adds	r3, #192	@ 0xc0
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	589b      	ldr	r3, [r3, r2]
 8000976:	1dfa      	adds	r2, r7, #7
 8000978:	7812      	ldrb	r2, [r2, #0]
 800097a:	0011      	movs	r1, r2
 800097c:	2203      	movs	r2, #3
 800097e:	400a      	ands	r2, r1
 8000980:	00d2      	lsls	r2, r2, #3
 8000982:	21ff      	movs	r1, #255	@ 0xff
 8000984:	4091      	lsls	r1, r2
 8000986:	000a      	movs	r2, r1
 8000988:	43d2      	mvns	r2, r2
 800098a:	401a      	ands	r2, r3
 800098c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	22ff      	movs	r2, #255	@ 0xff
 8000994:	401a      	ands	r2, r3
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0018      	movs	r0, r3
 800099c:	2303      	movs	r3, #3
 800099e:	4003      	ands	r3, r0
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009a4:	481f      	ldr	r0, [pc, #124]	@ (8000a24 <__NVIC_SetPriority+0xd4>)
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	b25b      	sxtb	r3, r3
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	430a      	orrs	r2, r1
 80009b0:	33c0      	adds	r3, #192	@ 0xc0
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009b6:	e031      	b.n	8000a1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a28 <__NVIC_SetPriority+0xd8>)
 80009ba:	1dfb      	adds	r3, r7, #7
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	0019      	movs	r1, r3
 80009c0:	230f      	movs	r3, #15
 80009c2:	400b      	ands	r3, r1
 80009c4:	3b08      	subs	r3, #8
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	3306      	adds	r3, #6
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	3304      	adds	r3, #4
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	1dfa      	adds	r2, r7, #7
 80009d4:	7812      	ldrb	r2, [r2, #0]
 80009d6:	0011      	movs	r1, r2
 80009d8:	2203      	movs	r2, #3
 80009da:	400a      	ands	r2, r1
 80009dc:	00d2      	lsls	r2, r2, #3
 80009de:	21ff      	movs	r1, #255	@ 0xff
 80009e0:	4091      	lsls	r1, r2
 80009e2:	000a      	movs	r2, r1
 80009e4:	43d2      	mvns	r2, r2
 80009e6:	401a      	ands	r2, r3
 80009e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	019b      	lsls	r3, r3, #6
 80009ee:	22ff      	movs	r2, #255	@ 0xff
 80009f0:	401a      	ands	r2, r3
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	0018      	movs	r0, r3
 80009f8:	2303      	movs	r3, #3
 80009fa:	4003      	ands	r3, r0
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a00:	4809      	ldr	r0, [pc, #36]	@ (8000a28 <__NVIC_SetPriority+0xd8>)
 8000a02:	1dfb      	adds	r3, r7, #7
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	001c      	movs	r4, r3
 8000a08:	230f      	movs	r3, #15
 8000a0a:	4023      	ands	r3, r4
 8000a0c:	3b08      	subs	r3, #8
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	430a      	orrs	r2, r1
 8000a12:	3306      	adds	r3, #6
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	18c3      	adds	r3, r0, r3
 8000a18:	3304      	adds	r3, #4
 8000a1a:	601a      	str	r2, [r3, #0]
}
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b003      	add	sp, #12
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	e000e100 	.word	0xe000e100
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60b9      	str	r1, [r7, #8]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	210f      	movs	r1, #15
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	1c02      	adds	r2, r0, #0
 8000a3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	b25b      	sxtb	r3, r3
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ff81 	bl	8000950 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8000a4e:	46c0      	nop			@ (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	0002      	movs	r2, r0
 8000a5e:	1dfb      	adds	r3, r7, #7
 8000a60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b25b      	sxtb	r3, r3
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff ff57 	bl	800091c <__NVIC_EnableIRQ>
}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b002      	add	sp, #8
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b084      	sub	sp, #16
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a7e:	210f      	movs	r1, #15
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2221      	movs	r2, #33	@ 0x21
 8000a8a:	5c9b      	ldrb	r3, [r3, r2]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b02      	cmp	r3, #2
 8000a90:	d006      	beq.n	8000aa0 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2204      	movs	r2, #4
 8000a96:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e028      	b.n	8000af2 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	210e      	movs	r1, #14
 8000aac:	438a      	bics	r2, r1
 8000aae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2101      	movs	r1, #1
 8000abc:	438a      	bics	r2, r1
 8000abe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ac8:	2101      	movs	r1, #1
 8000aca:	4091      	lsls	r1, r2
 8000acc:	000a      	movs	r2, r1
 8000ace:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2221      	movs	r2, #33	@ 0x21
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2220      	movs	r2, #32
 8000adc:	2100      	movs	r1, #0
 8000ade:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d004      	beq.n	8000af2 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aec:	687a      	ldr	r2, [r7, #4]
 8000aee:	0010      	movs	r0, r2
 8000af0:	4798      	blx	r3
    }
  }
  return status;
 8000af2:	230f      	movs	r3, #15
 8000af4:	18fb      	adds	r3, r7, r3
 8000af6:	781b      	ldrb	r3, [r3, #0]
}
 8000af8:	0018      	movs	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b004      	add	sp, #16
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b0e:	e14f      	b.n	8000db0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	2101      	movs	r1, #1
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	4091      	lsls	r1, r2
 8000b1a:	000a      	movs	r2, r1
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d100      	bne.n	8000b28 <HAL_GPIO_Init+0x28>
 8000b26:	e140      	b.n	8000daa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	4013      	ands	r3, r2
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d005      	beq.n	8000b40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2203      	movs	r2, #3
 8000b3a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d130      	bne.n	8000ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	689b      	ldr	r3, [r3, #8]
 8000b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	0013      	movs	r3, r2
 8000b50:	43da      	mvns	r2, r3
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	4013      	ands	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	005b      	lsls	r3, r3, #1
 8000b60:	409a      	lsls	r2, r3
 8000b62:	0013      	movs	r3, r2
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	4313      	orrs	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b76:	2201      	movs	r2, #1
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	401a      	ands	r2, r3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2203      	movs	r2, #3
 8000ba8:	4013      	ands	r3, r2
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d017      	beq.n	8000bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	68db      	ldr	r3, [r3, #12]
 8000bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	2203      	movs	r2, #3
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	693b      	ldr	r3, [r7, #16]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	409a      	lsls	r2, r3
 8000bd0:	0013      	movs	r3, r2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2203      	movs	r2, #3
 8000be4:	4013      	ands	r3, r2
 8000be6:	2b02      	cmp	r3, #2
 8000be8:	d123      	bne.n	8000c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	08da      	lsrs	r2, r3, #3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3208      	adds	r2, #8
 8000bf2:	0092      	lsls	r2, r2, #2
 8000bf4:	58d3      	ldr	r3, [r2, r3]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	2207      	movs	r2, #7
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	220f      	movs	r2, #15
 8000c02:	409a      	lsls	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	43da      	mvns	r2, r3
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	691a      	ldr	r2, [r3, #16]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2107      	movs	r1, #7
 8000c16:	400b      	ands	r3, r1
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	409a      	lsls	r2, r3
 8000c1c:	0013      	movs	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	08da      	lsrs	r2, r3, #3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3208      	adds	r2, #8
 8000c2c:	0092      	lsls	r2, r2, #2
 8000c2e:	6939      	ldr	r1, [r7, #16]
 8000c30:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	43da      	mvns	r2, r3
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	2203      	movs	r2, #3
 8000c50:	401a      	ands	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	409a      	lsls	r2, r3
 8000c58:	0013      	movs	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685a      	ldr	r2, [r3, #4]
 8000c6a:	23c0      	movs	r3, #192	@ 0xc0
 8000c6c:	029b      	lsls	r3, r3, #10
 8000c6e:	4013      	ands	r3, r2
 8000c70:	d100      	bne.n	8000c74 <HAL_GPIO_Init+0x174>
 8000c72:	e09a      	b.n	8000daa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c74:	4b54      	ldr	r3, [pc, #336]	@ (8000dc8 <HAL_GPIO_Init+0x2c8>)
 8000c76:	699a      	ldr	r2, [r3, #24]
 8000c78:	4b53      	ldr	r3, [pc, #332]	@ (8000dc8 <HAL_GPIO_Init+0x2c8>)
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	619a      	str	r2, [r3, #24]
 8000c80:	4b51      	ldr	r3, [pc, #324]	@ (8000dc8 <HAL_GPIO_Init+0x2c8>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	2201      	movs	r2, #1
 8000c86:	4013      	ands	r3, r2
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	089b      	lsrs	r3, r3, #2
 8000c92:	3302      	adds	r3, #2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	589b      	ldr	r3, [r3, r2]
 8000c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	220f      	movs	r2, #15
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	0013      	movs	r3, r2
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cb0:	687a      	ldr	r2, [r7, #4]
 8000cb2:	2390      	movs	r3, #144	@ 0x90
 8000cb4:	05db      	lsls	r3, r3, #23
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d013      	beq.n	8000ce2 <HAL_GPIO_Init+0x1e2>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a44      	ldr	r2, [pc, #272]	@ (8000dd0 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00d      	beq.n	8000cde <HAL_GPIO_Init+0x1de>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a43      	ldr	r2, [pc, #268]	@ (8000dd4 <HAL_GPIO_Init+0x2d4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d007      	beq.n	8000cda <HAL_GPIO_Init+0x1da>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a42      	ldr	r2, [pc, #264]	@ (8000dd8 <HAL_GPIO_Init+0x2d8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d101      	bne.n	8000cd6 <HAL_GPIO_Init+0x1d6>
 8000cd2:	2303      	movs	r3, #3
 8000cd4:	e006      	b.n	8000ce4 <HAL_GPIO_Init+0x1e4>
 8000cd6:	2305      	movs	r3, #5
 8000cd8:	e004      	b.n	8000ce4 <HAL_GPIO_Init+0x1e4>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	e002      	b.n	8000ce4 <HAL_GPIO_Init+0x1e4>
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e000      	b.n	8000ce4 <HAL_GPIO_Init+0x1e4>
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	2103      	movs	r1, #3
 8000ce8:	400a      	ands	r2, r1
 8000cea:	0092      	lsls	r2, r2, #2
 8000cec:	4093      	lsls	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cf4:	4935      	ldr	r1, [pc, #212]	@ (8000dcc <HAL_GPIO_Init+0x2cc>)
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	089b      	lsrs	r3, r3, #2
 8000cfa:	3302      	adds	r3, #2
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	2380      	movs	r3, #128	@ 0x80
 8000d18:	035b      	lsls	r3, r3, #13
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	d003      	beq.n	8000d26 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d28:	693a      	ldr	r2, [r7, #16]
 8000d2a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	039b      	lsls	r3, r3, #14
 8000d44:	4013      	ands	r3, r2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d50:	4b22      	ldr	r3, [pc, #136]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000d56:	4b21      	ldr	r3, [pc, #132]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	4013      	ands	r3, r2
 8000d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685a      	ldr	r2, [r3, #4]
 8000d6a:	2380      	movs	r3, #128	@ 0x80
 8000d6c:	029b      	lsls	r3, r3, #10
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	43da      	mvns	r2, r3
 8000d8a:	693b      	ldr	r3, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	2380      	movs	r3, #128	@ 0x80
 8000d96:	025b      	lsls	r3, r3, #9
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d003      	beq.n	8000da4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	@ (8000ddc <HAL_GPIO_Init+0x2dc>)
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3301      	adds	r3, #1
 8000dae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	40da      	lsrs	r2, r3
 8000db8:	1e13      	subs	r3, r2, #0
 8000dba:	d000      	beq.n	8000dbe <HAL_GPIO_Init+0x2be>
 8000dbc:	e6a8      	b.n	8000b10 <HAL_GPIO_Init+0x10>
  } 
}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b006      	add	sp, #24
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	40010000 	.word	0x40010000
 8000dd0:	48000400 	.word	0x48000400
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	48000c00 	.word	0x48000c00
 8000ddc:	40010400 	.word	0x40010400

08000de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	000a      	movs	r2, r1
 8000dea:	1cbb      	adds	r3, r7, #2
 8000dec:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	691b      	ldr	r3, [r3, #16]
 8000df2:	1cba      	adds	r2, r7, #2
 8000df4:	8812      	ldrh	r2, [r2, #0]
 8000df6:	4013      	ands	r3, r2
 8000df8:	d004      	beq.n	8000e04 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	18fb      	adds	r3, r7, r3
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
 8000e02:	e003      	b.n	8000e0c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e04:	230f      	movs	r3, #15
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000e0c:	230f      	movs	r3, #15
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	781b      	ldrb	r3, [r3, #0]
  }
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b004      	add	sp, #16
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
 8000e22:	0008      	movs	r0, r1
 8000e24:	0011      	movs	r1, r2
 8000e26:	1cbb      	adds	r3, r7, #2
 8000e28:	1c02      	adds	r2, r0, #0
 8000e2a:	801a      	strh	r2, [r3, #0]
 8000e2c:	1c7b      	adds	r3, r7, #1
 8000e2e:	1c0a      	adds	r2, r1, #0
 8000e30:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e32:	1c7b      	adds	r3, r7, #1
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d004      	beq.n	8000e44 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e3a:	1cbb      	adds	r3, r7, #2
 8000e3c:	881a      	ldrh	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e42:	e003      	b.n	8000e4c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e44:	1cbb      	adds	r3, r7, #2
 8000e46:	881a      	ldrh	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000e4c:	46c0      	nop			@ (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	b002      	add	sp, #8
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e301      	b.n	800146a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	d100      	bne.n	8000e72 <HAL_RCC_OscConfig+0x1e>
 8000e70:	e08d      	b.n	8000f8e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e72:	4bc3      	ldr	r3, [pc, #780]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	220c      	movs	r2, #12
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d00e      	beq.n	8000e9c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e7e:	4bc0      	ldr	r3, [pc, #768]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	220c      	movs	r2, #12
 8000e84:	4013      	ands	r3, r2
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	d116      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x64>
 8000e8a:	4bbd      	ldr	r3, [pc, #756]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	2380      	movs	r3, #128	@ 0x80
 8000e90:	025b      	lsls	r3, r3, #9
 8000e92:	401a      	ands	r2, r3
 8000e94:	2380      	movs	r3, #128	@ 0x80
 8000e96:	025b      	lsls	r3, r3, #9
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d10d      	bne.n	8000eb8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	4bb8      	ldr	r3, [pc, #736]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	029b      	lsls	r3, r3, #10
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d100      	bne.n	8000eaa <HAL_RCC_OscConfig+0x56>
 8000ea8:	e070      	b.n	8000f8c <HAL_RCC_OscConfig+0x138>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d000      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x60>
 8000eb2:	e06b      	b.n	8000f8c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e2d8      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d107      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x7c>
 8000ec0:	4baf      	ldr	r3, [pc, #700]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4bae      	ldr	r3, [pc, #696]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	2180      	movs	r1, #128	@ 0x80
 8000ec8:	0249      	lsls	r1, r1, #9
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e02f      	b.n	8000f30 <HAL_RCC_OscConfig+0xdc>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d10c      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x9e>
 8000ed8:	4ba9      	ldr	r3, [pc, #676]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	4ba8      	ldr	r3, [pc, #672]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ede:	49a9      	ldr	r1, [pc, #676]	@ (8001184 <HAL_RCC_OscConfig+0x330>)
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	4ba6      	ldr	r3, [pc, #664]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4ba5      	ldr	r3, [pc, #660]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000eea:	49a7      	ldr	r1, [pc, #668]	@ (8001188 <HAL_RCC_OscConfig+0x334>)
 8000eec:	400a      	ands	r2, r1
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	e01e      	b.n	8000f30 <HAL_RCC_OscConfig+0xdc>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	2b05      	cmp	r3, #5
 8000ef8:	d10e      	bne.n	8000f18 <HAL_RCC_OscConfig+0xc4>
 8000efa:	4ba1      	ldr	r3, [pc, #644]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4ba0      	ldr	r3, [pc, #640]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f00:	2180      	movs	r1, #128	@ 0x80
 8000f02:	02c9      	lsls	r1, r1, #11
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	4b9d      	ldr	r3, [pc, #628]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b9c      	ldr	r3, [pc, #624]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	0249      	lsls	r1, r1, #9
 8000f12:	430a      	orrs	r2, r1
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e00b      	b.n	8000f30 <HAL_RCC_OscConfig+0xdc>
 8000f18:	4b99      	ldr	r3, [pc, #612]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b98      	ldr	r3, [pc, #608]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f1e:	4999      	ldr	r1, [pc, #612]	@ (8001184 <HAL_RCC_OscConfig+0x330>)
 8000f20:	400a      	ands	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	4b96      	ldr	r3, [pc, #600]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b95      	ldr	r3, [pc, #596]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	4997      	ldr	r1, [pc, #604]	@ (8001188 <HAL_RCC_OscConfig+0x334>)
 8000f2c:	400a      	ands	r2, r1
 8000f2e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d014      	beq.n	8000f62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fce6 	bl	8000908 <HAL_GetTick>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f42:	f7ff fce1 	bl	8000908 <HAL_GetTick>
 8000f46:	0002      	movs	r2, r0
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b64      	cmp	r3, #100	@ 0x64
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e28a      	b.n	800146a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f54:	4b8a      	ldr	r3, [pc, #552]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2380      	movs	r3, #128	@ 0x80
 8000f5a:	029b      	lsls	r3, r3, #10
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	d0f0      	beq.n	8000f42 <HAL_RCC_OscConfig+0xee>
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f62:	f7ff fcd1 	bl	8000908 <HAL_GetTick>
 8000f66:	0003      	movs	r3, r0
 8000f68:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fccc 	bl	8000908 <HAL_GetTick>
 8000f70:	0002      	movs	r2, r0
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	@ 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e275      	b.n	800146a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f7e:	4b80      	ldr	r3, [pc, #512]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	2380      	movs	r3, #128	@ 0x80
 8000f84:	029b      	lsls	r3, r3, #10
 8000f86:	4013      	ands	r3, r2
 8000f88:	d1f0      	bne.n	8000f6c <HAL_RCC_OscConfig+0x118>
 8000f8a:	e000      	b.n	8000f8e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2202      	movs	r2, #2
 8000f94:	4013      	ands	r3, r2
 8000f96:	d100      	bne.n	8000f9a <HAL_RCC_OscConfig+0x146>
 8000f98:	e069      	b.n	800106e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000f9a:	4b79      	ldr	r3, [pc, #484]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	220c      	movs	r2, #12
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	d00b      	beq.n	8000fbc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fa4:	4b76      	ldr	r3, [pc, #472]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	220c      	movs	r2, #12
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b08      	cmp	r3, #8
 8000fae:	d11c      	bne.n	8000fea <HAL_RCC_OscConfig+0x196>
 8000fb0:	4b73      	ldr	r3, [pc, #460]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	2380      	movs	r3, #128	@ 0x80
 8000fb6:	025b      	lsls	r3, r3, #9
 8000fb8:	4013      	ands	r3, r2
 8000fba:	d116      	bne.n	8000fea <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbc:	4b70      	ldr	r3, [pc, #448]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2202      	movs	r2, #2
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d005      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x17e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d001      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e24b      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd2:	4b6b      	ldr	r3, [pc, #428]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	22f8      	movs	r2, #248	@ 0xf8
 8000fd8:	4393      	bics	r3, r2
 8000fda:	0019      	movs	r1, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	00da      	lsls	r2, r3, #3
 8000fe2:	4b67      	ldr	r3, [pc, #412]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe8:	e041      	b.n	800106e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d024      	beq.n	800103c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ff2:	4b63      	ldr	r3, [pc, #396]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4b62      	ldr	r3, [pc, #392]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	430a      	orrs	r2, r1
 8000ffc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fc83 	bl	8000908 <HAL_GetTick>
 8001002:	0003      	movs	r3, r0
 8001004:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001008:	f7ff fc7e 	bl	8000908 <HAL_GetTick>
 800100c:	0002      	movs	r2, r0
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e227      	b.n	800146a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800101a:	4b59      	ldr	r3, [pc, #356]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2202      	movs	r2, #2
 8001020:	4013      	ands	r3, r2
 8001022:	d0f1      	beq.n	8001008 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001024:	4b56      	ldr	r3, [pc, #344]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	22f8      	movs	r2, #248	@ 0xf8
 800102a:	4393      	bics	r3, r2
 800102c:	0019      	movs	r1, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	00da      	lsls	r2, r3, #3
 8001034:	4b52      	ldr	r3, [pc, #328]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001036:	430a      	orrs	r2, r1
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e018      	b.n	800106e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800103c:	4b50      	ldr	r3, [pc, #320]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b4f      	ldr	r3, [pc, #316]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001042:	2101      	movs	r1, #1
 8001044:	438a      	bics	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fc5e 	bl	8000908 <HAL_GetTick>
 800104c:	0003      	movs	r3, r0
 800104e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001050:	e008      	b.n	8001064 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001052:	f7ff fc59 	bl	8000908 <HAL_GetTick>
 8001056:	0002      	movs	r2, r0
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e202      	b.n	800146a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001064:	4b46      	ldr	r3, [pc, #280]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2202      	movs	r2, #2
 800106a:	4013      	ands	r3, r2
 800106c:	d1f1      	bne.n	8001052 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2208      	movs	r2, #8
 8001074:	4013      	ands	r3, r2
 8001076:	d036      	beq.n	80010e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d019      	beq.n	80010b4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001080:	4b3f      	ldr	r3, [pc, #252]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001084:	4b3e      	ldr	r3, [pc, #248]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001086:	2101      	movs	r1, #1
 8001088:	430a      	orrs	r2, r1
 800108a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108c:	f7ff fc3c 	bl	8000908 <HAL_GetTick>
 8001090:	0003      	movs	r3, r0
 8001092:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001096:	f7ff fc37 	bl	8000908 <HAL_GetTick>
 800109a:	0002      	movs	r2, r0
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e1e0      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010a8:	4b35      	ldr	r3, [pc, #212]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 80010aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ac:	2202      	movs	r2, #2
 80010ae:	4013      	ands	r3, r2
 80010b0:	d0f1      	beq.n	8001096 <HAL_RCC_OscConfig+0x242>
 80010b2:	e018      	b.n	80010e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010b4:	4b32      	ldr	r3, [pc, #200]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 80010b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010b8:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 80010ba:	2101      	movs	r1, #1
 80010bc:	438a      	bics	r2, r1
 80010be:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c0:	f7ff fc22 	bl	8000908 <HAL_GetTick>
 80010c4:	0003      	movs	r3, r0
 80010c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010ca:	f7ff fc1d 	bl	8000908 <HAL_GetTick>
 80010ce:	0002      	movs	r2, r0
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e1c6      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 80010de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e0:	2202      	movs	r2, #2
 80010e2:	4013      	ands	r3, r2
 80010e4:	d1f1      	bne.n	80010ca <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2204      	movs	r2, #4
 80010ec:	4013      	ands	r3, r2
 80010ee:	d100      	bne.n	80010f2 <HAL_RCC_OscConfig+0x29e>
 80010f0:	e0b4      	b.n	800125c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010f2:	201f      	movs	r0, #31
 80010f4:	183b      	adds	r3, r7, r0
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010fa:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 80010fc:	69da      	ldr	r2, [r3, #28]
 80010fe:	2380      	movs	r3, #128	@ 0x80
 8001100:	055b      	lsls	r3, r3, #21
 8001102:	4013      	ands	r3, r2
 8001104:	d110      	bne.n	8001128 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001106:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001108:	69da      	ldr	r2, [r3, #28]
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 800110c:	2180      	movs	r1, #128	@ 0x80
 800110e:	0549      	lsls	r1, r1, #21
 8001110:	430a      	orrs	r2, r1
 8001112:	61da      	str	r2, [r3, #28]
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001116:	69da      	ldr	r2, [r3, #28]
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	055b      	lsls	r3, r3, #21
 800111c:	4013      	ands	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001122:	183b      	adds	r3, r7, r0
 8001124:	2201      	movs	r2, #1
 8001126:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001128:	4b18      	ldr	r3, [pc, #96]	@ (800118c <HAL_RCC_OscConfig+0x338>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	4013      	ands	r3, r2
 8001132:	d11a      	bne.n	800116a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <HAL_RCC_OscConfig+0x338>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <HAL_RCC_OscConfig+0x338>)
 800113a:	2180      	movs	r1, #128	@ 0x80
 800113c:	0049      	lsls	r1, r1, #1
 800113e:	430a      	orrs	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001142:	f7ff fbe1 	bl	8000908 <HAL_GetTick>
 8001146:	0003      	movs	r3, r0
 8001148:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800114c:	f7ff fbdc 	bl	8000908 <HAL_GetTick>
 8001150:	0002      	movs	r2, r0
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	@ 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e185      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_RCC_OscConfig+0x338>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	2380      	movs	r3, #128	@ 0x80
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4013      	ands	r3, r2
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d10e      	bne.n	8001190 <HAL_RCC_OscConfig+0x33c>
 8001172:	4b03      	ldr	r3, [pc, #12]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001174:	6a1a      	ldr	r2, [r3, #32]
 8001176:	4b02      	ldr	r3, [pc, #8]	@ (8001180 <HAL_RCC_OscConfig+0x32c>)
 8001178:	2101      	movs	r1, #1
 800117a:	430a      	orrs	r2, r1
 800117c:	621a      	str	r2, [r3, #32]
 800117e:	e035      	b.n	80011ec <HAL_RCC_OscConfig+0x398>
 8001180:	40021000 	.word	0x40021000
 8001184:	fffeffff 	.word	0xfffeffff
 8001188:	fffbffff 	.word	0xfffbffff
 800118c:	40007000 	.word	0x40007000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d10c      	bne.n	80011b2 <HAL_RCC_OscConfig+0x35e>
 8001198:	4bb6      	ldr	r3, [pc, #728]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 800119a:	6a1a      	ldr	r2, [r3, #32]
 800119c:	4bb5      	ldr	r3, [pc, #724]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 800119e:	2101      	movs	r1, #1
 80011a0:	438a      	bics	r2, r1
 80011a2:	621a      	str	r2, [r3, #32]
 80011a4:	4bb3      	ldr	r3, [pc, #716]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	4bb2      	ldr	r3, [pc, #712]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011aa:	2104      	movs	r1, #4
 80011ac:	438a      	bics	r2, r1
 80011ae:	621a      	str	r2, [r3, #32]
 80011b0:	e01c      	b.n	80011ec <HAL_RCC_OscConfig+0x398>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	2b05      	cmp	r3, #5
 80011b8:	d10c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x380>
 80011ba:	4bae      	ldr	r3, [pc, #696]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011bc:	6a1a      	ldr	r2, [r3, #32]
 80011be:	4bad      	ldr	r3, [pc, #692]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011c0:	2104      	movs	r1, #4
 80011c2:	430a      	orrs	r2, r1
 80011c4:	621a      	str	r2, [r3, #32]
 80011c6:	4bab      	ldr	r3, [pc, #684]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011c8:	6a1a      	ldr	r2, [r3, #32]
 80011ca:	4baa      	ldr	r3, [pc, #680]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	430a      	orrs	r2, r1
 80011d0:	621a      	str	r2, [r3, #32]
 80011d2:	e00b      	b.n	80011ec <HAL_RCC_OscConfig+0x398>
 80011d4:	4ba7      	ldr	r3, [pc, #668]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	4ba6      	ldr	r3, [pc, #664]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011da:	2101      	movs	r1, #1
 80011dc:	438a      	bics	r2, r1
 80011de:	621a      	str	r2, [r3, #32]
 80011e0:	4ba4      	ldr	r3, [pc, #656]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011e2:	6a1a      	ldr	r2, [r3, #32]
 80011e4:	4ba3      	ldr	r3, [pc, #652]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80011e6:	2104      	movs	r1, #4
 80011e8:	438a      	bics	r2, r1
 80011ea:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d014      	beq.n	800121e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f4:	f7ff fb88 	bl	8000908 <HAL_GetTick>
 80011f8:	0003      	movs	r3, r0
 80011fa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011fc:	e009      	b.n	8001212 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011fe:	f7ff fb83 	bl	8000908 <HAL_GetTick>
 8001202:	0002      	movs	r2, r0
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	4a9b      	ldr	r2, [pc, #620]	@ (8001478 <HAL_RCC_OscConfig+0x624>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e12b      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001212:	4b98      	ldr	r3, [pc, #608]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	d0f0      	beq.n	80011fe <HAL_RCC_OscConfig+0x3aa>
 800121c:	e013      	b.n	8001246 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fb73 	bl	8000908 <HAL_GetTick>
 8001222:	0003      	movs	r3, r0
 8001224:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001226:	e009      	b.n	800123c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001228:	f7ff fb6e 	bl	8000908 <HAL_GetTick>
 800122c:	0002      	movs	r2, r0
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	4a91      	ldr	r2, [pc, #580]	@ (8001478 <HAL_RCC_OscConfig+0x624>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e116      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123c:	4b8d      	ldr	r3, [pc, #564]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	2202      	movs	r2, #2
 8001242:	4013      	ands	r3, r2
 8001244:	d1f0      	bne.n	8001228 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001246:	231f      	movs	r3, #31
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001250:	4b88      	ldr	r3, [pc, #544]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001252:	69da      	ldr	r2, [r3, #28]
 8001254:	4b87      	ldr	r3, [pc, #540]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001256:	4989      	ldr	r1, [pc, #548]	@ (800147c <HAL_RCC_OscConfig+0x628>)
 8001258:	400a      	ands	r2, r1
 800125a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2210      	movs	r2, #16
 8001262:	4013      	ands	r3, r2
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d12a      	bne.n	80012c4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800126e:	4b81      	ldr	r3, [pc, #516]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001270:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001272:	4b80      	ldr	r3, [pc, #512]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001274:	2104      	movs	r1, #4
 8001276:	430a      	orrs	r2, r1
 8001278:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800127a:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 800127c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800127e:	4b7d      	ldr	r3, [pc, #500]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001280:	2101      	movs	r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001286:	f7ff fb3f 	bl	8000908 <HAL_GetTick>
 800128a:	0003      	movs	r3, r0
 800128c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800128e:	e008      	b.n	80012a2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001290:	f7ff fb3a 	bl	8000908 <HAL_GetTick>
 8001294:	0002      	movs	r2, r0
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d901      	bls.n	80012a2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e0e3      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012a2:	4b74      	ldr	r3, [pc, #464]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012a6:	2202      	movs	r2, #2
 80012a8:	4013      	ands	r3, r2
 80012aa:	d0f1      	beq.n	8001290 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012ac:	4b71      	ldr	r3, [pc, #452]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b0:	22f8      	movs	r2, #248	@ 0xf8
 80012b2:	4393      	bics	r3, r2
 80012b4:	0019      	movs	r1, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	699b      	ldr	r3, [r3, #24]
 80012ba:	00da      	lsls	r2, r3, #3
 80012bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012be:	430a      	orrs	r2, r1
 80012c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012c2:	e034      	b.n	800132e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	3305      	adds	r3, #5
 80012ca:	d111      	bne.n	80012f0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012cc:	4b69      	ldr	r3, [pc, #420]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012d0:	4b68      	ldr	r3, [pc, #416]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012d2:	2104      	movs	r1, #4
 80012d4:	438a      	bics	r2, r1
 80012d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012d8:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012dc:	22f8      	movs	r2, #248	@ 0xf8
 80012de:	4393      	bics	r3, r2
 80012e0:	0019      	movs	r1, r3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	00da      	lsls	r2, r3, #3
 80012e8:	4b62      	ldr	r3, [pc, #392]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012ea:	430a      	orrs	r2, r1
 80012ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ee:	e01e      	b.n	800132e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80012f0:	4b60      	ldr	r3, [pc, #384]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012f6:	2104      	movs	r1, #4
 80012f8:	430a      	orrs	r2, r1
 80012fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80012fc:	4b5d      	ldr	r3, [pc, #372]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80012fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001300:	4b5c      	ldr	r3, [pc, #368]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001302:	2101      	movs	r1, #1
 8001304:	438a      	bics	r2, r1
 8001306:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001308:	f7ff fafe 	bl	8000908 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001312:	f7ff faf9 	bl	8000908 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e0a2      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001324:	4b53      	ldr	r3, [pc, #332]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d1f1      	bne.n	8001312 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a1b      	ldr	r3, [r3, #32]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d100      	bne.n	8001338 <HAL_RCC_OscConfig+0x4e4>
 8001336:	e097      	b.n	8001468 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001338:	4b4e      	ldr	r3, [pc, #312]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	220c      	movs	r2, #12
 800133e:	4013      	ands	r3, r2
 8001340:	2b08      	cmp	r3, #8
 8001342:	d100      	bne.n	8001346 <HAL_RCC_OscConfig+0x4f2>
 8001344:	e06b      	b.n	800141e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d14c      	bne.n	80013e8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800134e:	4b49      	ldr	r3, [pc, #292]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4b48      	ldr	r3, [pc, #288]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001354:	494a      	ldr	r1, [pc, #296]	@ (8001480 <HAL_RCC_OscConfig+0x62c>)
 8001356:	400a      	ands	r2, r1
 8001358:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135a:	f7ff fad5 	bl	8000908 <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001364:	f7ff fad0 	bl	8000908 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e079      	b.n	800146a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001376:	4b3f      	ldr	r3, [pc, #252]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	049b      	lsls	r3, r3, #18
 800137e:	4013      	ands	r3, r2
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001382:	4b3c      	ldr	r3, [pc, #240]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001386:	220f      	movs	r2, #15
 8001388:	4393      	bics	r3, r2
 800138a:	0019      	movs	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001390:	4b38      	ldr	r3, [pc, #224]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001392:	430a      	orrs	r2, r1
 8001394:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001396:	4b37      	ldr	r3, [pc, #220]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a3a      	ldr	r2, [pc, #232]	@ (8001484 <HAL_RCC_OscConfig+0x630>)
 800139c:	4013      	ands	r3, r2
 800139e:	0019      	movs	r1, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a8:	431a      	orrs	r2, r3
 80013aa:	4b32      	ldr	r3, [pc, #200]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80013ac:	430a      	orrs	r2, r1
 80013ae:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013b0:	4b30      	ldr	r3, [pc, #192]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80013b6:	2180      	movs	r1, #128	@ 0x80
 80013b8:	0449      	lsls	r1, r1, #17
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013be:	f7ff faa3 	bl	8000908 <HAL_GetTick>
 80013c2:	0003      	movs	r3, r0
 80013c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c8:	f7ff fa9e 	bl	8000908 <HAL_GetTick>
 80013cc:	0002      	movs	r2, r0
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e047      	b.n	800146a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	2380      	movs	r3, #128	@ 0x80
 80013e0:	049b      	lsls	r3, r3, #18
 80013e2:	4013      	ands	r3, r2
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x574>
 80013e6:	e03f      	b.n	8001468 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013e8:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b21      	ldr	r3, [pc, #132]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 80013ee:	4924      	ldr	r1, [pc, #144]	@ (8001480 <HAL_RCC_OscConfig+0x62c>)
 80013f0:	400a      	ands	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa88 	bl	8000908 <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff fa83 	bl	8000908 <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e02c      	b.n	800146a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	049b      	lsls	r3, r3, #18
 8001418:	4013      	ands	r3, r2
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x5aa>
 800141c:	e024      	b.n	8001468 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d101      	bne.n	800142a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e01f      	b.n	800146a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001430:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_RCC_OscConfig+0x620>)
 8001432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001434:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	025b      	lsls	r3, r3, #9
 800143c:	401a      	ands	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	429a      	cmp	r2, r3
 8001444:	d10e      	bne.n	8001464 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	220f      	movs	r2, #15
 800144a:	401a      	ands	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001450:	429a      	cmp	r2, r3
 8001452:	d107      	bne.n	8001464 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001454:	697a      	ldr	r2, [r7, #20]
 8001456:	23f0      	movs	r3, #240	@ 0xf0
 8001458:	039b      	lsls	r3, r3, #14
 800145a:	401a      	ands	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e000      	b.n	800146a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	0018      	movs	r0, r3
 800146c:	46bd      	mov	sp, r7
 800146e:	b008      	add	sp, #32
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			@ (mov r8, r8)
 8001474:	40021000 	.word	0x40021000
 8001478:	00001388 	.word	0x00001388
 800147c:	efffffff 	.word	0xefffffff
 8001480:	feffffff 	.word	0xfeffffff
 8001484:	ffc2ffff 	.word	0xffc2ffff

08001488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d101      	bne.n	800149c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e0b3      	b.n	8001604 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800149c:	4b5b      	ldr	r3, [pc, #364]	@ (800160c <HAL_RCC_ClockConfig+0x184>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2201      	movs	r2, #1
 80014a2:	4013      	ands	r3, r2
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d911      	bls.n	80014ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014aa:	4b58      	ldr	r3, [pc, #352]	@ (800160c <HAL_RCC_ClockConfig+0x184>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2201      	movs	r2, #1
 80014b0:	4393      	bics	r3, r2
 80014b2:	0019      	movs	r1, r3
 80014b4:	4b55      	ldr	r3, [pc, #340]	@ (800160c <HAL_RCC_ClockConfig+0x184>)
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014bc:	4b53      	ldr	r3, [pc, #332]	@ (800160c <HAL_RCC_ClockConfig+0x184>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4013      	ands	r3, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d001      	beq.n	80014ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e09a      	b.n	8001604 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2202      	movs	r2, #2
 80014d4:	4013      	ands	r3, r2
 80014d6:	d015      	beq.n	8001504 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2204      	movs	r2, #4
 80014de:	4013      	ands	r3, r2
 80014e0:	d006      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 80014e8:	21e0      	movs	r1, #224	@ 0xe0
 80014ea:	00c9      	lsls	r1, r1, #3
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f0:	4b47      	ldr	r3, [pc, #284]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	22f0      	movs	r2, #240	@ 0xf0
 80014f6:	4393      	bics	r3, r2
 80014f8:	0019      	movs	r1, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	4b44      	ldr	r3, [pc, #272]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 8001500:	430a      	orrs	r2, r1
 8001502:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2201      	movs	r2, #1
 800150a:	4013      	ands	r3, r2
 800150c:	d040      	beq.n	8001590 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d107      	bne.n	8001526 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001516:	4b3e      	ldr	r3, [pc, #248]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	2380      	movs	r3, #128	@ 0x80
 800151c:	029b      	lsls	r3, r3, #10
 800151e:	4013      	ands	r3, r2
 8001520:	d114      	bne.n	800154c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e06e      	b.n	8001604 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d107      	bne.n	800153e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152e:	4b38      	ldr	r3, [pc, #224]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	049b      	lsls	r3, r3, #18
 8001536:	4013      	ands	r3, r2
 8001538:	d108      	bne.n	800154c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e062      	b.n	8001604 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153e:	4b34      	ldr	r3, [pc, #208]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2202      	movs	r2, #2
 8001544:	4013      	ands	r3, r2
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e05b      	b.n	8001604 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154c:	4b30      	ldr	r3, [pc, #192]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2203      	movs	r2, #3
 8001552:	4393      	bics	r3, r2
 8001554:	0019      	movs	r1, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001560:	f7ff f9d2 	bl	8000908 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001568:	e009      	b.n	800157e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800156a:	f7ff f9cd 	bl	8000908 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	4a27      	ldr	r2, [pc, #156]	@ (8001614 <HAL_RCC_ClockConfig+0x18c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e042      	b.n	8001604 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	220c      	movs	r2, #12
 8001584:	401a      	ands	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	429a      	cmp	r2, r3
 800158e:	d1ec      	bne.n	800156a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001590:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <HAL_RCC_ClockConfig+0x184>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2201      	movs	r2, #1
 8001596:	4013      	ands	r3, r2
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d211      	bcs.n	80015c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_RCC_ClockConfig+0x184>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4393      	bics	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	4b18      	ldr	r3, [pc, #96]	@ (800160c <HAL_RCC_ClockConfig+0x184>)
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b0:	4b16      	ldr	r3, [pc, #88]	@ (800160c <HAL_RCC_ClockConfig+0x184>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2201      	movs	r2, #1
 80015b6:	4013      	ands	r3, r2
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e020      	b.n	8001604 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2204      	movs	r2, #4
 80015c8:	4013      	ands	r3, r2
 80015ca:	d009      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015cc:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a11      	ldr	r2, [pc, #68]	@ (8001618 <HAL_RCC_ClockConfig+0x190>)
 80015d2:	4013      	ands	r3, r2
 80015d4:	0019      	movs	r1, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 80015dc:	430a      	orrs	r2, r1
 80015de:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015e0:	f000 f820 	bl	8001624 <HAL_RCC_GetSysClockFreq>
 80015e4:	0001      	movs	r1, r0
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_RCC_ClockConfig+0x188>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	091b      	lsrs	r3, r3, #4
 80015ec:	220f      	movs	r2, #15
 80015ee:	4013      	ands	r3, r2
 80015f0:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <HAL_RCC_ClockConfig+0x194>)
 80015f2:	5cd3      	ldrb	r3, [r2, r3]
 80015f4:	000a      	movs	r2, r1
 80015f6:	40da      	lsrs	r2, r3
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_RCC_ClockConfig+0x198>)
 80015fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80015fc:	2003      	movs	r0, #3
 80015fe:	f7ff f887 	bl	8000710 <HAL_InitTick>
  
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
}
 8001604:	0018      	movs	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	b004      	add	sp, #16
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40022000 	.word	0x40022000
 8001610:	40021000 	.word	0x40021000
 8001614:	00001388 	.word	0x00001388
 8001618:	fffff8ff 	.word	0xfffff8ff
 800161c:	08003750 	.word	0x08003750
 8001620:	20000000 	.word	0x20000000

08001624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	220c      	movs	r2, #12
 8001648:	4013      	ands	r3, r2
 800164a:	2b04      	cmp	r3, #4
 800164c:	d002      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x30>
 800164e:	2b08      	cmp	r3, #8
 8001650:	d003      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x36>
 8001652:	e02c      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001656:	613b      	str	r3, [r7, #16]
      break;
 8001658:	e02c      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	0c9b      	lsrs	r3, r3, #18
 800165e:	220f      	movs	r2, #15
 8001660:	4013      	ands	r3, r2
 8001662:	4a19      	ldr	r2, [pc, #100]	@ (80016c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001668:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800166a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800166c:	220f      	movs	r2, #15
 800166e:	4013      	ands	r3, r2
 8001670:	4a16      	ldr	r2, [pc, #88]	@ (80016cc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001672:	5cd3      	ldrb	r3, [r2, r3]
 8001674:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	2380      	movs	r3, #128	@ 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	4013      	ands	r3, r2
 800167e:	d009      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001680:	68b9      	ldr	r1, [r7, #8]
 8001682:	4810      	ldr	r0, [pc, #64]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001684:	f7fe fd40 	bl	8000108 <__udivsi3>
 8001688:	0003      	movs	r3, r0
 800168a:	001a      	movs	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4353      	muls	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e009      	b.n	80016a8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	000a      	movs	r2, r1
 8001698:	0152      	lsls	r2, r2, #5
 800169a:	1a52      	subs	r2, r2, r1
 800169c:	0193      	lsls	r3, r2, #6
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	185b      	adds	r3, r3, r1
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	613b      	str	r3, [r7, #16]
      break;
 80016ac:	e002      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80016b0:	613b      	str	r3, [r7, #16]
      break;
 80016b2:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016b4:	693b      	ldr	r3, [r7, #16]
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b006      	add	sp, #24
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	40021000 	.word	0x40021000
 80016c4:	007a1200 	.word	0x007a1200
 80016c8:	08003768 	.word	0x08003768
 80016cc:	08003778 	.word	0x08003778

080016d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016d4:	4b02      	ldr	r3, [pc, #8]	@ (80016e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	0018      	movs	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	20000000 	.word	0x20000000

080016e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80016e8:	f7ff fff2 	bl	80016d0 <HAL_RCC_GetHCLKFreq>
 80016ec:	0001      	movs	r1, r0
 80016ee:	4b06      	ldr	r3, [pc, #24]	@ (8001708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	0a1b      	lsrs	r3, r3, #8
 80016f4:	2207      	movs	r2, #7
 80016f6:	4013      	ands	r3, r2
 80016f8:	4a04      	ldr	r2, [pc, #16]	@ (800170c <HAL_RCC_GetPCLK1Freq+0x28>)
 80016fa:	5cd3      	ldrb	r3, [r2, r3]
 80016fc:	40d9      	lsrs	r1, r3
 80016fe:	000b      	movs	r3, r1
}    
 8001700:	0018      	movs	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	46c0      	nop			@ (mov r8, r8)
 8001708:	40021000 	.word	0x40021000
 800170c:	08003760 	.word	0x08003760

08001710 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2207      	movs	r2, #7
 800171e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001720:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <HAL_RCC_GetClockConfig+0x4c>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	2203      	movs	r2, #3
 8001726:	401a      	ands	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800172c:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <HAL_RCC_GetClockConfig+0x4c>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	22f0      	movs	r2, #240	@ 0xf0
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8001738:	4b08      	ldr	r3, [pc, #32]	@ (800175c <HAL_RCC_GetClockConfig+0x4c>)
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	23e0      	movs	r3, #224	@ 0xe0
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	401a      	ands	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_RCC_GetClockConfig+0x50>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2201      	movs	r2, #1
 800174c:	401a      	ands	r2, r3
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	46c0      	nop			@ (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	40021000 	.word	0x40021000
 8001760:	40022000 	.word	0x40022000

08001764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e0a8      	b.n	80018c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800177a:	2b00      	cmp	r3, #0
 800177c:	d109      	bne.n	8001792 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	2382      	movs	r3, #130	@ 0x82
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	429a      	cmp	r2, r3
 8001788:	d009      	beq.n	800179e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
 8001790:	e005      	b.n	800179e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	225d      	movs	r2, #93	@ 0x5d
 80017a8:	5c9b      	ldrb	r3, [r3, r2]
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d107      	bne.n	80017c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	225c      	movs	r2, #92	@ 0x5c
 80017b4:	2100      	movs	r1, #0
 80017b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	0018      	movs	r0, r3
 80017bc:	f7fe ff2e 	bl	800061c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	225d      	movs	r2, #93	@ 0x5d
 80017c4:	2102      	movs	r1, #2
 80017c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2140      	movs	r1, #64	@ 0x40
 80017d4:	438a      	bics	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	23e0      	movs	r3, #224	@ 0xe0
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d902      	bls.n	80017ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	e002      	b.n	80017f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80017ea:	2380      	movs	r3, #128	@ 0x80
 80017ec:	015b      	lsls	r3, r3, #5
 80017ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	23f0      	movs	r3, #240	@ 0xf0
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d008      	beq.n	800180e <HAL_SPI_Init+0xaa>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	23e0      	movs	r3, #224	@ 0xe0
 8001802:	00db      	lsls	r3, r3, #3
 8001804:	429a      	cmp	r2, r3
 8001806:	d002      	beq.n	800180e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	2382      	movs	r3, #130	@ 0x82
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	401a      	ands	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6899      	ldr	r1, [r3, #8]
 800181c:	2384      	movs	r3, #132	@ 0x84
 800181e:	021b      	lsls	r3, r3, #8
 8001820:	400b      	ands	r3, r1
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	2102      	movs	r1, #2
 800182a:	400b      	ands	r3, r1
 800182c:	431a      	orrs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	695b      	ldr	r3, [r3, #20]
 8001832:	2101      	movs	r1, #1
 8001834:	400b      	ands	r3, r1
 8001836:	431a      	orrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6999      	ldr	r1, [r3, #24]
 800183c:	2380      	movs	r3, #128	@ 0x80
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	400b      	ands	r3, r1
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
 8001848:	2138      	movs	r1, #56	@ 0x38
 800184a:	400b      	ands	r3, r1
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	2180      	movs	r1, #128	@ 0x80
 8001854:	400b      	ands	r3, r1
 8001856:	431a      	orrs	r2, r3
 8001858:	0011      	movs	r1, r2
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800185e:	2380      	movs	r3, #128	@ 0x80
 8001860:	019b      	lsls	r3, r3, #6
 8001862:	401a      	ands	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	0c1b      	lsrs	r3, r3, #16
 8001872:	2204      	movs	r2, #4
 8001874:	401a      	ands	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	2110      	movs	r1, #16
 800187c:	400b      	ands	r3, r1
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001884:	2108      	movs	r1, #8
 8001886:	400b      	ands	r3, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68d9      	ldr	r1, [r3, #12]
 800188e:	23f0      	movs	r3, #240	@ 0xf0
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	400b      	ands	r3, r1
 8001894:	431a      	orrs	r2, r3
 8001896:	0011      	movs	r1, r2
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	015b      	lsls	r3, r3, #5
 800189e:	401a      	ands	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	69da      	ldr	r2, [r3, #28]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4907      	ldr	r1, [pc, #28]	@ (80018d0 <HAL_SPI_Init+0x16c>)
 80018b4:	400a      	ands	r2, r1
 80018b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	225d      	movs	r2, #93	@ 0x5d
 80018c2:	2101      	movs	r1, #1
 80018c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	fffff7ff 	.word	0xfffff7ff

080018d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	1dbb      	adds	r3, r7, #6
 80018e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80018e4:	231f      	movs	r3, #31
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	225c      	movs	r2, #92	@ 0x5c
 80018f0:	5c9b      	ldrb	r3, [r3, r2]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d101      	bne.n	80018fa <HAL_SPI_Transmit+0x26>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e147      	b.n	8001b8a <HAL_SPI_Transmit+0x2b6>
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	225c      	movs	r2, #92	@ 0x5c
 80018fe:	2101      	movs	r1, #1
 8001900:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001902:	f7ff f801 	bl	8000908 <HAL_GetTick>
 8001906:	0003      	movs	r3, r0
 8001908:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800190a:	2316      	movs	r3, #22
 800190c:	18fb      	adds	r3, r7, r3
 800190e:	1dba      	adds	r2, r7, #6
 8001910:	8812      	ldrh	r2, [r2, #0]
 8001912:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	225d      	movs	r2, #93	@ 0x5d
 8001918:	5c9b      	ldrb	r3, [r3, r2]
 800191a:	b2db      	uxtb	r3, r3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d004      	beq.n	800192a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001920:	231f      	movs	r3, #31
 8001922:	18fb      	adds	r3, r7, r3
 8001924:	2202      	movs	r2, #2
 8001926:	701a      	strb	r2, [r3, #0]
    goto error;
 8001928:	e128      	b.n	8001b7c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <HAL_SPI_Transmit+0x64>
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d104      	bne.n	8001942 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001938:	231f      	movs	r3, #31
 800193a:	18fb      	adds	r3, r7, r3
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001940:	e11c      	b.n	8001b7c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	225d      	movs	r2, #93	@ 0x5d
 8001946:	2103      	movs	r1, #3
 8001948:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2200      	movs	r2, #0
 800194e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1dba      	adds	r2, r7, #6
 800195a:	8812      	ldrh	r2, [r2, #0]
 800195c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1dba      	adds	r2, r7, #6
 8001962:	8812      	ldrh	r2, [r2, #0]
 8001964:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2244      	movs	r2, #68	@ 0x44
 8001970:	2100      	movs	r1, #0
 8001972:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2246      	movs	r2, #70	@ 0x46
 8001978:	2100      	movs	r1, #0
 800197a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	429a      	cmp	r2, r3
 8001992:	d110      	bne.n	80019b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2140      	movs	r1, #64	@ 0x40
 80019a0:	438a      	bics	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2180      	movs	r1, #128	@ 0x80
 80019b0:	01c9      	lsls	r1, r1, #7
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2240      	movs	r2, #64	@ 0x40
 80019be:	4013      	ands	r3, r2
 80019c0:	2b40      	cmp	r3, #64	@ 0x40
 80019c2:	d007      	beq.n	80019d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2140      	movs	r1, #64	@ 0x40
 80019d0:	430a      	orrs	r2, r1
 80019d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68da      	ldr	r2, [r3, #12]
 80019d8:	23e0      	movs	r3, #224	@ 0xe0
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	429a      	cmp	r2, r3
 80019de:	d952      	bls.n	8001a86 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <HAL_SPI_Transmit+0x11e>
 80019e8:	2316      	movs	r3, #22
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d143      	bne.n	8001a7a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019f6:	881a      	ldrh	r2, [r3, #0]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a02:	1c9a      	adds	r2, r3, #2
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001a16:	e030      	b.n	8001a7a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d112      	bne.n	8001a4c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a2a:	881a      	ldrh	r2, [r3, #0]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a36:	1c9a      	adds	r2, r3, #2
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	3b01      	subs	r3, #1
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001a4a:	e016      	b.n	8001a7a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a4c:	f7fe ff5c 	bl	8000908 <HAL_GetTick>
 8001a50:	0002      	movs	r2, r0
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d802      	bhi.n	8001a62 <HAL_SPI_Transmit+0x18e>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	d102      	bne.n	8001a68 <HAL_SPI_Transmit+0x194>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d108      	bne.n	8001a7a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8001a68:	231f      	movs	r3, #31
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	225d      	movs	r2, #93	@ 0x5d
 8001a74:	2101      	movs	r1, #1
 8001a76:	5499      	strb	r1, [r3, r2]
          goto error;
 8001a78:	e080      	b.n	8001b7c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1c9      	bne.n	8001a18 <HAL_SPI_Transmit+0x144>
 8001a84:	e053      	b.n	8001b2e <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d004      	beq.n	8001a98 <HAL_SPI_Transmit+0x1c4>
 8001a8e:	2316      	movs	r3, #22
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d145      	bne.n	8001b24 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	330c      	adds	r3, #12
 8001aa2:	7812      	ldrb	r2, [r2, #0]
 8001aa4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001aaa:	1c5a      	adds	r2, r3, #1
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001abe:	e031      	b.n	8001b24 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d113      	bne.n	8001af6 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	330c      	adds	r3, #12
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001af4:	e016      	b.n	8001b24 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001af6:	f7fe ff07 	bl	8000908 <HAL_GetTick>
 8001afa:	0002      	movs	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d802      	bhi.n	8001b0c <HAL_SPI_Transmit+0x238>
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	d102      	bne.n	8001b12 <HAL_SPI_Transmit+0x23e>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d108      	bne.n	8001b24 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8001b12:	231f      	movs	r3, #31
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2203      	movs	r2, #3
 8001b18:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	225d      	movs	r2, #93	@ 0x5d
 8001b1e:	2101      	movs	r1, #1
 8001b20:	5499      	strb	r1, [r3, r2]
          goto error;
 8001b22:	e02b      	b.n	8001b7c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1c8      	bne.n	8001ac0 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	6839      	ldr	r1, [r7, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f000 fa65 	bl	8002004 <SPI_EndRxTxTransaction>
 8001b3a:	1e03      	subs	r3, r0, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2220      	movs	r2, #32
 8001b42:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10a      	bne.n	8001b62 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001b6a:	231f      	movs	r3, #31
 8001b6c:	18fb      	adds	r3, r7, r3
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e003      	b.n	8001b7c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	225d      	movs	r2, #93	@ 0x5d
 8001b78:	2101      	movs	r1, #1
 8001b7a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	225c      	movs	r2, #92	@ 0x5c
 8001b80:	2100      	movs	r1, #0
 8001b82:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001b84:	231f      	movs	r3, #31
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	781b      	ldrb	r3, [r3, #0]
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b008      	add	sp, #32
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2240      	movs	r2, #64	@ 0x40
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001bba:	d009      	beq.n	8001bd0 <HAL_SPI_IRQHandler+0x3c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2240      	movs	r2, #64	@ 0x40
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d005      	beq.n	8001bd0 <HAL_SPI_IRQHandler+0x3c>
  {
    hspi->RxISR(hspi);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	0010      	movs	r0, r2
 8001bcc:	4798      	blx	r3
    return;
 8001bce:	e0c5      	b.n	8001d5c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d009      	beq.n	8001bec <HAL_SPI_IRQHandler+0x58>
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	2280      	movs	r2, #128	@ 0x80
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d005      	beq.n	8001bec <HAL_SPI_IRQHandler+0x58>
  {
    hspi->TxISR(hspi);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	0010      	movs	r0, r2
 8001be8:	4798      	blx	r3
    return;
 8001bea:	e0b7      	b.n	8001d5c <HAL_SPI_IRQHandler+0x1c8>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d109      	bne.n	8001c08 <HAL_SPI_IRQHandler+0x74>
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2240      	movs	r2, #64	@ 0x40
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d105      	bne.n	8001c08 <HAL_SPI_IRQHandler+0x74>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	d100      	bne.n	8001c08 <HAL_SPI_IRQHandler+0x74>
 8001c06:	e0a9      	b.n	8001d5c <HAL_SPI_IRQHandler+0x1c8>
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d100      	bne.n	8001c12 <HAL_SPI_IRQHandler+0x7e>
 8001c10:	e0a4      	b.n	8001d5c <HAL_SPI_IRQHandler+0x1c8>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	2240      	movs	r2, #64	@ 0x40
 8001c16:	4013      	ands	r3, r2
 8001c18:	d023      	beq.n	8001c62 <HAL_SPI_IRQHandler+0xce>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	225d      	movs	r2, #93	@ 0x5d
 8001c1e:	5c9b      	ldrb	r3, [r3, r2]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d011      	beq.n	8001c4a <HAL_SPI_IRQHandler+0xb6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	e00b      	b.n	8001c62 <HAL_SPI_IRQHandler+0xce>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	693b      	ldr	r3, [r7, #16]
        return;
 8001c60:	e07c      	b.n	8001d5c <HAL_SPI_IRQHandler+0x1c8>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2220      	movs	r2, #32
 8001c66:	4013      	ands	r3, r2
 8001c68:	d014      	beq.n	8001c94 <HAL_SPI_IRQHandler+0x100>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c6e:	2201      	movs	r2, #1
 8001c70:	431a      	orrs	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2140      	movs	r1, #64	@ 0x40
 8001c8e:	438a      	bics	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d00c      	beq.n	8001cb8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d04c      	beq.n	8001d5a <HAL_SPI_IRQHandler+0x1c6>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	21e0      	movs	r1, #224	@ 0xe0
 8001ccc:	438a      	bics	r2, r1
 8001cce:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	225d      	movs	r2, #93	@ 0x5d
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2202      	movs	r2, #2
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d103      	bne.n	8001ce8 <HAL_SPI_IRQHandler+0x154>
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d032      	beq.n	8001d4e <HAL_SPI_IRQHandler+0x1ba>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2103      	movs	r1, #3
 8001cf4:	438a      	bics	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_SPI_IRQHandler+0x18e>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d04:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_SPI_IRQHandler+0x1d0>)
 8001d06:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7fe feb2 	bl	8000a76 <HAL_DMA_Abort_IT>
 8001d12:	1e03      	subs	r3, r0, #0
 8001d14:	d005      	beq.n	8001d22 <HAL_SPI_IRQHandler+0x18e>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1a:	2240      	movs	r2, #64	@ 0x40
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d016      	beq.n	8001d58 <HAL_SPI_IRQHandler+0x1c4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001d64 <HAL_SPI_IRQHandler+0x1d0>)
 8001d30:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d36:	0018      	movs	r0, r3
 8001d38:	f7fe fe9d 	bl	8000a76 <HAL_DMA_Abort_IT>
 8001d3c:	1e03      	subs	r3, r0, #0
 8001d3e:	d00b      	beq.n	8001d58 <HAL_SPI_IRQHandler+0x1c4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d44:	2240      	movs	r2, #64	@ 0x40
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8001d4c:	e004      	b.n	8001d58 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f000 f809 	bl	8001d68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001d56:	e000      	b.n	8001d5a <HAL_SPI_IRQHandler+0x1c6>
        if (hspi->hdmatx != NULL)
 8001d58:	46c0      	nop			@ (mov r8, r8)
    return;
 8001d5a:	46c0      	nop			@ (mov r8, r8)
  }
}
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b008      	add	sp, #32
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	08001d79 	.word	0x08001d79

08001d68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001d70:	46c0      	nop			@ (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b002      	add	sp, #8
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d84:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2246      	movs	r2, #70	@ 0x46
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f7ff ffe6 	bl	8001d68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001d9c:	46c0      	nop			@ (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b004      	add	sp, #16
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	603b      	str	r3, [r7, #0]
 8001db0:	1dfb      	adds	r3, r7, #7
 8001db2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001db4:	f7fe fda8 	bl	8000908 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	18d3      	adds	r3, r2, r3
 8001dc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001dc4:	f7fe fda0 	bl	8000908 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001dcc:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	015b      	lsls	r3, r3, #5
 8001dd2:	0d1b      	lsrs	r3, r3, #20
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	4353      	muls	r3, r2
 8001dd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001dda:	e058      	b.n	8001e8e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	3301      	adds	r3, #1
 8001de0:	d055      	beq.n	8001e8e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001de2:	f7fe fd91 	bl	8000908 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	69fa      	ldr	r2, [r7, #28]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d902      	bls.n	8001df8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d142      	bne.n	8001e7e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	21e0      	movs	r1, #224	@ 0xe0
 8001e04:	438a      	bics	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	2382      	movs	r3, #130	@ 0x82
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d113      	bne.n	8001e3c <SPI_WaitFlagStateUntilTimeout+0x98>
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	2380      	movs	r3, #128	@ 0x80
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d005      	beq.n	8001e2c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d107      	bne.n	8001e3c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2140      	movs	r1, #64	@ 0x40
 8001e38:	438a      	bics	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	019b      	lsls	r3, r3, #6
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d110      	bne.n	8001e6a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	491a      	ldr	r1, [pc, #104]	@ (8001ebc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001e54:	400a      	ands	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2180      	movs	r1, #128	@ 0x80
 8001e64:	0189      	lsls	r1, r1, #6
 8001e66:	430a      	orrs	r2, r1
 8001e68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	225d      	movs	r2, #93	@ 0x5d
 8001e6e:	2101      	movs	r1, #1
 8001e70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	225c      	movs	r2, #92	@ 0x5c
 8001e76:	2100      	movs	r1, #0
 8001e78:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e017      	b.n	8001eae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	4013      	ands	r3, r2
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	425a      	negs	r2, r3
 8001e9e:	4153      	adcs	r3, r2
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	001a      	movs	r2, r3
 8001ea4:	1dfb      	adds	r3, r7, #7
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d197      	bne.n	8001ddc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	0018      	movs	r0, r3
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	b008      	add	sp, #32
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	46c0      	nop			@ (mov r8, r8)
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	ffffdfff 	.word	0xffffdfff

08001ec0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08a      	sub	sp, #40	@ 0x28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001ece:	2317      	movs	r3, #23
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001ed6:	f7fe fd17 	bl	8000908 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	18d3      	adds	r3, r2, r3
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8001ee6:	f7fe fd0f 	bl	8000908 <HAL_GetTick>
 8001eea:	0003      	movs	r3, r0
 8001eec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	330c      	adds	r3, #12
 8001ef4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001ef6:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	0013      	movs	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	189b      	adds	r3, r3, r2
 8001f00:	00da      	lsls	r2, r3, #3
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	0d1b      	lsrs	r3, r3, #20
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	4353      	muls	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8001f0c:	e068      	b.n	8001fe0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	23c0      	movs	r3, #192	@ 0xc0
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d10a      	bne.n	8001f2e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d107      	bne.n	8001f2e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	2117      	movs	r1, #23
 8001f26:	187b      	adds	r3, r7, r1
 8001f28:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	3301      	adds	r3, #1
 8001f32:	d055      	beq.n	8001fe0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f34:	f7fe fce8 	bl	8000908 <HAL_GetTick>
 8001f38:	0002      	movs	r2, r0
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d902      	bls.n	8001f4a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d142      	bne.n	8001fd0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	21e0      	movs	r1, #224	@ 0xe0
 8001f56:	438a      	bics	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	2382      	movs	r3, #130	@ 0x82
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d113      	bne.n	8001f8e <SPI_WaitFifoStateUntilTimeout+0xce>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	689a      	ldr	r2, [r3, #8]
 8001f6a:	2380      	movs	r3, #128	@ 0x80
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d005      	beq.n	8001f7e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	2380      	movs	r3, #128	@ 0x80
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d107      	bne.n	8001f8e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2140      	movs	r1, #64	@ 0x40
 8001f8a:	438a      	bics	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f92:	2380      	movs	r3, #128	@ 0x80
 8001f94:	019b      	lsls	r3, r3, #6
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d110      	bne.n	8001fbc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4916      	ldr	r1, [pc, #88]	@ (8002000 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	0189      	lsls	r1, r1, #6
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	225d      	movs	r2, #93	@ 0x5d
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	225c      	movs	r2, #92	@ 0x5c
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e010      	b.n	8001ff2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d18e      	bne.n	8001f0e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	b00a      	add	sp, #40	@ 0x28
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	46c0      	nop			@ (mov r8, r8)
 8001ffc:	20000000 	.word	0x20000000
 8002000:	ffffdfff 	.word	0xffffdfff

08002004 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af02      	add	r7, sp, #8
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	23c0      	movs	r3, #192	@ 0xc0
 8002014:	0159      	lsls	r1, r3, #5
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	0013      	movs	r3, r2
 800201e:	2200      	movs	r2, #0
 8002020:	f7ff ff4e 	bl	8001ec0 <SPI_WaitFifoStateUntilTimeout>
 8002024:	1e03      	subs	r3, r0, #0
 8002026:	d007      	beq.n	8002038 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202c:	2220      	movs	r2, #32
 800202e:	431a      	orrs	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e027      	b.n	8002088 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	0013      	movs	r3, r2
 8002042:	2200      	movs	r2, #0
 8002044:	2180      	movs	r1, #128	@ 0x80
 8002046:	f7ff fead 	bl	8001da4 <SPI_WaitFlagStateUntilTimeout>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d007      	beq.n	800205e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002052:	2220      	movs	r2, #32
 8002054:	431a      	orrs	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e014      	b.n	8002088 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800205e:	68ba      	ldr	r2, [r7, #8]
 8002060:	23c0      	movs	r3, #192	@ 0xc0
 8002062:	00d9      	lsls	r1, r3, #3
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	0013      	movs	r3, r2
 800206c:	2200      	movs	r2, #0
 800206e:	f7ff ff27 	bl	8001ec0 <SPI_WaitFifoStateUntilTimeout>
 8002072:	1e03      	subs	r3, r0, #0
 8002074:	d007      	beq.n	8002086 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800207a:	2220      	movs	r2, #32
 800207c:	431a      	orrs	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e000      	b.n	8002088 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b004      	add	sp, #16
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e042      	b.n	8002128 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	223d      	movs	r2, #61	@ 0x3d
 80020a6:	5c9b      	ldrb	r3, [r3, r2]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d107      	bne.n	80020be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	223c      	movs	r2, #60	@ 0x3c
 80020b2:	2100      	movs	r1, #0
 80020b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 f839 	bl	8002130 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	223d      	movs	r2, #61	@ 0x3d
 80020c2:	2102      	movs	r1, #2
 80020c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	0019      	movs	r1, r3
 80020d0:	0010      	movs	r0, r2
 80020d2:	f000 f995 	bl	8002400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2246      	movs	r2, #70	@ 0x46
 80020da:	2101      	movs	r1, #1
 80020dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	223e      	movs	r2, #62	@ 0x3e
 80020e2:	2101      	movs	r1, #1
 80020e4:	5499      	strb	r1, [r3, r2]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	223f      	movs	r2, #63	@ 0x3f
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2240      	movs	r2, #64	@ 0x40
 80020f2:	2101      	movs	r1, #1
 80020f4:	5499      	strb	r1, [r3, r2]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2241      	movs	r2, #65	@ 0x41
 80020fa:	2101      	movs	r1, #1
 80020fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2242      	movs	r2, #66	@ 0x42
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2243      	movs	r2, #67	@ 0x43
 800210a:	2101      	movs	r1, #1
 800210c:	5499      	strb	r1, [r3, r2]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2244      	movs	r2, #68	@ 0x44
 8002112:	2101      	movs	r1, #1
 8002114:	5499      	strb	r1, [r3, r2]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2245      	movs	r2, #69	@ 0x45
 800211a:	2101      	movs	r1, #1
 800211c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	223d      	movs	r2, #61	@ 0x3d
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002138:	46c0      	nop			@ (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b002      	add	sp, #8
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	223d      	movs	r2, #61	@ 0x3d
 800214c:	5c9b      	ldrb	r3, [r3, r2]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d001      	beq.n	8002158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e03b      	b.n	80021d0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	223d      	movs	r2, #61	@ 0x3d
 800215c:	2102      	movs	r1, #2
 800215e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2101      	movs	r1, #1
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a18      	ldr	r2, [pc, #96]	@ (80021d8 <HAL_TIM_Base_Start_IT+0x98>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00f      	beq.n	800219a <HAL_TIM_Base_Start_IT+0x5a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	2380      	movs	r3, #128	@ 0x80
 8002180:	05db      	lsls	r3, r3, #23
 8002182:	429a      	cmp	r2, r3
 8002184:	d009      	beq.n	800219a <HAL_TIM_Base_Start_IT+0x5a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a14      	ldr	r2, [pc, #80]	@ (80021dc <HAL_TIM_Base_Start_IT+0x9c>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d004      	beq.n	800219a <HAL_TIM_Base_Start_IT+0x5a>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d111      	bne.n	80021be <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	2207      	movs	r2, #7
 80021a2:	4013      	ands	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b06      	cmp	r3, #6
 80021aa:	d010      	beq.n	80021ce <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2101      	movs	r1, #1
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021bc:	e007      	b.n	80021ce <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2101      	movs	r1, #1
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	0018      	movs	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	b004      	add	sp, #16
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40012c00 	.word	0x40012c00
 80021dc:	40000400 	.word	0x40000400
 80021e0:	40014000 	.word	0x40014000

080021e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2202      	movs	r2, #2
 8002200:	4013      	ands	r3, r2
 8002202:	d021      	beq.n	8002248 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2202      	movs	r2, #2
 8002208:	4013      	ands	r3, r2
 800220a:	d01d      	beq.n	8002248 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2203      	movs	r2, #3
 8002212:	4252      	negs	r2, r2
 8002214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699b      	ldr	r3, [r3, #24]
 8002222:	2203      	movs	r2, #3
 8002224:	4013      	ands	r3, r2
 8002226:	d004      	beq.n	8002232 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	0018      	movs	r0, r3
 800222c:	f000 f8d0 	bl	80023d0 <HAL_TIM_IC_CaptureCallback>
 8002230:	e007      	b.n	8002242 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	0018      	movs	r0, r3
 8002236:	f000 f8c3 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	0018      	movs	r0, r3
 800223e:	f000 f8cf 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2204      	movs	r2, #4
 800224c:	4013      	ands	r3, r2
 800224e:	d022      	beq.n	8002296 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2204      	movs	r2, #4
 8002254:	4013      	ands	r3, r2
 8002256:	d01e      	beq.n	8002296 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2205      	movs	r2, #5
 800225e:	4252      	negs	r2, r2
 8002260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699a      	ldr	r2, [r3, #24]
 800226e:	23c0      	movs	r3, #192	@ 0xc0
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4013      	ands	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 f8a9 	bl	80023d0 <HAL_TIM_IC_CaptureCallback>
 800227e:	e007      	b.n	8002290 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	0018      	movs	r0, r3
 8002284:	f000 f89c 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	0018      	movs	r0, r3
 800228c:	f000 f8a8 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2208      	movs	r2, #8
 800229a:	4013      	ands	r3, r2
 800229c:	d021      	beq.n	80022e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2208      	movs	r2, #8
 80022a2:	4013      	ands	r3, r2
 80022a4:	d01d      	beq.n	80022e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2209      	movs	r2, #9
 80022ac:	4252      	negs	r2, r2
 80022ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2204      	movs	r2, #4
 80022b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2203      	movs	r2, #3
 80022be:	4013      	ands	r3, r2
 80022c0:	d004      	beq.n	80022cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 f883 	bl	80023d0 <HAL_TIM_IC_CaptureCallback>
 80022ca:	e007      	b.n	80022dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 f876 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 f882 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2210      	movs	r2, #16
 80022e6:	4013      	ands	r3, r2
 80022e8:	d022      	beq.n	8002330 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2210      	movs	r2, #16
 80022ee:	4013      	ands	r3, r2
 80022f0:	d01e      	beq.n	8002330 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2211      	movs	r2, #17
 80022f8:	4252      	negs	r2, r2
 80022fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2208      	movs	r2, #8
 8002300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	69da      	ldr	r2, [r3, #28]
 8002308:	23c0      	movs	r3, #192	@ 0xc0
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4013      	ands	r3, r2
 800230e:	d004      	beq.n	800231a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 f85c 	bl	80023d0 <HAL_TIM_IC_CaptureCallback>
 8002318:	e007      	b.n	800232a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	0018      	movs	r0, r3
 800231e:	f000 f84f 	bl	80023c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f000 f85b 	bl	80023e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2201      	movs	r2, #1
 8002334:	4013      	ands	r3, r2
 8002336:	d00c      	beq.n	8002352 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d008      	beq.n	8002352 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2202      	movs	r2, #2
 8002346:	4252      	negs	r2, r2
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f7fe f923 	bl	8000598 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2280      	movs	r2, #128	@ 0x80
 8002356:	4013      	ands	r3, r2
 8002358:	d00c      	beq.n	8002374 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2280      	movs	r2, #128	@ 0x80
 800235e:	4013      	ands	r3, r2
 8002360:	d008      	beq.n	8002374 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2281      	movs	r2, #129	@ 0x81
 8002368:	4252      	negs	r2, r2
 800236a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	0018      	movs	r0, r3
 8002370:	f000 f8dc 	bl	800252c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2240      	movs	r2, #64	@ 0x40
 8002378:	4013      	ands	r3, r2
 800237a:	d00c      	beq.n	8002396 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2240      	movs	r2, #64	@ 0x40
 8002380:	4013      	ands	r3, r2
 8002382:	d008      	beq.n	8002396 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2241      	movs	r2, #65	@ 0x41
 800238a:	4252      	negs	r2, r2
 800238c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 f82d 	bl	80023f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2220      	movs	r2, #32
 800239a:	4013      	ands	r3, r2
 800239c:	d00c      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2220      	movs	r2, #32
 80023a2:	4013      	ands	r3, r2
 80023a4:	d008      	beq.n	80023b8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2221      	movs	r2, #33	@ 0x21
 80023ac:	4252      	negs	r2, r2
 80023ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 f8b2 	bl	800251c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b8:	46c0      	nop			@ (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b004      	add	sp, #16
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023c8:	46c0      	nop			@ (mov r8, r8)
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b002      	add	sp, #8
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023d8:	46c0      	nop			@ (mov r8, r8)
 80023da:	46bd      	mov	sp, r7
 80023dc:	b002      	add	sp, #8
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023e8:	46c0      	nop			@ (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}

08002400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a3b      	ldr	r2, [pc, #236]	@ (8002500 <TIM_Base_SetConfig+0x100>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d008      	beq.n	800242a <TIM_Base_SetConfig+0x2a>
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	2380      	movs	r3, #128	@ 0x80
 800241c:	05db      	lsls	r3, r3, #23
 800241e:	429a      	cmp	r2, r3
 8002420:	d003      	beq.n	800242a <TIM_Base_SetConfig+0x2a>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a37      	ldr	r2, [pc, #220]	@ (8002504 <TIM_Base_SetConfig+0x104>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d108      	bne.n	800243c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2270      	movs	r2, #112	@ 0x70
 800242e:	4393      	bics	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a30      	ldr	r2, [pc, #192]	@ (8002500 <TIM_Base_SetConfig+0x100>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d018      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	05db      	lsls	r3, r3, #23
 800244a:	429a      	cmp	r2, r3
 800244c:	d013      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a2c      	ldr	r2, [pc, #176]	@ (8002504 <TIM_Base_SetConfig+0x104>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d00f      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a2b      	ldr	r2, [pc, #172]	@ (8002508 <TIM_Base_SetConfig+0x108>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00b      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a2a      	ldr	r2, [pc, #168]	@ (800250c <TIM_Base_SetConfig+0x10c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a29      	ldr	r2, [pc, #164]	@ (8002510 <TIM_Base_SetConfig+0x110>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d003      	beq.n	8002476 <TIM_Base_SetConfig+0x76>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a28      	ldr	r2, [pc, #160]	@ (8002514 <TIM_Base_SetConfig+0x114>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d108      	bne.n	8002488 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4a27      	ldr	r2, [pc, #156]	@ (8002518 <TIM_Base_SetConfig+0x118>)
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2280      	movs	r2, #128	@ 0x80
 800248c:	4393      	bics	r3, r2
 800248e:	001a      	movs	r2, r3
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	4313      	orrs	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a13      	ldr	r2, [pc, #76]	@ (8002500 <TIM_Base_SetConfig+0x100>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00b      	beq.n	80024ce <TIM_Base_SetConfig+0xce>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a14      	ldr	r2, [pc, #80]	@ (800250c <TIM_Base_SetConfig+0x10c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d007      	beq.n	80024ce <TIM_Base_SetConfig+0xce>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a13      	ldr	r2, [pc, #76]	@ (8002510 <TIM_Base_SetConfig+0x110>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d003      	beq.n	80024ce <TIM_Base_SetConfig+0xce>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a12      	ldr	r2, [pc, #72]	@ (8002514 <TIM_Base_SetConfig+0x114>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d103      	bne.n	80024d6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2201      	movs	r2, #1
 80024da:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2201      	movs	r2, #1
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2201      	movs	r2, #1
 80024ee:	4393      	bics	r3, r2
 80024f0:	001a      	movs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]
  }
}
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	46bd      	mov	sp, r7
 80024fa:	b004      	add	sp, #16
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40000400 	.word	0x40000400
 8002508:	40002000 	.word	0x40002000
 800250c:	40014000 	.word	0x40014000
 8002510:	40014400 	.word	0x40014400
 8002514:	40014800 	.word	0x40014800
 8002518:	fffffcff 	.word	0xfffffcff

0800251c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002524:	46c0      	nop			@ (mov r8, r8)
 8002526:	46bd      	mov	sp, r7
 8002528:	b002      	add	sp, #8
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002534:	46c0      	nop			@ (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b002      	add	sp, #8
 800253a:	bd80      	pop	{r7, pc}

0800253c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	0002      	movs	r2, r0
 8002544:	1dbb      	adds	r3, r7, #6
 8002546:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800254c:	1dbb      	adds	r3, r7, #6
 800254e:	2200      	movs	r2, #0
 8002550:	5e9b      	ldrsh	r3, [r3, r2]
 8002552:	2b84      	cmp	r3, #132	@ 0x84
 8002554:	d006      	beq.n	8002564 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8002556:	1dbb      	adds	r3, r7, #6
 8002558:	2200      	movs	r2, #0
 800255a:	5e9a      	ldrsh	r2, [r3, r2]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	18d3      	adds	r3, r2, r3
 8002560:	3303      	adds	r3, #3
 8002562:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002564:	68fb      	ldr	r3, [r7, #12]
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b004      	add	sp, #16
 800256c:	bd80      	pop	{r7, pc}

0800256e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002572:	f000 faa5 	bl	8002ac0 <vTaskStartScheduler>
  
  return osOK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	0018      	movs	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800257e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002580:	b089      	sub	sp, #36	@ 0x24
 8002582:	af04      	add	r7, sp, #16
 8002584:	6078      	str	r0, [r7, #4]
 8002586:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <osThreadCreate+0x54>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01c      	beq.n	80025d2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685c      	ldr	r4, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691e      	ldr	r6, [r3, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2208      	movs	r2, #8
 80025a8:	5e9b      	ldrsh	r3, [r3, r2]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7ff ffc6 	bl	800253c <makeFreeRtosPriority>
              thread_def->buffer, thread_def->controlblock);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	9302      	str	r3, [sp, #8]
 80025bc:	9201      	str	r2, [sp, #4]
 80025be:	9000      	str	r0, [sp, #0]
 80025c0:	000b      	movs	r3, r1
 80025c2:	0032      	movs	r2, r6
 80025c4:	0029      	movs	r1, r5
 80025c6:	0020      	movs	r0, r4
 80025c8:	f000 f8e3 	bl	8002792 <xTaskCreateStatic>
 80025cc:	0003      	movs	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	e01d      	b.n	800260e <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685c      	ldr	r4, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025de:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2208      	movs	r2, #8
 80025e4:	5e9b      	ldrsh	r3, [r3, r2]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff ffa8 	bl	800253c <makeFreeRtosPriority>
 80025ec:	0001      	movs	r1, r0
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	230c      	movs	r3, #12
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	9100      	str	r1, [sp, #0]
 80025f8:	0013      	movs	r3, r2
 80025fa:	0032      	movs	r2, r6
 80025fc:	0029      	movs	r1, r5
 80025fe:	0020      	movs	r0, r4
 8002600:	f000 f90d 	bl	800281e <xTaskCreate>
 8002604:	0003      	movs	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d001      	beq.n	800260e <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b005      	add	sp, #20
 8002616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002618 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <osDelay+0x16>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	e000      	b.n	8002630 <osDelay+0x18>
 800262e:	2301      	movs	r3, #1
 8002630:	0018      	movs	r0, r3
 8002632:	f000 fa1f 	bl	8002a74 <vTaskDelay>
  
  return osOK;
 8002636:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002638:	0018      	movs	r0, r3
 800263a:	46bd      	mov	sp, r7
 800263c:	b004      	add	sp, #16
 800263e:	bd80      	pop	{r7, pc}

08002640 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3308      	adds	r3, #8
 800264c:	001a      	movs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	4252      	negs	r2, r2
 8002658:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3308      	adds	r3, #8
 800265e:	001a      	movs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3308      	adds	r3, #8
 8002668:	001a      	movs	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002674:	46c0      	nop			@ (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	b002      	add	sp, #8
 800267a:	bd80      	pop	{r7, pc}

0800267c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	46bd      	mov	sp, r7
 800268e:	b002      	add	sp, #8
 8002690:	bd80      	pop	{r7, pc}

08002692 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
}
 80026ce:	46c0      	nop			@ (mov r8, r8)
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b084      	sub	sp, #16
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	3301      	adds	r3, #1
 80026ea:	d103      	bne.n	80026f4 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	60fb      	str	r3, [r7, #12]
 80026f2:	e00c      	b.n	800270e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3308      	adds	r3, #8
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	e002      	b.n	8002702 <vListInsert+0x2c>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	d2f6      	bcs.n	80026fc <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b004      	add	sp, #16
 8002740:	bd80      	pop	{r7, pc}

08002742 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6892      	ldr	r2, [r2, #8]
 8002758:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6852      	ldr	r2, [r2, #4]
 8002762:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	429a      	cmp	r2, r3
 800276c:	d103      	bne.n	8002776 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	1e5a      	subs	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
}
 800278a:	0018      	movs	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	b004      	add	sp, #16
 8002790:	bd80      	pop	{r7, pc}

08002792 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002792:	b590      	push	{r4, r7, lr}
 8002794:	b08d      	sub	sp, #52	@ 0x34
 8002796:	af04      	add	r7, sp, #16
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
 800279e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80027a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d102      	bne.n	80027ac <xTaskCreateStatic+0x1a>
 80027a6:	b672      	cpsid	i
 80027a8:	46c0      	nop			@ (mov r8, r8)
 80027aa:	e7fd      	b.n	80027a8 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 80027ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d102      	bne.n	80027b8 <xTaskCreateStatic+0x26>
 80027b2:	b672      	cpsid	i
 80027b4:	46c0      	nop			@ (mov r8, r8)
 80027b6:	e7fd      	b.n	80027b4 <xTaskCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80027b8:	2354      	movs	r3, #84	@ 0x54
 80027ba:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	2b54      	cmp	r3, #84	@ 0x54
 80027c0:	d002      	beq.n	80027c8 <xTaskCreateStatic+0x36>
 80027c2:	b672      	cpsid	i
 80027c4:	46c0      	nop			@ (mov r8, r8)
 80027c6:	e7fd      	b.n	80027c4 <xTaskCreateStatic+0x32>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d020      	beq.n	8002810 <xTaskCreateStatic+0x7e>
 80027ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01d      	beq.n	8002810 <xTaskCreateStatic+0x7e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d6:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2251      	movs	r2, #81	@ 0x51
 80027e2:	2102      	movs	r1, #2
 80027e4:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027e6:	683c      	ldr	r4, [r7, #0]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	2300      	movs	r3, #0
 80027f0:	9303      	str	r3, [sp, #12]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	9302      	str	r3, [sp, #8]
 80027f6:	2318      	movs	r3, #24
 80027f8:	18fb      	adds	r3, r7, r3
 80027fa:	9301      	str	r3, [sp, #4]
 80027fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	0023      	movs	r3, r4
 8002802:	f000 f859 	bl	80028b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f8cf 	bl	80029ac <prvAddNewTaskToReadyList>
 800280e:	e001      	b.n	8002814 <xTaskCreateStatic+0x82>
		}
		else
		{
			xReturn = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002814:	69bb      	ldr	r3, [r7, #24]
	}
 8002816:	0018      	movs	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	b009      	add	sp, #36	@ 0x24
 800281c:	bd90      	pop	{r4, r7, pc}

0800281e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800281e:	b590      	push	{r4, r7, lr}
 8002820:	b08d      	sub	sp, #52	@ 0x34
 8002822:	af04      	add	r7, sp, #16
 8002824:	60f8      	str	r0, [r7, #12]
 8002826:	60b9      	str	r1, [r7, #8]
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	1dbb      	adds	r3, r7, #6
 800282c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	881b      	ldrh	r3, [r3, #0]
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	0018      	movs	r0, r3
 8002836:	f000 fd8b 	bl	8003350 <pvPortMalloc>
 800283a:	0003      	movs	r3, r0
 800283c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d010      	beq.n	8002866 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002844:	2054      	movs	r0, #84	@ 0x54
 8002846:	f000 fd83 	bl	8003350 <pvPortMalloc>
 800284a:	0003      	movs	r3, r0
 800284c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
 800285a:	e006      	b.n	800286a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 fe1e 	bl	80034a0 <vPortFree>
 8002864:	e001      	b.n	800286a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01a      	beq.n	80028a6 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	2251      	movs	r2, #81	@ 0x51
 8002874:	2100      	movs	r1, #0
 8002876:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002878:	1dbb      	adds	r3, r7, #6
 800287a:	881a      	ldrh	r2, [r3, #0]
 800287c:	683c      	ldr	r4, [r7, #0]
 800287e:	68b9      	ldr	r1, [r7, #8]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	2300      	movs	r3, #0
 8002884:	9303      	str	r3, [sp, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	9302      	str	r3, [sp, #8]
 800288a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	0023      	movs	r3, r4
 8002894:	f000 f810 	bl	80028b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	0018      	movs	r0, r3
 800289c:	f000 f886 	bl	80029ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028a0:	2301      	movs	r3, #1
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	e002      	b.n	80028ac <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028a6:	2301      	movs	r3, #1
 80028a8:	425b      	negs	r3, r3
 80028aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80028ac:	69bb      	ldr	r3, [r7, #24]
	}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b009      	add	sp, #36	@ 0x24
 80028b4:	bd90      	pop	{r4, r7, pc}
	...

080028b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80028c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4936      	ldr	r1, [pc, #216]	@ (80029a8 <prvInitialiseNewTask+0xf0>)
 80028ce:	468c      	mov	ip, r1
 80028d0:	4463      	add	r3, ip
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	18d3      	adds	r3, r2, r3
 80028d6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2207      	movs	r2, #7
 80028dc:	4393      	bics	r3, r2
 80028de:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2207      	movs	r2, #7
 80028e4:	4013      	ands	r3, r2
 80028e6:	d002      	beq.n	80028ee <prvInitialiseNewTask+0x36>
 80028e8:	b672      	cpsid	i
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	e7fd      	b.n	80028ea <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	e013      	b.n	800291c <prvInitialiseNewTask+0x64>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	18d3      	adds	r3, r2, r3
 80028fa:	7818      	ldrb	r0, [r3, #0]
 80028fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028fe:	2134      	movs	r1, #52	@ 0x34
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	18d3      	adds	r3, r2, r3
 8002904:	185b      	adds	r3, r3, r1
 8002906:	1c02      	adds	r2, r0, #0
 8002908:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	18d3      	adds	r3, r2, r3
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <prvInitialiseNewTask+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	3301      	adds	r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b0f      	cmp	r3, #15
 8002920:	d9e8      	bls.n	80028f4 <prvInitialiseNewTask+0x3c>
 8002922:	e000      	b.n	8002926 <prvInitialiseNewTask+0x6e>
		{
			break;
 8002924:	46c0      	nop			@ (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	2243      	movs	r2, #67	@ 0x43
 800292a:	2100      	movs	r1, #0
 800292c:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	2b06      	cmp	r3, #6
 8002932:	d901      	bls.n	8002938 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002934:	2306      	movs	r3, #6
 8002936:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293a:	6a3a      	ldr	r2, [r7, #32]
 800293c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	6a3a      	ldr	r2, [r7, #32]
 8002942:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	2200      	movs	r2, #0
 8002948:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	3304      	adds	r3, #4
 800294e:	0018      	movs	r0, r3
 8002950:	f7ff fe94 	bl	800267c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002956:	3318      	adds	r3, #24
 8002958:	0018      	movs	r0, r3
 800295a:	f7ff fe8f 	bl	800267c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800295e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002960:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002962:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002964:	6a3b      	ldr	r3, [r7, #32]
 8002966:	2207      	movs	r2, #7
 8002968:	1ad2      	subs	r2, r2, r3
 800296a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800296e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002970:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002972:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002976:	2200      	movs	r2, #0
 8002978:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800297a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297c:	2250      	movs	r2, #80	@ 0x50
 800297e:	2100      	movs	r1, #0
 8002980:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	68f9      	ldr	r1, [r7, #12]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	0018      	movs	r0, r3
 800298a:	f000 fbab 	bl	80030e4 <pxPortInitialiseStack>
 800298e:	0002      	movs	r2, r0
 8002990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002992:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <prvInitialiseNewTask+0xe8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800299a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800299e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029a0:	46c0      	nop			@ (mov r8, r8)
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b006      	add	sp, #24
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	3fffffff 	.word	0x3fffffff

080029ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029b4:	f000 fc34 	bl	8003220 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029b8:	4b28      	ldr	r3, [pc, #160]	@ (8002a5c <prvAddNewTaskToReadyList+0xb0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	4b27      	ldr	r3, [pc, #156]	@ (8002a5c <prvAddNewTaskToReadyList+0xb0>)
 80029c0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80029c2:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <prvAddNewTaskToReadyList+0xb4>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029ca:	4b25      	ldr	r3, [pc, #148]	@ (8002a60 <prvAddNewTaskToReadyList+0xb4>)
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029d0:	4b22      	ldr	r3, [pc, #136]	@ (8002a5c <prvAddNewTaskToReadyList+0xb0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d110      	bne.n	80029fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029d8:	f000 fa70 	bl	8002ebc <prvInitialiseTaskLists>
 80029dc:	e00d      	b.n	80029fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029de:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <prvAddNewTaskToReadyList+0xb8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <prvAddNewTaskToReadyList+0xb4>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d802      	bhi.n	80029fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a60 <prvAddNewTaskToReadyList+0xb4>)
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <prvAddNewTaskToReadyList+0xbc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <prvAddNewTaskToReadyList+0xbc>)
 8002a02:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <prvAddNewTaskToReadyList+0xc0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d903      	bls.n	8002a18 <prvAddNewTaskToReadyList+0x6c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a14:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <prvAddNewTaskToReadyList+0xc0>)
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a1c:	0013      	movs	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	189b      	adds	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	4a12      	ldr	r2, [pc, #72]	@ (8002a70 <prvAddNewTaskToReadyList+0xc4>)
 8002a26:	189a      	adds	r2, r3, r2
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	0010      	movs	r0, r2
 8002a30:	f7ff fe2f 	bl	8002692 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a34:	f000 fc06 	bl	8003244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a38:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <prvAddNewTaskToReadyList+0xb8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a40:	4b07      	ldr	r3, [pc, #28]	@ (8002a60 <prvAddNewTaskToReadyList+0xb4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d201      	bcs.n	8002a52 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a4e:	f000 fbd7 	bl	8003200 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b002      	add	sp, #8
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
 8002a5c:	20000434 	.word	0x20000434
 8002a60:	20000334 	.word	0x20000334
 8002a64:	20000440 	.word	0x20000440
 8002a68:	20000450 	.word	0x20000450
 8002a6c:	2000043c 	.word	0x2000043c
 8002a70:	20000338 	.word	0x20000338

08002a74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d011      	beq.n	8002aaa <vTaskDelay+0x36>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a86:	4b0d      	ldr	r3, [pc, #52]	@ (8002abc <vTaskDelay+0x48>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <vTaskDelay+0x20>
 8002a8e:	b672      	cpsid	i
 8002a90:	46c0      	nop			@ (mov r8, r8)
 8002a92:	e7fd      	b.n	8002a90 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8002a94:	f000 f862 	bl	8002b5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 facd 	bl	800303c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002aa2:	f000 f867 	bl	8002b74 <xTaskResumeAll>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <vTaskDelay+0x40>
		{
			portYIELD_WITHIN_API();
 8002ab0:	f000 fba6 	bl	8003200 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ab4:	46c0      	nop			@ (mov r8, r8)
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	2000045c 	.word	0x2000045c

08002ac0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ac0:	b590      	push	{r4, r7, lr}
 8002ac2:	b089      	sub	sp, #36	@ 0x24
 8002ac4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002ace:	003a      	movs	r2, r7
 8002ad0:	1d39      	adds	r1, r7, #4
 8002ad2:	2308      	movs	r3, #8
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7fd fba2 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002adc:	683c      	ldr	r4, [r7, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	4918      	ldr	r1, [pc, #96]	@ (8002b44 <vTaskStartScheduler+0x84>)
 8002ae4:	4818      	ldr	r0, [pc, #96]	@ (8002b48 <vTaskStartScheduler+0x88>)
 8002ae6:	9202      	str	r2, [sp, #8]
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2300      	movs	r3, #0
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	2300      	movs	r3, #0
 8002af0:	0022      	movs	r2, r4
 8002af2:	f7ff fe4e 	bl	8002792 <xTaskCreateStatic>
 8002af6:	0002      	movs	r2, r0
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <vTaskStartScheduler+0x8c>)
 8002afa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002afc:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <vTaskStartScheduler+0x8c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b04:	2301      	movs	r3, #1
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	e001      	b.n	8002b0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d10d      	bne.n	8002b30 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8002b14:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b16:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <vTaskStartScheduler+0x90>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4252      	negs	r2, r2
 8002b1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b54 <vTaskStartScheduler+0x94>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <vTaskStartScheduler+0x98>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b2a:	f000 fb45 	bl	80031b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b2e:	e005      	b.n	8002b3c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	d102      	bne.n	8002b3c <vTaskStartScheduler+0x7c>
 8002b36:	b672      	cpsid	i
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	e7fd      	b.n	8002b38 <vTaskStartScheduler+0x78>
}
 8002b3c:	46c0      	nop			@ (mov r8, r8)
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	b005      	add	sp, #20
 8002b42:	bd90      	pop	{r4, r7, pc}
 8002b44:	08003748 	.word	0x08003748
 8002b48:	08002e9d 	.word	0x08002e9d
 8002b4c:	20000458 	.word	0x20000458
 8002b50:	20000454 	.word	0x20000454
 8002b54:	20000440 	.word	0x20000440
 8002b58:	20000438 	.word	0x20000438

08002b5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <vTaskSuspendAll+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	4b02      	ldr	r3, [pc, #8]	@ (8002b70 <vTaskSuspendAll+0x14>)
 8002b68:	601a      	str	r2, [r3, #0]
}
 8002b6a:	46c0      	nop			@ (mov r8, r8)
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	2000045c 	.word	0x2000045c

08002b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002b82:	4b3a      	ldr	r3, [pc, #232]	@ (8002c6c <xTaskResumeAll+0xf8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d102      	bne.n	8002b90 <xTaskResumeAll+0x1c>
 8002b8a:	b672      	cpsid	i
 8002b8c:	46c0      	nop			@ (mov r8, r8)
 8002b8e:	e7fd      	b.n	8002b8c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002b90:	f000 fb46 	bl	8003220 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002b94:	4b35      	ldr	r3, [pc, #212]	@ (8002c6c <xTaskResumeAll+0xf8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	1e5a      	subs	r2, r3, #1
 8002b9a:	4b34      	ldr	r3, [pc, #208]	@ (8002c6c <xTaskResumeAll+0xf8>)
 8002b9c:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b9e:	4b33      	ldr	r3, [pc, #204]	@ (8002c6c <xTaskResumeAll+0xf8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d15b      	bne.n	8002c5e <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ba6:	4b32      	ldr	r3, [pc, #200]	@ (8002c70 <xTaskResumeAll+0xfc>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d057      	beq.n	8002c5e <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bae:	e02f      	b.n	8002c10 <xTaskResumeAll+0x9c>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002bb0:	4b30      	ldr	r3, [pc, #192]	@ (8002c74 <xTaskResumeAll+0x100>)
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	3318      	adds	r3, #24
 8002bbc:	0018      	movs	r0, r3
 8002bbe:	f7ff fdc0 	bl	8002742 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f7ff fdbb 	bl	8002742 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd0:	4b29      	ldr	r3, [pc, #164]	@ (8002c78 <xTaskResumeAll+0x104>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d903      	bls.n	8002be0 <xTaskResumeAll+0x6c>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bdc:	4b26      	ldr	r3, [pc, #152]	@ (8002c78 <xTaskResumeAll+0x104>)
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be4:	0013      	movs	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	189b      	adds	r3, r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4a23      	ldr	r2, [pc, #140]	@ (8002c7c <xTaskResumeAll+0x108>)
 8002bee:	189a      	adds	r2, r3, r2
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	0010      	movs	r0, r2
 8002bf8:	f7ff fd4b 	bl	8002692 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c00:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <xTaskResumeAll+0x10c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 8002c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002c84 <xTaskResumeAll+0x110>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c10:	4b18      	ldr	r3, [pc, #96]	@ (8002c74 <xTaskResumeAll+0x100>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1cb      	bne.n	8002bb0 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c1e:	f000 f9e9 	bl	8002ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002c22:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <xTaskResumeAll+0x114>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00f      	beq.n	8002c4e <xTaskResumeAll+0xda>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c2e:	f000 f82d 	bl	8002c8c <xTaskIncrementTick>
 8002c32:	1e03      	subs	r3, r0, #0
 8002c34:	d002      	beq.n	8002c3c <xTaskResumeAll+0xc8>
							{
								xYieldPending = pdTRUE;
 8002c36:	4b13      	ldr	r3, [pc, #76]	@ (8002c84 <xTaskResumeAll+0x110>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f2      	bne.n	8002c2e <xTaskResumeAll+0xba>

						uxPendedTicks = 0;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	@ (8002c88 <xTaskResumeAll+0x114>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c84 <xTaskResumeAll+0x110>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002c56:	2301      	movs	r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002c5a:	f000 fad1 	bl	8003200 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002c5e:	f000 faf1 	bl	8003244 <vPortExitCritical>

	return xAlreadyYielded;
 8002c62:	68bb      	ldr	r3, [r7, #8]
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b004      	add	sp, #16
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	2000045c 	.word	0x2000045c
 8002c70:	20000434 	.word	0x20000434
 8002c74:	200003f4 	.word	0x200003f4
 8002c78:	2000043c 	.word	0x2000043c
 8002c7c:	20000338 	.word	0x20000338
 8002c80:	20000334 	.word	0x20000334
 8002c84:	20000448 	.word	0x20000448
 8002c88:	20000444 	.word	0x20000444

08002c8c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c96:	4b4d      	ldr	r3, [pc, #308]	@ (8002dcc <xTaskIncrementTick+0x140>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d000      	beq.n	8002ca0 <xTaskIncrementTick+0x14>
 8002c9e:	e084      	b.n	8002daa <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd0 <xTaskIncrementTick+0x144>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ca8:	4b49      	ldr	r3, [pc, #292]	@ (8002dd0 <xTaskIncrementTick+0x144>)
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d118      	bne.n	8002ce6 <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002cb4:	4b47      	ldr	r3, [pc, #284]	@ (8002dd4 <xTaskIncrementTick+0x148>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <xTaskIncrementTick+0x38>
 8002cbe:	b672      	cpsid	i
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	e7fd      	b.n	8002cc0 <xTaskIncrementTick+0x34>
 8002cc4:	4b43      	ldr	r3, [pc, #268]	@ (8002dd4 <xTaskIncrementTick+0x148>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	4b43      	ldr	r3, [pc, #268]	@ (8002dd8 <xTaskIncrementTick+0x14c>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <xTaskIncrementTick+0x148>)
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	4b41      	ldr	r3, [pc, #260]	@ (8002dd8 <xTaskIncrementTick+0x14c>)
 8002cd4:	68fa      	ldr	r2, [r7, #12]
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	4b40      	ldr	r3, [pc, #256]	@ (8002ddc <xTaskIncrementTick+0x150>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	4b3f      	ldr	r3, [pc, #252]	@ (8002ddc <xTaskIncrementTick+0x150>)
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	f000 f987 	bl	8002ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8002de0 <xTaskIncrementTick+0x154>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d34e      	bcc.n	8002d8e <xTaskIncrementTick+0x102>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cf0:	4b38      	ldr	r3, [pc, #224]	@ (8002dd4 <xTaskIncrementTick+0x148>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <xTaskIncrementTick+0x72>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <xTaskIncrementTick+0x74>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <xTaskIncrementTick+0x82>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d04:	4b36      	ldr	r3, [pc, #216]	@ (8002de0 <xTaskIncrementTick+0x154>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	4252      	negs	r2, r2
 8002d0a:	601a      	str	r2, [r3, #0]
					break;
 8002d0c:	e03f      	b.n	8002d8e <xTaskIncrementTick+0x102>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d0e:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <xTaskIncrementTick+0x148>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d203      	bcs.n	8002d2e <xTaskIncrementTick+0xa2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002d26:	4b2e      	ldr	r3, [pc, #184]	@ (8002de0 <xTaskIncrementTick+0x154>)
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	601a      	str	r2, [r3, #0]
						break;
 8002d2c:	e02f      	b.n	8002d8e <xTaskIncrementTick+0x102>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	3304      	adds	r3, #4
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff fd05 	bl	8002742 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d004      	beq.n	8002d4a <xTaskIncrementTick+0xbe>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	3318      	adds	r3, #24
 8002d44:	0018      	movs	r0, r3
 8002d46:	f7ff fcfc 	bl	8002742 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4e:	4b25      	ldr	r3, [pc, #148]	@ (8002de4 <xTaskIncrementTick+0x158>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d903      	bls.n	8002d5e <xTaskIncrementTick+0xd2>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5a:	4b22      	ldr	r3, [pc, #136]	@ (8002de4 <xTaskIncrementTick+0x158>)
 8002d5c:	601a      	str	r2, [r3, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d62:	0013      	movs	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	189b      	adds	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002de8 <xTaskIncrementTick+0x15c>)
 8002d6c:	189a      	adds	r2, r3, r2
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3304      	adds	r3, #4
 8002d72:	0019      	movs	r1, r3
 8002d74:	0010      	movs	r0, r2
 8002d76:	f7ff fc8c 	bl	8002692 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dec <xTaskIncrementTick+0x160>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d3b3      	bcc.n	8002cf0 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d8c:	e7b0      	b.n	8002cf0 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002d8e:	4b17      	ldr	r3, [pc, #92]	@ (8002dec <xTaskIncrementTick+0x160>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d94:	4914      	ldr	r1, [pc, #80]	@ (8002de8 <xTaskIncrementTick+0x15c>)
 8002d96:	0013      	movs	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	189b      	adds	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	585b      	ldr	r3, [r3, r1]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d907      	bls.n	8002db4 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8002da4:	2301      	movs	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	e004      	b.n	8002db4 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002daa:	4b11      	ldr	r3, [pc, #68]	@ (8002df0 <xTaskIncrementTick+0x164>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <xTaskIncrementTick+0x164>)
 8002db2:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002db4:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <xTaskIncrementTick+0x168>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <xTaskIncrementTick+0x134>
		{
			xSwitchRequired = pdTRUE;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002dc0:	697b      	ldr	r3, [r7, #20]
}
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b006      	add	sp, #24
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	2000045c 	.word	0x2000045c
 8002dd0:	20000438 	.word	0x20000438
 8002dd4:	200003ec 	.word	0x200003ec
 8002dd8:	200003f0 	.word	0x200003f0
 8002ddc:	2000044c 	.word	0x2000044c
 8002de0:	20000454 	.word	0x20000454
 8002de4:	2000043c 	.word	0x2000043c
 8002de8:	20000338 	.word	0x20000338
 8002dec:	20000334 	.word	0x20000334
 8002df0:	20000444 	.word	0x20000444
 8002df4:	20000448 	.word	0x20000448

08002df8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002dfe:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <vTaskSwitchContext+0x90>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e06:	4b21      	ldr	r3, [pc, #132]	@ (8002e8c <vTaskSwitchContext+0x94>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e0c:	e038      	b.n	8002e80 <vTaskSwitchContext+0x88>
		xYieldPending = pdFALSE;
 8002e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e8c <vTaskSwitchContext+0x94>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002e14:	4b1e      	ldr	r3, [pc, #120]	@ (8002e90 <vTaskSwitchContext+0x98>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	e008      	b.n	8002e2e <vTaskSwitchContext+0x36>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <vTaskSwitchContext+0x30>
 8002e22:	b672      	cpsid	i
 8002e24:	46c0      	nop			@ (mov r8, r8)
 8002e26:	e7fd      	b.n	8002e24 <vTaskSwitchContext+0x2c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	607b      	str	r3, [r7, #4]
 8002e2e:	4919      	ldr	r1, [pc, #100]	@ (8002e94 <vTaskSwitchContext+0x9c>)
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	0013      	movs	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	189b      	adds	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	585b      	ldr	r3, [r3, r1]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ed      	beq.n	8002e1c <vTaskSwitchContext+0x24>
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	0013      	movs	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	189b      	adds	r3, r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4a12      	ldr	r2, [pc, #72]	@ (8002e94 <vTaskSwitchContext+0x9c>)
 8002e4c:	189b      	adds	r3, r3, r2
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	685a      	ldr	r2, [r3, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	3308      	adds	r3, #8
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d104      	bne.n	8002e70 <vTaskSwitchContext+0x78>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <vTaskSwitchContext+0xa0>)
 8002e78:	601a      	str	r2, [r3, #0]
 8002e7a:	4b05      	ldr	r3, [pc, #20]	@ (8002e90 <vTaskSwitchContext+0x98>)
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	601a      	str	r2, [r3, #0]
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b002      	add	sp, #8
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	2000045c 	.word	0x2000045c
 8002e8c:	20000448 	.word	0x20000448
 8002e90:	2000043c 	.word	0x2000043c
 8002e94:	20000338 	.word	0x20000338
 8002e98:	20000334 	.word	0x20000334

08002e9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002ea4:	f000 f84e 	bl	8002f44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002ea8:	4b03      	ldr	r3, [pc, #12]	@ (8002eb8 <prvIdleTask+0x1c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d9f9      	bls.n	8002ea4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002eb0:	f000 f9a6 	bl	8003200 <vPortYield>
		prvCheckTasksWaitingTermination();
 8002eb4:	e7f6      	b.n	8002ea4 <prvIdleTask+0x8>
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	20000338 	.word	0x20000338

08002ebc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
 8002ec6:	e00c      	b.n	8002ee2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	0013      	movs	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <prvInitialiseTaskLists+0x68>)
 8002ed4:	189b      	adds	r3, r3, r2
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff fbb2 	bl	8002640 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b06      	cmp	r3, #6
 8002ee6:	d9ef      	bls.n	8002ec8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f28 <prvInitialiseTaskLists+0x6c>)
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff fba8 	bl	8002640 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <prvInitialiseTaskLists+0x70>)
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f7ff fba4 	bl	8002640 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <prvInitialiseTaskLists+0x74>)
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff fba0 	bl	8002640 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f00:	4b0c      	ldr	r3, [pc, #48]	@ (8002f34 <prvInitialiseTaskLists+0x78>)
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff fb9c 	bl	8002640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f08:	4b0b      	ldr	r3, [pc, #44]	@ (8002f38 <prvInitialiseTaskLists+0x7c>)
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	f7ff fb98 	bl	8002640 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f10:	4b0a      	ldr	r3, [pc, #40]	@ (8002f3c <prvInitialiseTaskLists+0x80>)
 8002f12:	4a05      	ldr	r2, [pc, #20]	@ (8002f28 <prvInitialiseTaskLists+0x6c>)
 8002f14:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f16:	4b0a      	ldr	r3, [pc, #40]	@ (8002f40 <prvInitialiseTaskLists+0x84>)
 8002f18:	4a04      	ldr	r2, [pc, #16]	@ (8002f2c <prvInitialiseTaskLists+0x70>)
 8002f1a:	601a      	str	r2, [r3, #0]
}
 8002f1c:	46c0      	nop			@ (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b002      	add	sp, #8
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	20000338 	.word	0x20000338
 8002f28:	200003c4 	.word	0x200003c4
 8002f2c:	200003d8 	.word	0x200003d8
 8002f30:	200003f4 	.word	0x200003f4
 8002f34:	20000408 	.word	0x20000408
 8002f38:	20000420 	.word	0x20000420
 8002f3c:	200003ec 	.word	0x200003ec
 8002f40:	200003f0 	.word	0x200003f0

08002f44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f4a:	e01a      	b.n	8002f82 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8002f4c:	f000 f968 	bl	8003220 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002f50:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <prvCheckTasksWaitingTermination+0x50>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff fbf0 	bl	8002742 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <prvCheckTasksWaitingTermination+0x54>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	1e5a      	subs	r2, r3, #1
 8002f68:	4b0b      	ldr	r3, [pc, #44]	@ (8002f98 <prvCheckTasksWaitingTermination+0x54>)
 8002f6a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <prvCheckTasksWaitingTermination+0x58>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1e5a      	subs	r2, r3, #1
 8002f72:	4b0a      	ldr	r3, [pc, #40]	@ (8002f9c <prvCheckTasksWaitingTermination+0x58>)
 8002f74:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8002f76:	f000 f965 	bl	8003244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	f000 f80f 	bl	8002fa0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <prvCheckTasksWaitingTermination+0x58>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1e0      	bne.n	8002f4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	46c0      	nop			@ (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000408 	.word	0x20000408
 8002f98:	20000434 	.word	0x20000434
 8002f9c:	2000041c 	.word	0x2000041c

08002fa0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2251      	movs	r2, #81	@ 0x51
 8002fac:	5c9b      	ldrb	r3, [r3, r2]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d109      	bne.n	8002fc6 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f000 fa72 	bl	80034a0 <vPortFree>
				vPortFree( pxTCB );
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f000 fa6e 	bl	80034a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002fc4:	e011      	b.n	8002fea <prvDeleteTCB+0x4a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2251      	movs	r2, #81	@ 0x51
 8002fca:	5c9b      	ldrb	r3, [r3, r2]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d104      	bne.n	8002fda <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 fa64 	bl	80034a0 <vPortFree>
	}
 8002fd8:	e007      	b.n	8002fea <prvDeleteTCB+0x4a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2251      	movs	r2, #81	@ 0x51
 8002fde:	5c9b      	ldrb	r3, [r3, r2]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d002      	beq.n	8002fea <prvDeleteTCB+0x4a>
 8002fe4:	b672      	cpsid	i
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	e7fd      	b.n	8002fe6 <prvDeleteTCB+0x46>
	}
 8002fea:	46c0      	nop			@ (mov r8, r8)
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b002      	add	sp, #8
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8003034 <prvResetNextTaskUnblockTime+0x40>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <prvResetNextTaskUnblockTime+0x14>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <prvResetNextTaskUnblockTime+0x16>
 8003008:	2300      	movs	r3, #0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <prvResetNextTaskUnblockTime+0x44>)
 8003010:	2201      	movs	r2, #1
 8003012:	4252      	negs	r2, r2
 8003014:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003016:	e008      	b.n	800302a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003018:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <prvResetNextTaskUnblockTime+0x40>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	4b04      	ldr	r3, [pc, #16]	@ (8003038 <prvResetNextTaskUnblockTime+0x44>)
 8003028:	601a      	str	r2, [r3, #0]
}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	200003ec 	.word	0x200003ec
 8003038:	20000454 	.word	0x20000454

0800303c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003046:	4b21      	ldr	r3, [pc, #132]	@ (80030cc <prvAddCurrentTaskToDelayedList+0x90>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800304c:	4b20      	ldr	r3, [pc, #128]	@ (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	3304      	adds	r3, #4
 8003052:	0018      	movs	r0, r3
 8003054:	f7ff fb75 	bl	8002742 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3301      	adds	r3, #1
 800305c:	d10b      	bne.n	8003076 <prvAddCurrentTaskToDelayedList+0x3a>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003064:	4b1a      	ldr	r3, [pc, #104]	@ (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	1d1a      	adds	r2, r3, #4
 800306a:	4b1a      	ldr	r3, [pc, #104]	@ (80030d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800306c:	0011      	movs	r1, r2
 800306e:	0018      	movs	r0, r3
 8003070:	f7ff fb0f 	bl	8002692 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003074:	e026      	b.n	80030c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	18d3      	adds	r3, r2, r3
 800307c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800307e:	4b14      	ldr	r3, [pc, #80]	@ (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	429a      	cmp	r2, r3
 800308c:	d209      	bcs.n	80030a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800308e:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4b0f      	ldr	r3, [pc, #60]	@ (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3304      	adds	r3, #4
 8003098:	0019      	movs	r1, r3
 800309a:	0010      	movs	r0, r2
 800309c:	f7ff fb1b 	bl	80026d6 <vListInsert>
}
 80030a0:	e010      	b.n	80030c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80030a2:	4b0e      	ldr	r3, [pc, #56]	@ (80030dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	4b0a      	ldr	r3, [pc, #40]	@ (80030d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	3304      	adds	r3, #4
 80030ac:	0019      	movs	r1, r3
 80030ae:	0010      	movs	r0, r2
 80030b0:	f7ff fb11 	bl	80026d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80030b4:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d202      	bcs.n	80030c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80030be:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	601a      	str	r2, [r3, #0]
}
 80030c4:	46c0      	nop			@ (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b004      	add	sp, #16
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	20000438 	.word	0x20000438
 80030d0:	20000334 	.word	0x20000334
 80030d4:	20000420 	.word	0x20000420
 80030d8:	200003f0 	.word	0x200003f0
 80030dc:	200003ec 	.word	0x200003ec
 80030e0:	20000454 	.word	0x20000454

080030e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	3b04      	subs	r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2280      	movs	r2, #128	@ 0x80
 80030fa:	0452      	lsls	r2, r2, #17
 80030fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	3b04      	subs	r3, #4
 8003102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3b04      	subs	r3, #4
 800310e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003110:	4a08      	ldr	r2, [pc, #32]	@ (8003134 <pxPortInitialiseStack+0x50>)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	3b14      	subs	r3, #20
 800311a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	3b20      	subs	r3, #32
 8003126:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003128:	68fb      	ldr	r3, [r7, #12]
}
 800312a:	0018      	movs	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	b004      	add	sp, #16
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	08003139 	.word	0x08003139

08003138 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003142:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <prvTaskExitError+0x2c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	d002      	beq.n	8003150 <prvTaskExitError+0x18>
 800314a:	b672      	cpsid	i
 800314c:	46c0      	nop			@ (mov r8, r8)
 800314e:	e7fd      	b.n	800314c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8003150:	b672      	cpsid	i
	while( ulDummy == 0 )
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d0fc      	beq.n	8003154 <prvTaskExitError+0x1c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	46c0      	nop			@ (mov r8, r8)
 800315e:	46bd      	mov	sp, r7
 8003160:	b002      	add	sp, #8
 8003162:	bd80      	pop	{r7, pc}
 8003164:	2000000c 	.word	0x2000000c

08003168 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800316c:	46c0      	nop			@ (mov r8, r8)
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003180 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8003180:	4a0b      	ldr	r2, [pc, #44]	@ (80031b0 <pxCurrentTCBConst2>)
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	3020      	adds	r0, #32
 8003188:	f380 8809 	msr	PSP, r0
 800318c:	2002      	movs	r0, #2
 800318e:	f380 8814 	msr	CONTROL, r0
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8003198:	46ae      	mov	lr, r5
 800319a:	bc08      	pop	{r3}
 800319c:	bc04      	pop	{r2}
 800319e:	b662      	cpsie	i
 80031a0:	4718      	bx	r3
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	46c0      	nop			@ (mov r8, r8)
 80031a6:	46c0      	nop			@ (mov r8, r8)
 80031a8:	46c0      	nop			@ (mov r8, r8)
 80031aa:	46c0      	nop			@ (mov r8, r8)
 80031ac:	46c0      	nop			@ (mov r8, r8)
 80031ae:	46c0      	nop			@ (mov r8, r8)

080031b0 <pxCurrentTCBConst2>:
 80031b0:	20000334 	.word	0x20000334
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	46c0      	nop			@ (mov r8, r8)

080031b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80031bc:	4b0e      	ldr	r3, [pc, #56]	@ (80031f8 <xPortStartScheduler+0x40>)
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b0d      	ldr	r3, [pc, #52]	@ (80031f8 <xPortStartScheduler+0x40>)
 80031c2:	21ff      	movs	r1, #255	@ 0xff
 80031c4:	0409      	lsls	r1, r1, #16
 80031c6:	430a      	orrs	r2, r1
 80031c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <xPortStartScheduler+0x40>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <xPortStartScheduler+0x40>)
 80031d0:	21ff      	movs	r1, #255	@ 0xff
 80031d2:	0609      	lsls	r1, r1, #24
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80031d8:	f000 f898 	bl	800330c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80031dc:	4b07      	ldr	r3, [pc, #28]	@ (80031fc <xPortStartScheduler+0x44>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80031e2:	f7ff ffcd 	bl	8003180 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80031e6:	f7ff fe07 	bl	8002df8 <vTaskSwitchContext>
	prvTaskExitError();
 80031ea:	f7ff ffa5 	bl	8003138 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	0018      	movs	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	e000ed20 	.word	0xe000ed20
 80031fc:	2000000c 	.word	0x2000000c

08003200 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <vPortYield+0x1c>)
 8003206:	2280      	movs	r2, #128	@ 0x80
 8003208:	0552      	lsls	r2, r2, #21
 800320a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800320c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003210:	f3bf 8f6f 	isb	sy
}
 8003214:	46c0      	nop			@ (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			@ (mov r8, r8)
 800321c:	e000ed04 	.word	0xe000ed04

08003220 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8003224:	b672      	cpsid	i
    uxCriticalNesting++;
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <vPortEnterCritical+0x20>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <vPortEnterCritical+0x20>)
 800322e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8003230:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8003234:	f3bf 8f6f 	isb	sy
}
 8003238:	46c0      	nop			@ (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	46c0      	nop			@ (mov r8, r8)
 8003240:	2000000c 	.word	0x2000000c

08003244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003248:	4b09      	ldr	r3, [pc, #36]	@ (8003270 <vPortExitCritical+0x2c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <vPortExitCritical+0x12>
 8003250:	b672      	cpsid	i
 8003252:	46c0      	nop			@ (mov r8, r8)
 8003254:	e7fd      	b.n	8003252 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8003256:	4b06      	ldr	r3, [pc, #24]	@ (8003270 <vPortExitCritical+0x2c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	1e5a      	subs	r2, r3, #1
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <vPortExitCritical+0x2c>)
 800325e:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8003260:	4b03      	ldr	r3, [pc, #12]	@ (8003270 <vPortExitCritical+0x2c>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d100      	bne.n	800326a <vPortExitCritical+0x26>
    {
        portENABLE_INTERRUPTS();
 8003268:	b662      	cpsie	i
    }
}
 800326a:	46c0      	nop			@ (mov r8, r8)
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	2000000c 	.word	0x2000000c

08003274 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8003274:	f3ef 8010 	mrs	r0, PRIMASK
 8003278:	b672      	cpsid	i
 800327a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800327c:	46c0      	nop			@ (mov r8, r8)
 800327e:	0018      	movs	r0, r3

08003280 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8003280:	f380 8810 	msr	PRIMASK, r0
 8003284:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8003286:	46c0      	nop			@ (mov r8, r8)
	...

08003290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003290:	f3ef 8009 	mrs	r0, PSP
 8003294:	4b0e      	ldr	r3, [pc, #56]	@ (80032d0 <pxCurrentTCBConst>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	3820      	subs	r0, #32
 800329a:	6010      	str	r0, [r2, #0]
 800329c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800329e:	4644      	mov	r4, r8
 80032a0:	464d      	mov	r5, r9
 80032a2:	4656      	mov	r6, sl
 80032a4:	465f      	mov	r7, fp
 80032a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80032a8:	b508      	push	{r3, lr}
 80032aa:	b672      	cpsid	i
 80032ac:	f7ff fda4 	bl	8002df8 <vTaskSwitchContext>
 80032b0:	b662      	cpsie	i
 80032b2:	bc0c      	pop	{r2, r3}
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	6808      	ldr	r0, [r1, #0]
 80032b8:	3010      	adds	r0, #16
 80032ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032bc:	46a0      	mov	r8, r4
 80032be:	46a9      	mov	r9, r5
 80032c0:	46b2      	mov	sl, r6
 80032c2:	46bb      	mov	fp, r7
 80032c4:	f380 8809 	msr	PSP, r0
 80032c8:	3820      	subs	r0, #32
 80032ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80032cc:	4718      	bx	r3
 80032ce:	46c0      	nop			@ (mov r8, r8)

080032d0 <pxCurrentTCBConst>:
 80032d0:	20000334 	.word	0x20000334
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80032d4:	46c0      	nop			@ (mov r8, r8)
 80032d6:	46c0      	nop			@ (mov r8, r8)

080032d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80032de:	f7ff ffc9 	bl	8003274 <ulSetInterruptMaskFromISR>
 80032e2:	0003      	movs	r3, r0
 80032e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80032e6:	f7ff fcd1 	bl	8002c8c <xTaskIncrementTick>
 80032ea:	1e03      	subs	r3, r0, #0
 80032ec:	d003      	beq.n	80032f6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80032ee:	4b06      	ldr	r3, [pc, #24]	@ (8003308 <SysTick_Handler+0x30>)
 80032f0:	2280      	movs	r2, #128	@ 0x80
 80032f2:	0552      	lsls	r2, r2, #21
 80032f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff ffc1 	bl	8003280 <vClearInterruptMaskFromISR>
}
 80032fe:	46c0      	nop			@ (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b002      	add	sp, #8
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			@ (mov r8, r8)
 8003308:	e000ed04 	.word	0xe000ed04

0800330c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8003310:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <prvSetupTimerInterrupt+0x34>)
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8003316:	4b0b      	ldr	r3, [pc, #44]	@ (8003344 <prvSetupTimerInterrupt+0x38>)
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800331c:	4b0a      	ldr	r3, [pc, #40]	@ (8003348 <prvSetupTimerInterrupt+0x3c>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	22fa      	movs	r2, #250	@ 0xfa
 8003322:	0091      	lsls	r1, r2, #2
 8003324:	0018      	movs	r0, r3
 8003326:	f7fc feef 	bl	8000108 <__udivsi3>
 800332a:	0003      	movs	r3, r0
 800332c:	001a      	movs	r2, r3
 800332e:	4b07      	ldr	r3, [pc, #28]	@ (800334c <prvSetupTimerInterrupt+0x40>)
 8003330:	3a01      	subs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8003334:	4b02      	ldr	r3, [pc, #8]	@ (8003340 <prvSetupTimerInterrupt+0x34>)
 8003336:	2207      	movs	r2, #7
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	e000e010 	.word	0xe000e010
 8003344:	e000e018 	.word	0xe000e018
 8003348:	20000000 	.word	0x20000000
 800334c:	e000e014 	.word	0xe000e014

08003350 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800335c:	f7ff fbfe 	bl	8002b5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003360:	4b4a      	ldr	r3, [pc, #296]	@ (800348c <pvPortMalloc+0x13c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003368:	f000 f8e4 	bl	8003534 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800336c:	4b48      	ldr	r3, [pc, #288]	@ (8003490 <pvPortMalloc+0x140>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4013      	ands	r3, r2
 8003374:	d000      	beq.n	8003378 <pvPortMalloc+0x28>
 8003376:	e07b      	b.n	8003470 <pvPortMalloc+0x120>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d013      	beq.n	80033a6 <pvPortMalloc+0x56>
			{
				xWantedSize += xHeapStructSize;
 800337e:	2208      	movs	r2, #8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	189b      	adds	r3, r3, r2
 8003384:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2207      	movs	r2, #7
 800338a:	4013      	ands	r3, r2
 800338c:	d00b      	beq.n	80033a6 <pvPortMalloc+0x56>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2207      	movs	r2, #7
 8003392:	4393      	bics	r3, r2
 8003394:	3308      	adds	r3, #8
 8003396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2207      	movs	r2, #7
 800339c:	4013      	ands	r3, r2
 800339e:	d002      	beq.n	80033a6 <pvPortMalloc+0x56>
 80033a0:	b672      	cpsid	i
 80033a2:	46c0      	nop			@ (mov r8, r8)
 80033a4:	e7fd      	b.n	80033a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d061      	beq.n	8003470 <pvPortMalloc+0x120>
 80033ac:	4b39      	ldr	r3, [pc, #228]	@ (8003494 <pvPortMalloc+0x144>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d85c      	bhi.n	8003470 <pvPortMalloc+0x120>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80033b6:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <pvPortMalloc+0x148>)
 80033b8:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80033ba:	4b37      	ldr	r3, [pc, #220]	@ (8003498 <pvPortMalloc+0x148>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033c0:	e004      	b.n	80033cc <pvPortMalloc+0x7c>
				{
					pxPreviousBlock = pxBlock;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d903      	bls.n	80033de <pvPortMalloc+0x8e>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f1      	bne.n	80033c2 <pvPortMalloc+0x72>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80033de:	4b2b      	ldr	r3, [pc, #172]	@ (800348c <pvPortMalloc+0x13c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d043      	beq.n	8003470 <pvPortMalloc+0x120>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2208      	movs	r2, #8
 80033ee:	189b      	adds	r3, r3, r2
 80033f0:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	1ad2      	subs	r2, r2, r3
 8003402:	2308      	movs	r3, #8
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	429a      	cmp	r2, r3
 8003408:	d917      	bls.n	800343a <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	18d3      	adds	r3, r2, r3
 8003410:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2207      	movs	r2, #7
 8003416:	4013      	ands	r3, r2
 8003418:	d002      	beq.n	8003420 <pvPortMalloc+0xd0>
 800341a:	b672      	cpsid	i
 800341c:	46c0      	nop			@ (mov r8, r8)
 800341e:	e7fd      	b.n	800341c <pvPortMalloc+0xcc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	685a      	ldr	r2, [r3, #4]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	1ad2      	subs	r2, r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0018      	movs	r0, r3
 8003436:	f000 f8dd 	bl	80035f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800343a:	4b16      	ldr	r3, [pc, #88]	@ (8003494 <pvPortMalloc+0x144>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	1ad2      	subs	r2, r2, r3
 8003444:	4b13      	ldr	r3, [pc, #76]	@ (8003494 <pvPortMalloc+0x144>)
 8003446:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003448:	4b12      	ldr	r3, [pc, #72]	@ (8003494 <pvPortMalloc+0x144>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b13      	ldr	r3, [pc, #76]	@ (800349c <pvPortMalloc+0x14c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d203      	bcs.n	800345c <pvPortMalloc+0x10c>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003454:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <pvPortMalloc+0x144>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b10      	ldr	r3, [pc, #64]	@ (800349c <pvPortMalloc+0x14c>)
 800345a:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <pvPortMalloc+0x140>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	431a      	orrs	r2, r3
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003470:	f7ff fb80 	bl	8002b74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2207      	movs	r2, #7
 8003478:	4013      	ands	r3, r2
 800347a:	d002      	beq.n	8003482 <pvPortMalloc+0x132>
 800347c:	b672      	cpsid	i
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	e7fd      	b.n	800347e <pvPortMalloc+0x12e>
	return pvReturn;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	0018      	movs	r0, r3
 8003486:	46bd      	mov	sp, r7
 8003488:	b006      	add	sp, #24
 800348a:	bd80      	pop	{r7, pc}
 800348c:	20001068 	.word	0x20001068
 8003490:	20001074 	.word	0x20001074
 8003494:	2000106c 	.word	0x2000106c
 8003498:	20001060 	.word	0x20001060
 800349c:	20001070 	.word	0x20001070

080034a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d037      	beq.n	8003522 <vPortFree+0x82>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80034b2:	2308      	movs	r3, #8
 80034b4:	425b      	negs	r3, r3
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	18d3      	adds	r3, r2, r3
 80034ba:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4b19      	ldr	r3, [pc, #100]	@ (800352c <vPortFree+0x8c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4013      	ands	r3, r2
 80034ca:	d102      	bne.n	80034d2 <vPortFree+0x32>
 80034cc:	b672      	cpsid	i
 80034ce:	46c0      	nop			@ (mov r8, r8)
 80034d0:	e7fd      	b.n	80034ce <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <vPortFree+0x40>
 80034da:	b672      	cpsid	i
 80034dc:	46c0      	nop			@ (mov r8, r8)
 80034de:	e7fd      	b.n	80034dc <vPortFree+0x3c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	4b11      	ldr	r3, [pc, #68]	@ (800352c <vPortFree+0x8c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4013      	ands	r3, r2
 80034ea:	d01a      	beq.n	8003522 <vPortFree+0x82>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d116      	bne.n	8003522 <vPortFree+0x82>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <vPortFree+0x8c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	401a      	ands	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003504:	f7ff fb2a 	bl	8002b5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	4b08      	ldr	r3, [pc, #32]	@ (8003530 <vPortFree+0x90>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	18d2      	adds	r2, r2, r3
 8003512:	4b07      	ldr	r3, [pc, #28]	@ (8003530 <vPortFree+0x90>)
 8003514:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f86b 	bl	80035f4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800351e:	f7ff fb29 	bl	8002b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b004      	add	sp, #16
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	20001074 	.word	0x20001074
 8003530:	2000106c 	.word	0x2000106c

08003534 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800353a:	23c0      	movs	r3, #192	@ 0xc0
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003540:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <prvHeapInit+0xa8>)
 8003542:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2207      	movs	r2, #7
 8003548:	4013      	ands	r3, r2
 800354a:	d00c      	beq.n	8003566 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3307      	adds	r3, #7
 8003550:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2207      	movs	r2, #7
 8003556:	4393      	bics	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1ad2      	subs	r2, r2, r3
 8003560:	4b1e      	ldr	r3, [pc, #120]	@ (80035dc <prvHeapInit+0xa8>)
 8003562:	18d3      	adds	r3, r2, r3
 8003564:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800356a:	4b1d      	ldr	r3, [pc, #116]	@ (80035e0 <prvHeapInit+0xac>)
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003570:	4b1b      	ldr	r3, [pc, #108]	@ (80035e0 <prvHeapInit+0xac>)
 8003572:	2200      	movs	r2, #0
 8003574:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68ba      	ldr	r2, [r7, #8]
 800357a:	18d3      	adds	r3, r2, r3
 800357c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800357e:	2208      	movs	r2, #8
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2207      	movs	r2, #7
 800358a:	4393      	bics	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4b14      	ldr	r3, [pc, #80]	@ (80035e4 <prvHeapInit+0xb0>)
 8003592:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8003594:	4b13      	ldr	r3, [pc, #76]	@ (80035e4 <prvHeapInit+0xb0>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800359c:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <prvHeapInit+0xb0>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	1ad2      	subs	r2, r2, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035b2:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <prvHeapInit+0xb0>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	4b0a      	ldr	r3, [pc, #40]	@ (80035e8 <prvHeapInit+0xb4>)
 80035c0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4b09      	ldr	r3, [pc, #36]	@ (80035ec <prvHeapInit+0xb8>)
 80035c8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035ca:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <prvHeapInit+0xbc>)
 80035cc:	2280      	movs	r2, #128	@ 0x80
 80035ce:	0612      	lsls	r2, r2, #24
 80035d0:	601a      	str	r2, [r3, #0]
}
 80035d2:	46c0      	nop			@ (mov r8, r8)
 80035d4:	46bd      	mov	sp, r7
 80035d6:	b004      	add	sp, #16
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	46c0      	nop			@ (mov r8, r8)
 80035dc:	20000460 	.word	0x20000460
 80035e0:	20001060 	.word	0x20001060
 80035e4:	20001068 	.word	0x20001068
 80035e8:	20001070 	.word	0x20001070
 80035ec:	2000106c 	.word	0x2000106c
 80035f0:	20001074 	.word	0x20001074

080035f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035fc:	4b27      	ldr	r3, [pc, #156]	@ (800369c <prvInsertBlockIntoFreeList+0xa8>)
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	e002      	b.n	8003608 <prvInsertBlockIntoFreeList+0x14>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	429a      	cmp	r2, r3
 8003610:	d8f7      	bhi.n	8003602 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	18d3      	adds	r3, r2, r3
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	429a      	cmp	r2, r3
 8003622:	d108      	bne.n	8003636 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	18d2      	adds	r2, r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	18d2      	adds	r2, r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d118      	bne.n	800367c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	4b14      	ldr	r3, [pc, #80]	@ (80036a0 <prvInsertBlockIntoFreeList+0xac>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d00d      	beq.n	8003672 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	18d2      	adds	r2, r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e008      	b.n	8003684 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003672:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <prvInsertBlockIntoFreeList+0xac>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e003      	b.n	8003684 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	429a      	cmp	r2, r3
 800368a:	d002      	beq.n	8003692 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003692:	46c0      	nop			@ (mov r8, r8)
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	20001060 	.word	0x20001060
 80036a0:	20001068 	.word	0x20001068

080036a4 <memset>:
 80036a4:	0003      	movs	r3, r0
 80036a6:	1882      	adds	r2, r0, r2
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d100      	bne.n	80036ae <memset+0xa>
 80036ac:	4770      	bx	lr
 80036ae:	7019      	strb	r1, [r3, #0]
 80036b0:	3301      	adds	r3, #1
 80036b2:	e7f9      	b.n	80036a8 <memset+0x4>

080036b4 <__libc_init_array>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	2600      	movs	r6, #0
 80036b8:	4c0c      	ldr	r4, [pc, #48]	@ (80036ec <__libc_init_array+0x38>)
 80036ba:	4d0d      	ldr	r5, [pc, #52]	@ (80036f0 <__libc_init_array+0x3c>)
 80036bc:	1b64      	subs	r4, r4, r5
 80036be:	10a4      	asrs	r4, r4, #2
 80036c0:	42a6      	cmp	r6, r4
 80036c2:	d109      	bne.n	80036d8 <__libc_init_array+0x24>
 80036c4:	2600      	movs	r6, #0
 80036c6:	f000 f819 	bl	80036fc <_init>
 80036ca:	4c0a      	ldr	r4, [pc, #40]	@ (80036f4 <__libc_init_array+0x40>)
 80036cc:	4d0a      	ldr	r5, [pc, #40]	@ (80036f8 <__libc_init_array+0x44>)
 80036ce:	1b64      	subs	r4, r4, r5
 80036d0:	10a4      	asrs	r4, r4, #2
 80036d2:	42a6      	cmp	r6, r4
 80036d4:	d105      	bne.n	80036e2 <__libc_init_array+0x2e>
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	00b3      	lsls	r3, r6, #2
 80036da:	58eb      	ldr	r3, [r5, r3]
 80036dc:	4798      	blx	r3
 80036de:	3601      	adds	r6, #1
 80036e0:	e7ee      	b.n	80036c0 <__libc_init_array+0xc>
 80036e2:	00b3      	lsls	r3, r6, #2
 80036e4:	58eb      	ldr	r3, [r5, r3]
 80036e6:	4798      	blx	r3
 80036e8:	3601      	adds	r6, #1
 80036ea:	e7f2      	b.n	80036d2 <__libc_init_array+0x1e>
 80036ec:	08003788 	.word	0x08003788
 80036f0:	08003788 	.word	0x08003788
 80036f4:	0800378c 	.word	0x0800378c
 80036f8:	08003788 	.word	0x08003788

080036fc <_init>:
 80036fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036fe:	46c0      	nop			@ (mov r8, r8)
 8003700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003702:	bc08      	pop	{r3}
 8003704:	469e      	mov	lr, r3
 8003706:	4770      	bx	lr

08003708 <_fini>:
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	46c0      	nop			@ (mov r8, r8)
 800370c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800370e:	bc08      	pop	{r3}
 8003710:	469e      	mov	lr, r3
 8003712:	4770      	bx	lr
